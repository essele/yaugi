ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"command.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	toks,80,4
  20              		.global	tok_count
  21              		.bss
  22              		.align	2
  23              		.type	tok_count, %object
  24              		.size	tok_count, 4
  25              	tok_count:
  26 0000 00000000 		.space	4
  27              		.global	commands
  28              		.section	.rodata
  29              		.align	2
  30              	.LC0:
  31 0000 61646472 		.ascii	"addr\000"
  31      00
  32 0005 000000   		.align	2
  33              	.LC1:
  34 0008 436F6E66 		.ascii	"Configure or query the GPIB device address\000"
  34      69677572 
  34      65206F72 
  34      20717565 
  34      72792074 
  35 0033 00       		.align	2
  36              	.LC2:
  37 0034 6175746F 		.ascii	"auto\000"
  37      00
  38 0039 000000   		.align	2
  39              	.LC3:
  40 003c 436F6E66 		.ascii	"Configure automatic read after write\000"
  40      69677572 
  40      65206175 
  40      746F6D61 
  40      74696320 
  41 0061 000000   		.align	2
  42              	.LC4:
  43 0064 636C7200 		.ascii	"clr\000"
  44              		.align	2
  45              	.LC5:
  46 0068 53656E64 		.ascii	"Send a selected device clear (SDC) message\000"
  46      20612073 
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 2


  46      656C6563 
  46      74656420 
  46      64657669 
  47 0093 00       		.align	2
  48              	.LC6:
  49 0094 656F6900 		.ascii	"eoi\000"
  50              		.align	2
  51              	.LC7:
  52 0098 41737365 		.ascii	"Assertion of EOI line with the last transmitted cha"
  52      7274696F 
  52      6E206F66 
  52      20454F49 
  52      206C696E 
  53 00cb 72616374 		.ascii	"racter\000"
  53      657200
  54 00d2 0000     		.align	2
  55              	.LC8:
  56 00d4 656F7300 		.ascii	"eos\000"
  57              		.align	2
  58              	.LC9:
  59 00d8 41707065 		.ascii	"Append specific terminator to GPIB output\000"
  59      6E642073 
  59      70656369 
  59      66696320 
  59      7465726D 
  60 0102 0000     		.align	2
  61              	.LC10:
  62 0104 656F745F 		.ascii	"eot_char\000"
  62      63686172 
  62      00
  63 010d 000000   		.align	2
  64              	.LC11:
  65 0110 43686172 		.ascii	"Character to add for EOI if eot_enable\000"
  65      61637465 
  65      7220746F 
  65      20616464 
  65      20666F72 
  66 0137 00       		.align	2
  67              	.LC12:
  68 0138 656F745F 		.ascii	"eot_enable\000"
  68      656E6162 
  68      6C6500
  69 0143 00       		.align	2
  70              	.LC13:
  71 0144 41707065 		.ascii	"Append eot_char when EOI detected\000"
  71      6E642065 
  71      6F745F63 
  71      68617220 
  71      7768656E 
  72 0166 0000     		.align	2
  73              	.LC14:
  74 0168 68656C70 		.ascii	"help\000"
  74      00
  75 016d 000000   		.align	2
  76              	.LC15:
  77 0170 44697370 		.ascii	"Display command list\000"
  77      6C617920 
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 3


  77      636F6D6D 
  77      616E6420 
  77      6C697374 
  78 0185 000000   		.align	2
  79              	.LC16:
  80 0188 69666300 		.ascii	"ifc\000"
  81              		.align	2
  82              	.LC17:
  83 018c 53656E64 		.ascii	"Send an interface clear (IFC) message\000"
  83      20616E20 
  83      696E7465 
  83      72666163 
  83      6520636C 
  84 01b2 0000     		.align	2
  85              	.LC18:
  86 01b4 696E7465 		.ascii	"interact\000"
  86      72616374 
  86      00
  87 01bd 000000   		.align	2
  88              	.LC19:
  89 01c0 55736520 		.ascii	"Use interactive input mode\000"
  89      696E7465 
  89      72616374 
  89      69766520 
  89      696E7075 
  90 01db 00       		.align	2
  91              	.LC20:
  92 01dc 6C6C6F00 		.ascii	"llo\000"
  93              		.align	2
  94              	.LC21:
  95 01e0 53656E64 		.ascii	"Send a local lock out (LLO) message\000"
  95      2061206C 
  95      6F63616C 
  95      206C6F63 
  95      6B206F75 
  96              		.align	2
  97              	.LC22:
  98 0204 6C6F6300 		.ascii	"loc\000"
  99              		.align	2
 100              	.LC23:
 101 0208 53656E64 		.ascii	"Send a go to local (GTL) message\000"
 101      20612067 
 101      6F20746F 
 101      206C6F63 
 101      616C2028 
 102 0229 000000   		.align	2
 103              	.LC24:
 104 022c 72656164 		.ascii	"read\000"
 104      00
 105 0231 000000   		.align	2
 106              	.LC25:
 107 0234 52656164 		.ascii	"Read from the device\000"
 107      2066726F 
 107      6D207468 
 107      65206465 
 107      76696365 
 108 0249 000000   		.align	2
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 4


 109              	.LC26:
 110 024c 72656164 		.ascii	"read_tmo_ms\000"
 110      5F746D6F 
 110      5F6D7300 
 111              		.align	2
 112              	.LC27:
 113 0258 52656164 		.ascii	"Read timeout value in ms\000"
 113      2074696D 
 113      656F7574 
 113      2076616C 
 113      75652069 
 114 0271 000000   		.align	2
 115              	.LC28:
 116 0274 76657200 		.ascii	"ver\000"
 117              		.align	2
 118              	.LC29:
 119 0278 52657475 		.ascii	"Return the version of the yaugi firmware\000"
 119      726E2074 
 119      68652076 
 119      65727369 
 119      6F6E206F 
 120 02a1 000000   		.align	2
 121              	.LC30:
 122 02a4 636F6E66 		.ascii	"config\000"
 122      696700
 123 02ab 00       		.align	2
 124              	.LC31:
 125 02ac 53686F77 		.ascii	"Show current configuration settings\000"
 125      20637572 
 125      72656E74 
 125      20636F6E 
 125      66696775 
 126              		.align	2
 127              	.LC32:
 128 02d0 787800   		.ascii	"xx\000"
 129 02d3 00       		.align	2
 130              	.LC33:
 131 02d4 52656164 		.ascii	"Read all pins\000"
 131      20616C6C 
 131      2070696E 
 131      7300
 132 02e2 0000     		.align	2
 133              		.type	commands, %object
 134              		.size	commands, 576
 135              	commands:
 136 02e4 00000000 		.word	.LC0
 137 02e8 00000000 		.word	cmd_uint
 138 02ec 06000000 		.word	settings+6
 139 02f0 0000     		.short	0
 140 02f2 1E00     		.short	30
 141 02f4 08000000 		.word	.LC1
 142 02f8 10000000 		.word	__compound_literal.0
 143 02fc 00000000 		.word	0
 144 0300 00000000 		.word	0
 145 0304 34000000 		.word	.LC2
 146 0308 00000000 		.word	cmd_uint
 147 030c 08000000 		.word	settings+8
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 5


 148 0310 0000     		.short	0
 149 0312 0200     		.short	2
 150 0314 3C000000 		.word	.LC3
 151 0318 1C000000 		.word	__compound_literal.1
 152 031c 00000000 		.word	auto_means
 153 0320 00000000 		.word	0
 154 0324 64000000 		.word	.LC4
 155 0328 00000000 		.word	cmd_noargs
 156 032c 00000000 		.word	0
 157 0330 0000     		.short	0
 158 0332 0000     		.short	0
 159 0334 68000000 		.word	.LC5
 160 0338 00000000 		.word	no_usage_args
 161 033c 00000000 		.word	0
 162 0340 00000000 		.word	helper_clr
 163 0344 94000000 		.word	.LC6
 164 0348 00000000 		.word	cmd_uint
 165 034c 08000000 		.word	settings+8
 166 0350 0000     		.short	0
 167 0352 0100     		.short	1
 168 0354 98000000 		.word	.LC7
 169 0358 00000000 		.word	enable_disable_usage
 170 035c 00000000 		.word	enable_disable_means
 171 0360 00000000 		.word	0
 172 0364 D4000000 		.word	.LC8
 173 0368 00000000 		.word	cmd_uint
 174 036c 0C000000 		.word	settings+12
 175 0370 0000     		.short	0
 176 0372 0300     		.short	3
 177 0374 D8000000 		.word	.LC9
 178 0378 24000000 		.word	__compound_literal.2
 179 037c 00000000 		.word	eos_means
 180 0380 00000000 		.word	0
 181 0384 04010000 		.word	.LC10
 182 0388 00000000 		.word	cmd_uint
 183 038c 0E000000 		.word	settings+14
 184 0390 0000     		.short	0
 185 0392 FF00     		.short	255
 186 0394 10010000 		.word	.LC11
 187 0398 2C000000 		.word	__compound_literal.3
 188 039c 00000000 		.word	0
 189 03a0 00000000 		.word	0
 190 03a4 38010000 		.word	.LC12
 191 03a8 00000000 		.word	cmd_uint
 192 03ac 10000000 		.word	settings+16
 193 03b0 0000     		.short	0
 194 03b2 0100     		.short	1
 195 03b4 44010000 		.word	.LC13
 196 03b8 00000000 		.word	enable_disable_usage
 197 03bc 00000000 		.word	enable_disable_means
 198 03c0 00000000 		.word	0
 199 03c4 68010000 		.word	.LC14
 200 03c8 00000000 		.word	cmd_help
 201 03cc 00000000 		.word	0
 202 03d0 0000     		.short	0
 203 03d2 0000     		.short	0
 204 03d4 70010000 		.word	.LC15
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 6


 205 03d8 38000000 		.word	__compound_literal.4
 206 03dc 00000000 		.word	0
 207 03e0 00000000 		.word	0
 208 03e4 88010000 		.word	.LC16
 209 03e8 00000000 		.word	cmd_noargs
 210 03ec 00000000 		.word	0
 211 03f0 0000     		.short	0
 212 03f2 0000     		.short	0
 213 03f4 8C010000 		.word	.LC17
 214 03f8 00000000 		.word	no_usage_args
 215 03fc 00000000 		.word	0
 216 0400 00000000 		.word	helper_ifc
 217 0404 B4010000 		.word	.LC18
 218 0408 00000000 		.word	cmd_uint
 219 040c 14000000 		.word	settings+20
 220 0410 0000     		.short	0
 221 0412 0100     		.short	1
 222 0414 C0010000 		.word	.LC19
 223 0418 00000000 		.word	enable_disable_usage
 224 041c 00000000 		.word	enable_disable_means
 225 0420 00000000 		.word	0
 226 0424 DC010000 		.word	.LC20
 227 0428 00000000 		.word	cmd_noargs
 228 042c 00000000 		.word	0
 229 0430 0000     		.short	0
 230 0432 0000     		.short	0
 231 0434 E0010000 		.word	.LC21
 232 0438 00000000 		.word	no_usage_args
 233 043c 00000000 		.word	0
 234 0440 00000000 		.word	helper_llo
 235 0444 04020000 		.word	.LC22
 236 0448 00000000 		.word	cmd_noargs
 237 044c 00000000 		.word	0
 238 0450 0000     		.short	0
 239 0452 0000     		.short	0
 240 0454 08020000 		.word	.LC23
 241 0458 00000000 		.word	no_usage_args
 242 045c 00000000 		.word	0
 243 0460 00000000 		.word	helper_loc
 244 0464 2C020000 		.word	.LC24
 245 0468 00000000 		.word	cmd_read
 246 046c 00000000 		.word	0
 247 0470 0000     		.short	0
 248 0472 0000     		.short	0
 249 0474 34020000 		.word	.LC25
 250 0478 40000000 		.word	__compound_literal.5
 251 047c 00000000 		.word	0
 252 0480 00000000 		.word	0
 253 0484 4C020000 		.word	.LC26
 254 0488 00000000 		.word	cmd_uint
 255 048c 12000000 		.word	settings+18
 256 0490 0100     		.short	1
 257 0492 B80B     		.short	3000
 258 0494 58020000 		.word	.LC27
 259 0498 4C000000 		.word	__compound_literal.6
 260 049c 00000000 		.word	0
 261 04a0 00000000 		.word	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 7


 262 04a4 74020000 		.word	.LC28
 263 04a8 00000000 		.word	cmd_noargs
 264 04ac 00000000 		.word	0
 265 04b0 0000     		.short	0
 266 04b2 0000     		.short	0
 267 04b4 78020000 		.word	.LC29
 268 04b8 00000000 		.word	no_usage_args
 269 04bc 00000000 		.word	0
 270 04c0 00000000 		.word	helper_version
 271 04c4 A4020000 		.word	.LC30
 272 04c8 00000000 		.word	cmd_config
 273 04cc 00000000 		.word	0
 274 04d0 0000     		.short	0
 275 04d2 0000     		.short	0
 276 04d4 AC020000 		.word	.LC31
 277 04d8 00000000 		.word	no_usage_args
 278 04dc 00000000 		.word	0
 279 04e0 00000000 		.word	0
 280 04e4 D0020000 		.word	.LC32
 281 04e8 00000000 		.word	cmd_noargs
 282 04ec 00000000 		.word	0
 283 04f0 0000     		.short	0
 284 04f2 0000     		.short	0
 285 04f4 D4020000 		.word	.LC33
 286 04f8 00000000 		.word	no_usage_args
 287 04fc 00000000 		.word	0
 288 0500 00000000 		.word	helper_gpiball
 289 0504 00000000 		.word	0
 290 0508 00000000 		.word	0
 291 050c 00000000 		.word	0
 292 0510 0000     		.short	0
 293 0512 0000     		.short	0
 294 0514 00000000 		.word	0
 295 0518 00000000 		.word	no_usage_args
 296 051c 00000000 		.word	0
 297 0520 00000000 		.word	0
 298              		.align	2
 299              	.LC35:
 300 0524 200900   		.ascii	" \011\000"
 301 0527 00       		.align	2
 302              	.LC38:
 303 0528 3C657272 		.ascii	"<error: too many tokens>\015\012\000"
 303      6F723A20 
 303      746F6F20 
 303      6D616E79 
 303      20746F6B 
 304              		.section	.text.tokenise,"ax",%progbits
 305              		.align	2
 306              		.global	tokenise
 307              		.code	16
 308              		.thumb_func
 309              		.type	tokenise, %function
 310              	tokenise:
 311              	.LFB35:
 312              		.file 1 "command.c"
   1:command.c     **** /****
   2:command.c     ****  * YAUGI -- Yet Another USB GPIB Interface
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 8


   3:command.c     ****  * 
   4:command.c     ****  * Lee Essen, 2019
   5:command.c     ****  *
   6:command.c     ****  * This work is licensed under a Creative Commons 
   7:command.c     ****  * Attribution-NonCommercial-ShareAlike 4.0 International License.
   8:command.c     ****  *
   9:command.c     ****  */
  10:command.c     **** 
  11:command.c     **** 
  12:command.c     **** #include "command.h"
  13:command.c     **** #include "serial.h"
  14:command.c     **** #include "settings.h"
  15:command.c     **** #include "gpib.h"
  16:command.c     **** #include "utils.h"
  17:command.c     **** #include <stdio.h>
  18:command.c     **** 
  19:command.c     **** #define MAJOR_VERSION 1
  20:command.c     **** #define MINOR_VERSION 2
  21:command.c     **** 
  22:command.c     **** 
  23:command.c     **** #define MAX_TOKS 20
  24:command.c     **** 
  25:command.c     **** char    *toks[MAX_TOKS];
  26:command.c     **** int     tok_count = 0;
  27:command.c     **** 
  28:command.c     **** 
  29:command.c     **** 
  30:command.c     **** 
  31:command.c     **** /**
  32:command.c     ****  * A set or view value of uint16_t
  33:command.c     ****  */
  34:command.c     **** struct uint_based {
  35:command.c     ****     int         min;
  36:command.c     ****     int         max;
  37:command.c     ****     uint16_t    *set;
  38:command.c     **** };
  39:command.c     **** 
  40:command.c     **** /**
  41:command.c     ****  * A straight command that doesn't take any arguments
  42:command.c     ****  */
  43:command.c     **** struct no_args {
  44:command.c     **** };
  45:command.c     **** 
  46:command.c     **** /**
  47:command.c     ****  * If we have specific itemised options we can display the help and status
  48:command.c     ****  * information
  49:command.c     ****  */
  50:command.c     **** struct item_meaning {
  51:command.c     ****     int     value;
  52:command.c     ****     char    *meaning;
  53:command.c     **** };
  54:command.c     **** 
  55:command.c     **** struct cmd {
  56:command.c     ****     char                        *name;
  57:command.c     ****     int                         (*func)(char *argv[], int argc, const struct cmd *cmd);
  58:command.c     ****     uint16_t                    *setting;
  59:command.c     ****     uint16_t                    min;
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 9


  60:command.c     ****     uint16_t                    max;
  61:command.c     **** //
  62:command.c     **** //    union {
  63:command.c     **** //        struct uint_based       uint;
  64:command.c     **** //        struct no_args          noargs;
  65:command.c     **** //    } u;
  66:command.c     ****     const char                  *help;
  67:command.c     ****     const char                  **usage;
  68:command.c     ****     const struct item_meaning   *meanings;
  69:command.c     ****     int                         (*post_func)(char *argv[], int argc);
  70:command.c     **** };
  71:command.c     **** 
  72:command.c     **** 
  73:command.c     **** const struct cmd commands[];
  74:command.c     **** 
  75:command.c     **** /**
  76:command.c     ****  * Split an input string on whitespace, null in between tokens and populate the list
  77:command.c     ****  * (up to a max number of arguments)
  78:command.c     ****  */
  79:command.c     **** int tokenise(uint8_t *buf, int len) {
 313              		.loc 1 79 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 16
 316              		@ frame_needed = 1, uses_anonymous_args = 0
 317 0000 80B5     		push	{r7, lr}
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 7, -8
 320              		.cfi_offset 14, -4
 321 0002 84B0     		sub	sp, sp, #16
 322              		.cfi_def_cfa_offset 24
 323 0004 00AF     		add	r7, sp, #0
 324              		.cfi_def_cfa_register 7
 325 0006 7860     		str	r0, [r7, #4]
 326 0008 3960     		str	r1, [r7]
  80:command.c     ****     int i = 0;
 327              		.loc 1 80 0
 328 000a 0023     		movs	r3, #0
 329 000c FB60     		str	r3, [r7, #12]
  81:command.c     ****     
  82:command.c     ****     tok_count = 0;
 330              		.loc 1 82 0
 331 000e 2F4B     		ldr	r3, .L16
 332 0010 0022     		movs	r2, #0
 333 0012 1A60     		str	r2, [r3]
  83:command.c     ****     
  84:command.c     ****     while(i < len) {
 334              		.loc 1 84 0
 335 0014 50E0     		b	.L2
 336              	.L6:
  85:command.c     ****         
  86:command.c     ****         // First get past any leading whitespace...
  87:command.c     ****         while(i < len) {
  88:command.c     ****             if (strchr(" \t", *buf) == NULL) {
 337              		.loc 1 88 0
 338 0016 7B68     		ldr	r3, [r7, #4]
 339 0018 1B78     		ldrb	r3, [r3]
 340 001a 1A00     		movs	r2, r3
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 10


 341 001c 2C4B     		ldr	r3, .L16+4
 342 001e 1100     		movs	r1, r2
 343 0020 1800     		movs	r0, r3
 344 0022 FFF7FEFF 		bl	strchr
 345 0026 031E     		subs	r3, r0, #0
 346 0028 0AD0     		beq	.L14
  89:command.c     ****                 break;
  90:command.c     ****             }
  91:command.c     ****             i++;
 347              		.loc 1 91 0
 348 002a FB68     		ldr	r3, [r7, #12]
 349 002c 0133     		adds	r3, r3, #1
 350 002e FB60     		str	r3, [r7, #12]
  92:command.c     ****             buf++;
 351              		.loc 1 92 0
 352 0030 7B68     		ldr	r3, [r7, #4]
 353 0032 0133     		adds	r3, r3, #1
 354 0034 7B60     		str	r3, [r7, #4]
 355              	.L3:
  87:command.c     ****             if (strchr(" \t", *buf) == NULL) {
 356              		.loc 1 87 0
 357 0036 FA68     		ldr	r2, [r7, #12]
 358 0038 3B68     		ldr	r3, [r7]
 359 003a 9A42     		cmp	r2, r3
 360 003c EBDB     		blt	.L6
 361 003e 00E0     		b	.L5
 362              	.L14:
  89:command.c     ****                 break;
 363              		.loc 1 89 0
 364 0040 C046     		nop
 365              	.L5:
  93:command.c     ****         }
  94:command.c     ****         // Could be the end of the string?
  95:command.c     ****         if (i == len) {
 366              		.loc 1 95 0
 367 0042 FA68     		ldr	r2, [r7, #12]
 368 0044 3B68     		ldr	r3, [r7]
 369 0046 9A42     		cmp	r2, r3
 370 0048 02D1     		bne	.L7
  96:command.c     ****             return tok_count;
 371              		.loc 1 96 0
 372 004a 204B     		ldr	r3, .L16
 373 004c 1B68     		ldr	r3, [r3]
 374 004e 39E0     		b	.L8
 375              	.L7:
  97:command.c     ****         }
  98:command.c     ****         
  99:command.c     ****         // Setup the token
 100:command.c     ****         toks[tok_count] = (char *)buf;
 376              		.loc 1 100 0
 377 0050 1E4B     		ldr	r3, .L16
 378 0052 1A68     		ldr	r2, [r3]
 379 0054 1F4B     		ldr	r3, .L16+8
 380 0056 9200     		lsls	r2, r2, #2
 381 0058 7968     		ldr	r1, [r7, #4]
 382 005a D150     		str	r1, [r2, r3]
 101:command.c     ****         
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 11


 102:command.c     ****         // Now get past any non-whitespace...
 103:command.c     ****         while (i < len) {
 383              		.loc 1 103 0
 384 005c 0FE0     		b	.L9
 385              	.L12:
 104:command.c     ****             if (strchr(" \t", *buf) != NULL) {
 386              		.loc 1 104 0
 387 005e 7B68     		ldr	r3, [r7, #4]
 388 0060 1B78     		ldrb	r3, [r3]
 389 0062 1A00     		movs	r2, r3
 390 0064 1A4B     		ldr	r3, .L16+4
 391 0066 1100     		movs	r1, r2
 392 0068 1800     		movs	r0, r3
 393 006a FFF7FEFF 		bl	strchr
 394 006e 031E     		subs	r3, r0, #0
 395 0070 0AD1     		bne	.L15
 105:command.c     ****                 break;
 106:command.c     ****             }
 107:command.c     ****             i++;
 396              		.loc 1 107 0
 397 0072 FB68     		ldr	r3, [r7, #12]
 398 0074 0133     		adds	r3, r3, #1
 399 0076 FB60     		str	r3, [r7, #12]
 108:command.c     ****             buf++;
 400              		.loc 1 108 0
 401 0078 7B68     		ldr	r3, [r7, #4]
 402 007a 0133     		adds	r3, r3, #1
 403 007c 7B60     		str	r3, [r7, #4]
 404              	.L9:
 103:command.c     ****             if (strchr(" \t", *buf) != NULL) {
 405              		.loc 1 103 0
 406 007e FA68     		ldr	r2, [r7, #12]
 407 0080 3B68     		ldr	r3, [r7]
 408 0082 9A42     		cmp	r2, r3
 409 0084 EBDB     		blt	.L12
 410 0086 00E0     		b	.L11
 411              	.L15:
 105:command.c     ****                 break;
 412              		.loc 1 105 0
 413 0088 C046     		nop
 414              	.L11:
 109:command.c     ****         }
 110:command.c     ****         // Null terminate the token
 111:command.c     ****         *buf++ = 0;
 415              		.loc 1 111 0
 416 008a 7B68     		ldr	r3, [r7, #4]
 417 008c 5A1C     		adds	r2, r3, #1
 418 008e 7A60     		str	r2, [r7, #4]
 419 0090 0022     		movs	r2, #0
 420 0092 1A70     		strb	r2, [r3]
 112:command.c     ****         i++;
 421              		.loc 1 112 0
 422 0094 FB68     		ldr	r3, [r7, #12]
 423 0096 0133     		adds	r3, r3, #1
 424 0098 FB60     		str	r3, [r7, #12]
 113:command.c     ****         tok_count++;
 425              		.loc 1 113 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 12


 426 009a 0C4B     		ldr	r3, .L16
 427 009c 1B68     		ldr	r3, [r3]
 428 009e 5A1C     		adds	r2, r3, #1
 429 00a0 0A4B     		ldr	r3, .L16
 430 00a2 1A60     		str	r2, [r3]
 114:command.c     ****         
 115:command.c     ****         if (tok_count == MAX_TOKS) {
 431              		.loc 1 115 0
 432 00a4 094B     		ldr	r3, .L16
 433 00a6 1B68     		ldr	r3, [r3]
 434 00a8 142B     		cmp	r3, #20
 435 00aa 05D1     		bne	.L2
 116:command.c     ****             serial_printf("<error: too many tokens>\r\n");
 436              		.loc 1 116 0
 437 00ac 0A4B     		ldr	r3, .L16+12
 438 00ae 1800     		movs	r0, r3
 439 00b0 FFF7FEFF 		bl	serial_printf
 117:command.c     ****             return 0;
 440              		.loc 1 117 0
 441 00b4 0023     		movs	r3, #0
 442 00b6 05E0     		b	.L8
 443              	.L2:
  84:command.c     ****         
 444              		.loc 1 84 0
 445 00b8 FA68     		ldr	r2, [r7, #12]
 446 00ba 3B68     		ldr	r3, [r7]
 447 00bc 9A42     		cmp	r2, r3
 448 00be BADB     		blt	.L3
 118:command.c     ****         }
 119:command.c     ****     }
 120:command.c     ****     return tok_count;
 449              		.loc 1 120 0
 450 00c0 024B     		ldr	r3, .L16
 451 00c2 1B68     		ldr	r3, [r3]
 452              	.L8:
 121:command.c     **** }
 453              		.loc 1 121 0
 454 00c4 1800     		movs	r0, r3
 455 00c6 BD46     		mov	sp, r7
 456 00c8 04B0     		add	sp, sp, #16
 457              		@ sp needed
 458 00ca 80BD     		pop	{r7, pc}
 459              	.L17:
 460              		.align	2
 461              	.L16:
 462 00cc 00000000 		.word	tok_count
 463 00d0 24050000 		.word	.LC35
 464 00d4 00000000 		.word	toks
 465 00d8 28050000 		.word	.LC38
 466              		.cfi_endproc
 467              	.LFE35:
 468              		.size	tokenise, .-tokenise
 469              		.section	.rodata
 470 0543 00       		.align	2
 471              	.LC40:
 472 0544 30313233 		.ascii	"0123456789\000"
 472      34353637 
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 13


 472      383900
 473              		.section	.text.is_int,"ax",%progbits
 474              		.align	2
 475              		.global	is_int
 476              		.code	16
 477              		.thumb_func
 478              		.type	is_int, %function
 479              	is_int:
 480              	.LFB36:
 122:command.c     **** 
 123:command.c     **** /**
 124:command.c     ****  * is_int() and to_int()
 125:command.c     ****  */
 126:command.c     **** int is_int(char *v) {
 481              		.loc 1 126 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 8
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485 0000 80B5     		push	{r7, lr}
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 7, -8
 488              		.cfi_offset 14, -4
 489 0002 82B0     		sub	sp, sp, #8
 490              		.cfi_def_cfa_offset 16
 491 0004 00AF     		add	r7, sp, #0
 492              		.cfi_def_cfa_register 7
 493 0006 7860     		str	r0, [r7, #4]
 127:command.c     ****     while(*v) {
 494              		.loc 1 127 0
 495 0008 0EE0     		b	.L19
 496              	.L22:
 128:command.c     ****         if (strchr("0123456789", *v) == NULL) {
 497              		.loc 1 128 0
 498 000a 7B68     		ldr	r3, [r7, #4]
 499 000c 1B78     		ldrb	r3, [r3]
 500 000e 1A00     		movs	r2, r3
 501 0010 0A4B     		ldr	r3, .L23
 502 0012 1100     		movs	r1, r2
 503 0014 1800     		movs	r0, r3
 504 0016 FFF7FEFF 		bl	strchr
 505 001a 031E     		subs	r3, r0, #0
 506 001c 01D1     		bne	.L20
 129:command.c     ****             return 0;
 507              		.loc 1 129 0
 508 001e 0023     		movs	r3, #0
 509 0020 07E0     		b	.L21
 510              	.L20:
 130:command.c     ****         }
 131:command.c     ****         v++;
 511              		.loc 1 131 0
 512 0022 7B68     		ldr	r3, [r7, #4]
 513 0024 0133     		adds	r3, r3, #1
 514 0026 7B60     		str	r3, [r7, #4]
 515              	.L19:
 127:command.c     ****         if (strchr("0123456789", *v) == NULL) {
 516              		.loc 1 127 0
 517 0028 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 14


 518 002a 1B78     		ldrb	r3, [r3]
 519 002c 002B     		cmp	r3, #0
 520 002e ECD1     		bne	.L22
 132:command.c     ****     }
 133:command.c     ****     return 1;
 521              		.loc 1 133 0
 522 0030 0123     		movs	r3, #1
 523              	.L21:
 134:command.c     **** }
 524              		.loc 1 134 0
 525 0032 1800     		movs	r0, r3
 526 0034 BD46     		mov	sp, r7
 527 0036 02B0     		add	sp, sp, #8
 528              		@ sp needed
 529 0038 80BD     		pop	{r7, pc}
 530              	.L24:
 531 003a C046     		.align	2
 532              	.L23:
 533 003c 44050000 		.word	.LC40
 534              		.cfi_endproc
 535              	.LFE36:
 536              		.size	is_int, .-is_int
 537              		.section	.text.to_int,"ax",%progbits
 538              		.align	2
 539              		.global	to_int
 540              		.code	16
 541              		.thumb_func
 542              		.type	to_int, %function
 543              	to_int:
 544              	.LFB37:
 135:command.c     **** 
 136:command.c     **** int to_int(char *v) {
 545              		.loc 1 136 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 16
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 84B0     		sub	sp, sp, #16
 554              		.cfi_def_cfa_offset 24
 555 0004 00AF     		add	r7, sp, #0
 556              		.cfi_def_cfa_register 7
 557 0006 7860     		str	r0, [r7, #4]
 137:command.c     ****     int i = 0;
 558              		.loc 1 137 0
 559 0008 0023     		movs	r3, #0
 560 000a FB60     		str	r3, [r7, #12]
 138:command.c     ****     while(*v) {
 561              		.loc 1 138 0
 562 000c 0DE0     		b	.L26
 563              	.L27:
 139:command.c     ****         i *= 10;
 564              		.loc 1 139 0
 565 000e FA68     		ldr	r2, [r7, #12]
 566 0010 1300     		movs	r3, r2
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 15


 567 0012 9B00     		lsls	r3, r3, #2
 568 0014 9B18     		adds	r3, r3, r2
 569 0016 5B00     		lsls	r3, r3, #1
 570 0018 FB60     		str	r3, [r7, #12]
 140:command.c     ****         i += (*v++ - '0');
 571              		.loc 1 140 0
 572 001a 7B68     		ldr	r3, [r7, #4]
 573 001c 5A1C     		adds	r2, r3, #1
 574 001e 7A60     		str	r2, [r7, #4]
 575 0020 1B78     		ldrb	r3, [r3]
 576 0022 303B     		subs	r3, r3, #48
 577 0024 FA68     		ldr	r2, [r7, #12]
 578 0026 D318     		adds	r3, r2, r3
 579 0028 FB60     		str	r3, [r7, #12]
 580              	.L26:
 138:command.c     ****     while(*v) {
 581              		.loc 1 138 0
 582 002a 7B68     		ldr	r3, [r7, #4]
 583 002c 1B78     		ldrb	r3, [r3]
 584 002e 002B     		cmp	r3, #0
 585 0030 EDD1     		bne	.L27
 141:command.c     ****     }
 142:command.c     ****     return i;
 586              		.loc 1 142 0
 587 0032 FB68     		ldr	r3, [r7, #12]
 143:command.c     **** }
 588              		.loc 1 143 0
 589 0034 1800     		movs	r0, r3
 590 0036 BD46     		mov	sp, r7
 591 0038 04B0     		add	sp, sp, #16
 592              		@ sp needed
 593 003a 80BD     		pop	{r7, pc}
 594              		.cfi_endproc
 595              	.LFE37:
 596              		.size	to_int, .-to_int
 597              		.section	.rodata
 598 054f 00       		.align	2
 599              	.LC44:
 600 0550 3C657272 		.ascii	"<error: unknown ++ command>\015\012\000"
 600      6F723A20 
 600      756E6B6E 
 600      6F776E20 
 600      2B2B2063 
 601              		.section	.text.cmd_process,"ax",%progbits
 602              		.align	2
 603              		.global	cmd_process
 604              		.code	16
 605              		.thumb_func
 606              		.type	cmd_process, %function
 607              	cmd_process:
 608              	.LFB38:
 144:command.c     **** 
 145:command.c     **** /**
 146:command.c     ****  * Take the command line and call the appropriate command function, we will be
 147:command.c     ****  * called only when the first two characters are ++, so we can skip those here
 148:command.c     ****  */
 149:command.c     **** void cmd_process(uint8_t *buf, int len) {
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 16


 609              		.loc 1 149 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 16
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613 0000 80B5     		push	{r7, lr}
 614              		.cfi_def_cfa_offset 8
 615              		.cfi_offset 7, -8
 616              		.cfi_offset 14, -4
 617 0002 84B0     		sub	sp, sp, #16
 618              		.cfi_def_cfa_offset 24
 619 0004 00AF     		add	r7, sp, #0
 620              		.cfi_def_cfa_register 7
 621 0006 7860     		str	r0, [r7, #4]
 622 0008 3960     		str	r1, [r7]
 150:command.c     ****     int argc = tokenise(buf, len);
 623              		.loc 1 150 0
 624 000a 3A68     		ldr	r2, [r7]
 625 000c 7B68     		ldr	r3, [r7, #4]
 626 000e 1100     		movs	r1, r2
 627 0010 1800     		movs	r0, r3
 628 0012 FFF7FEFF 		bl	tokenise
 629 0016 0300     		movs	r3, r0
 630 0018 BB60     		str	r3, [r7, #8]
 151:command.c     **** 
 152:command.c     ****     // We will always have the command a minimum, so return if 0
 153:command.c     ****     if (argc == 0) {
 631              		.loc 1 153 0
 632 001a BB68     		ldr	r3, [r7, #8]
 633 001c 002B     		cmp	r3, #0
 634 001e 29D0     		beq	.L35
 154:command.c     ****         return;
 155:command.c     ****     }
 156:command.c     ****     
 157:command.c     ****     // Find the command entry in the list...
 158:command.c     ****     int i = 0;
 635              		.loc 1 158 0
 636 0020 0023     		movs	r3, #0
 637 0022 FB60     		str	r3, [r7, #12]
 159:command.c     ****     while (commands[i].name != NULL) {
 638              		.loc 1 159 0
 639 0024 1BE0     		b	.L32
 640              	.L34:
 160:command.c     ****         if (strcmp(toks[0], commands[i].name) == 0) {
 641              		.loc 1 160 0
 642 0026 154B     		ldr	r3, .L36
 643 0028 1868     		ldr	r0, [r3]
 644 002a 154B     		ldr	r3, .L36+4
 645 002c FA68     		ldr	r2, [r7, #12]
 646 002e 5201     		lsls	r2, r2, #5
 647 0030 D358     		ldr	r3, [r2, r3]
 648 0032 1900     		movs	r1, r3
 649 0034 FFF7FEFF 		bl	strcmp
 650 0038 031E     		subs	r3, r0, #0
 651 003a 0DD1     		bne	.L33
 161:command.c     ****             commands[i].func(toks, argc, &commands[i]);
 652              		.loc 1 161 0
 653 003c 104A     		ldr	r2, .L36+4
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 17


 654 003e FB68     		ldr	r3, [r7, #12]
 655 0040 5B01     		lsls	r3, r3, #5
 656 0042 D318     		adds	r3, r2, r3
 657 0044 0433     		adds	r3, r3, #4
 658 0046 1B68     		ldr	r3, [r3]
 659 0048 FA68     		ldr	r2, [r7, #12]
 660 004a 5101     		lsls	r1, r2, #5
 661 004c 0C4A     		ldr	r2, .L36+4
 662 004e 8A18     		adds	r2, r1, r2
 663 0050 B968     		ldr	r1, [r7, #8]
 664 0052 0A48     		ldr	r0, .L36
 665 0054 9847     		blx	r3
 162:command.c     ****             return;
 666              		.loc 1 162 0
 667 0056 0EE0     		b	.L29
 668              	.L33:
 163:command.c     ****         }
 164:command.c     ****         i++;
 669              		.loc 1 164 0
 670 0058 FB68     		ldr	r3, [r7, #12]
 671 005a 0133     		adds	r3, r3, #1
 672 005c FB60     		str	r3, [r7, #12]
 673              	.L32:
 159:command.c     ****         if (strcmp(toks[0], commands[i].name) == 0) {
 674              		.loc 1 159 0
 675 005e 084B     		ldr	r3, .L36+4
 676 0060 FA68     		ldr	r2, [r7, #12]
 677 0062 5201     		lsls	r2, r2, #5
 678 0064 D358     		ldr	r3, [r2, r3]
 679 0066 002B     		cmp	r3, #0
 680 0068 DDD1     		bne	.L34
 165:command.c     ****     }
 166:command.c     ****     serial_printf("<error: unknown ++ command>\r\n");
 681              		.loc 1 166 0
 682 006a 064B     		ldr	r3, .L36+8
 683 006c 1800     		movs	r0, r3
 684 006e FFF7FEFF 		bl	serial_printf
 685 0072 00E0     		b	.L29
 686              	.L35:
 154:command.c     ****     }
 687              		.loc 1 154 0
 688 0074 C046     		nop
 689              	.L29:
 167:command.c     **** }
 690              		.loc 1 167 0
 691 0076 BD46     		mov	sp, r7
 692 0078 04B0     		add	sp, sp, #16
 693              		@ sp needed
 694 007a 80BD     		pop	{r7, pc}
 695              	.L37:
 696              		.align	2
 697              	.L36:
 698 007c 00000000 		.word	toks
 699 0080 00000000 		.word	commands
 700 0084 50050000 		.word	.LC44
 701              		.cfi_endproc
 702              	.LFE38:
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 18


 703              		.size	cmd_process, .-cmd_process
 704              		.section	.rodata
 705 056e 0000     		.align	2
 706              	.LC46:
 707 0570 3C757361 		.ascii	"<usage: ++%s\000"
 707      67653A20 
 707      2B2B2573 
 707      00
 708 057d 000000   		.align	2
 709              	.LC48:
 710 0580 20257300 		.ascii	" %s\000"
 711              		.align	2
 712              	.LC50:
 713 0584 3E0D0A00 		.ascii	">\015\012\000"
 714              		.align	2
 715              	.LC52:
 716 0588 25730D0A 		.ascii	"%s\015\012\000"
 716      00
 717 058d 000000   		.align	2
 718              	.LC54:
 719 0590 09256420 		.ascii	"\011%d - %s\015\012\000"
 719      2D202573 
 719      0D0A00
 720 059b 00       		.align	2
 721              	.LC56:
 722 059c 09286375 		.ascii	"\011(current setting: %d)\015\012\000"
 722      7272656E 
 722      74207365 
 722      7474696E 
 722      673A2025 
 723              		.section	.text.cmd_usage,"ax",%progbits
 724              		.align	2
 725              		.global	cmd_usage
 726              		.code	16
 727              		.thumb_func
 728              		.type	cmd_usage, %function
 729              	cmd_usage:
 730              	.LFB39:
 168:command.c     **** 
 169:command.c     **** 
 170:command.c     **** 
 171:command.c     **** void cmd_usage(char *argv[], const struct cmd *cmd) {
 731              		.loc 1 171 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 24
 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735 0000 80B5     		push	{r7, lr}
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 86B0     		sub	sp, sp, #24
 740              		.cfi_def_cfa_offset 32
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 743 0006 7860     		str	r0, [r7, #4]
 744 0008 3960     		str	r1, [r7]
 172:command.c     ****     const char **p = cmd->usage;
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 19


 745              		.loc 1 172 0
 746 000a 3B68     		ldr	r3, [r7]
 747 000c 5B69     		ldr	r3, [r3, #20]
 748 000e 7B61     		str	r3, [r7, #20]
 173:command.c     ****     serial_printf("<usage: ++%s", argv[0]);
 749              		.loc 1 173 0
 750 0010 7B68     		ldr	r3, [r7, #4]
 751 0012 1A68     		ldr	r2, [r3]
 752 0014 294B     		ldr	r3, .L46
 753 0016 1100     		movs	r1, r2
 754 0018 1800     		movs	r0, r3
 755 001a FFF7FEFF 		bl	serial_printf
 174:command.c     ****     if (**p) {
 756              		.loc 1 174 0
 757 001e 7B69     		ldr	r3, [r7, #20]
 758 0020 1B68     		ldr	r3, [r3]
 759 0022 1B78     		ldrb	r3, [r3]
 760 0024 002B     		cmp	r3, #0
 761 0026 08D0     		beq	.L39
 175:command.c     ****         serial_printf(" %s", *p++);
 762              		.loc 1 175 0
 763 0028 7B69     		ldr	r3, [r7, #20]
 764 002a 1A1D     		adds	r2, r3, #4
 765 002c 7A61     		str	r2, [r7, #20]
 766 002e 1A68     		ldr	r2, [r3]
 767 0030 234B     		ldr	r3, .L46+4
 768 0032 1100     		movs	r1, r2
 769 0034 1800     		movs	r0, r3
 770 0036 FFF7FEFF 		bl	serial_printf
 771              	.L39:
 176:command.c     ****     }
 177:command.c     ****     serial_printf(">\r\n");
 772              		.loc 1 177 0
 773 003a 224B     		ldr	r3, .L46+8
 774 003c 1800     		movs	r0, r3
 775 003e FFF7FEFF 		bl	serial_printf
 178:command.c     ****     
 179:command.c     ****     // First print any additional usage instructions...
 180:command.c     ****     while(*p) {
 776              		.loc 1 180 0
 777 0042 08E0     		b	.L40
 778              	.L41:
 181:command.c     ****         serial_printf("%s\r\n", (char *)*p++);
 779              		.loc 1 181 0
 780 0044 7B69     		ldr	r3, [r7, #20]
 781 0046 1A1D     		adds	r2, r3, #4
 782 0048 7A61     		str	r2, [r7, #20]
 783 004a 1A68     		ldr	r2, [r3]
 784 004c 1E4B     		ldr	r3, .L46+12
 785 004e 1100     		movs	r1, r2
 786 0050 1800     		movs	r0, r3
 787 0052 FFF7FEFF 		bl	serial_printf
 788              	.L40:
 180:command.c     ****         serial_printf("%s\r\n", (char *)*p++);
 789              		.loc 1 180 0
 790 0056 7B69     		ldr	r3, [r7, #20]
 791 0058 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 20


 792 005a 002B     		cmp	r3, #0
 793 005c F2D1     		bne	.L41
 182:command.c     ****     }
 183:command.c     ****     
 184:command.c     ****     // Now handle specific value meanings if they are there
 185:command.c     ****     if (cmd->meanings) {
 794              		.loc 1 185 0
 795 005e 3B68     		ldr	r3, [r7]
 796 0060 9B69     		ldr	r3, [r3, #24]
 797 0062 002B     		cmp	r3, #0
 798 0064 12D0     		beq	.L42
 799              	.LBB2:
 186:command.c     ****         const struct item_meaning *m = cmd->meanings;
 800              		.loc 1 186 0
 801 0066 3B68     		ldr	r3, [r7]
 802 0068 9B69     		ldr	r3, [r3, #24]
 803 006a 3B61     		str	r3, [r7, #16]
 187:command.c     ****         while (m->meaning != NULL) {
 804              		.loc 1 187 0
 805 006c 0AE0     		b	.L43
 806              	.L44:
 188:command.c     ****             serial_printf("\t%d - %s\r\n", m->value, m->meaning);
 807              		.loc 1 188 0
 808 006e 3B69     		ldr	r3, [r7, #16]
 809 0070 1968     		ldr	r1, [r3]
 810 0072 3B69     		ldr	r3, [r7, #16]
 811 0074 5A68     		ldr	r2, [r3, #4]
 812 0076 154B     		ldr	r3, .L46+16
 813 0078 1800     		movs	r0, r3
 814 007a FFF7FEFF 		bl	serial_printf
 189:command.c     ****             m++;
 815              		.loc 1 189 0
 816 007e 3B69     		ldr	r3, [r7, #16]
 817 0080 0833     		adds	r3, r3, #8
 818 0082 3B61     		str	r3, [r7, #16]
 819              	.L43:
 187:command.c     ****         while (m->meaning != NULL) {
 820              		.loc 1 187 0
 821 0084 3B69     		ldr	r3, [r7, #16]
 822 0086 5B68     		ldr	r3, [r3, #4]
 823 0088 002B     		cmp	r3, #0
 824 008a F0D1     		bne	.L44
 825              	.L42:
 826              	.LBE2:
 190:command.c     ****         }
 191:command.c     ****     }
 192:command.c     ****     
 193:command.c     ****     // If it's a setting then we can show the current value
 194:command.c     ****     if (cmd->setting) {
 827              		.loc 1 194 0
 828 008c 3B68     		ldr	r3, [r7]
 829 008e 9B68     		ldr	r3, [r3, #8]
 830 0090 002B     		cmp	r3, #0
 831 0092 0DD0     		beq	.L45
 832              	.LBB3:
 195:command.c     ****         uint16_t value = *cmd->setting;
 833              		.loc 1 195 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 21


 834 0094 3B68     		ldr	r3, [r7]
 835 0096 9A68     		ldr	r2, [r3, #8]
 836 0098 0E23     		movs	r3, #14
 837 009a FB18     		adds	r3, r7, r3
 838 009c 1288     		ldrh	r2, [r2]
 839 009e 1A80     		strh	r2, [r3]
 196:command.c     ****         serial_printf("\t(current setting: %d)\r\n", value);
 840              		.loc 1 196 0
 841 00a0 0E23     		movs	r3, #14
 842 00a2 FB18     		adds	r3, r7, r3
 843 00a4 1A88     		ldrh	r2, [r3]
 844 00a6 0A4B     		ldr	r3, .L46+20
 845 00a8 1100     		movs	r1, r2
 846 00aa 1800     		movs	r0, r3
 847 00ac FFF7FEFF 		bl	serial_printf
 848              	.L45:
 849              	.LBE3:
 197:command.c     ****     }
 198:command.c     ****    
 199:command.c     ****     // Send it...
 200:command.c     ****     serial_flush();
 850              		.loc 1 200 0
 851 00b0 FFF7FEFF 		bl	serial_flush
 201:command.c     **** }
 852              		.loc 1 201 0
 853 00b4 C046     		nop
 854 00b6 BD46     		mov	sp, r7
 855 00b8 06B0     		add	sp, sp, #24
 856              		@ sp needed
 857 00ba 80BD     		pop	{r7, pc}
 858              	.L47:
 859              		.align	2
 860              	.L46:
 861 00bc 70050000 		.word	.LC46
 862 00c0 80050000 		.word	.LC48
 863 00c4 84050000 		.word	.LC50
 864 00c8 88050000 		.word	.LC52
 865 00cc 90050000 		.word	.LC54
 866 00d0 9C050000 		.word	.LC56
 867              		.cfi_endproc
 868              	.LFE39:
 869              		.size	cmd_usage, .-cmd_usage
 870              		.section	.rodata
 871 05b5 000000   		.align	2
 872              	.LC58:
 873 05b8 25640D0A 		.ascii	"%d\015\012\000"
 873      00
 874              		.section	.text.cmd_uint,"ax",%progbits
 875              		.align	2
 876              		.global	cmd_uint
 877              		.code	16
 878              		.thumb_func
 879              		.type	cmd_uint, %function
 880              	cmd_uint:
 881              	.LFB40:
 202:command.c     **** 
 203:command.c     **** /**
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 22


 204:command.c     ****  * Process a command that sets/gets an integer argument
 205:command.c     ****  */
 206:command.c     **** int cmd_uint(char *argv[], int argc, const struct cmd *cmd) {
 882              		.loc 1 206 0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 24
 885              		@ frame_needed = 1, uses_anonymous_args = 0
 886 0000 80B5     		push	{r7, lr}
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 7, -8
 889              		.cfi_offset 14, -4
 890 0002 86B0     		sub	sp, sp, #24
 891              		.cfi_def_cfa_offset 32
 892 0004 00AF     		add	r7, sp, #0
 893              		.cfi_def_cfa_register 7
 894 0006 F860     		str	r0, [r7, #12]
 895 0008 B960     		str	r1, [r7, #8]
 896 000a 7A60     		str	r2, [r7, #4]
 207:command.c     ****     if (argc == 1) {
 897              		.loc 1 207 0
 898 000c BB68     		ldr	r3, [r7, #8]
 899 000e 012B     		cmp	r3, #1
 900 0010 0AD1     		bne	.L49
 208:command.c     ****         // Get the value...
 209:command.c     ****         serial_printf("%d\r\n", *(cmd->setting));
 901              		.loc 1 209 0
 902 0012 7B68     		ldr	r3, [r7, #4]
 903 0014 9B68     		ldr	r3, [r3, #8]
 904 0016 1B88     		ldrh	r3, [r3]
 905 0018 1A00     		movs	r2, r3
 906 001a 264B     		ldr	r3, .L56
 907 001c 1100     		movs	r1, r2
 908 001e 1800     		movs	r0, r3
 909 0020 FFF7FEFF 		bl	serial_printf
 210:command.c     ****         return 0;
 910              		.loc 1 210 0
 911 0024 0023     		movs	r3, #0
 912 0026 40E0     		b	.L50
 913              	.L49:
 211:command.c     ****     }
 212:command.c     ****     if (argc != 2 || !is_int(argv[1])) {
 914              		.loc 1 212 0
 915 0028 BB68     		ldr	r3, [r7, #8]
 916 002a 022B     		cmp	r3, #2
 917 002c 07D1     		bne	.L51
 918              		.loc 1 212 0 is_stmt 0 discriminator 1
 919 002e FB68     		ldr	r3, [r7, #12]
 920 0030 0433     		adds	r3, r3, #4
 921 0032 1B68     		ldr	r3, [r3]
 922 0034 1800     		movs	r0, r3
 923 0036 FFF7FEFF 		bl	is_int
 924 003a 031E     		subs	r3, r0, #0
 925 003c 07D1     		bne	.L52
 926              	.L51:
 213:command.c     ****         cmd_usage(argv, cmd);
 927              		.loc 1 213 0 is_stmt 1
 928 003e 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 23


 929 0040 FB68     		ldr	r3, [r7, #12]
 930 0042 1100     		movs	r1, r2
 931 0044 1800     		movs	r0, r3
 932 0046 FFF7FEFF 		bl	cmd_usage
 214:command.c     ****         return 1;
 933              		.loc 1 214 0
 934 004a 0123     		movs	r3, #1
 935 004c 2DE0     		b	.L50
 936              	.L52:
 215:command.c     ****     }
 216:command.c     ****     int byte = to_int(argv[1]);
 937              		.loc 1 216 0
 938 004e FB68     		ldr	r3, [r7, #12]
 939 0050 0433     		adds	r3, r3, #4
 940 0052 1B68     		ldr	r3, [r3]
 941 0054 1800     		movs	r0, r3
 942 0056 FFF7FEFF 		bl	to_int
 943 005a 0300     		movs	r3, r0
 944 005c 7B61     		str	r3, [r7, #20]
 217:command.c     ****     if (byte < cmd->min || byte > cmd->max) {
 945              		.loc 1 217 0
 946 005e 7B68     		ldr	r3, [r7, #4]
 947 0060 9B89     		ldrh	r3, [r3, #12]
 948 0062 1A00     		movs	r2, r3
 949 0064 7B69     		ldr	r3, [r7, #20]
 950 0066 9A42     		cmp	r2, r3
 951 0068 05DC     		bgt	.L53
 952              		.loc 1 217 0 is_stmt 0 discriminator 1
 953 006a 7B68     		ldr	r3, [r7, #4]
 954 006c DB89     		ldrh	r3, [r3, #14]
 955 006e 1A00     		movs	r2, r3
 956 0070 7B69     		ldr	r3, [r7, #20]
 957 0072 9A42     		cmp	r2, r3
 958 0074 07DA     		bge	.L54
 959              	.L53:
 218:command.c     ****         cmd_usage(argv, cmd);
 960              		.loc 1 218 0 is_stmt 1
 961 0076 7A68     		ldr	r2, [r7, #4]
 962 0078 FB68     		ldr	r3, [r7, #12]
 963 007a 1100     		movs	r1, r2
 964 007c 1800     		movs	r0, r3
 965 007e FFF7FEFF 		bl	cmd_usage
 219:command.c     ****         return 1;
 966              		.loc 1 219 0
 967 0082 0123     		movs	r3, #1
 968 0084 11E0     		b	.L50
 969              	.L54:
 220:command.c     ****     }
 221:command.c     ****     
 222:command.c     ****     *(cmd->setting) = (uint16_t)byte;
 970              		.loc 1 222 0
 971 0086 7B68     		ldr	r3, [r7, #4]
 972 0088 9B68     		ldr	r3, [r3, #8]
 973 008a 7A69     		ldr	r2, [r7, #20]
 974 008c 92B2     		uxth	r2, r2
 975 008e 1A80     		strh	r2, [r3]
 223:command.c     ****     
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 24


 224:command.c     ****     if (cmd->post_func != NULL) {
 976              		.loc 1 224 0
 977 0090 7B68     		ldr	r3, [r7, #4]
 978 0092 DB69     		ldr	r3, [r3, #28]
 979 0094 002B     		cmp	r3, #0
 980 0096 07D0     		beq	.L55
 225:command.c     ****         return cmd->post_func(argv, argc);
 981              		.loc 1 225 0
 982 0098 7B68     		ldr	r3, [r7, #4]
 983 009a DB69     		ldr	r3, [r3, #28]
 984 009c B968     		ldr	r1, [r7, #8]
 985 009e FA68     		ldr	r2, [r7, #12]
 986 00a0 1000     		movs	r0, r2
 987 00a2 9847     		blx	r3
 988 00a4 0300     		movs	r3, r0
 989 00a6 00E0     		b	.L50
 990              	.L55:
 226:command.c     ****     }
 227:command.c     ****     return 0;
 991              		.loc 1 227 0
 992 00a8 0023     		movs	r3, #0
 993              	.L50:
 228:command.c     **** }
 994              		.loc 1 228 0
 995 00aa 1800     		movs	r0, r3
 996 00ac BD46     		mov	sp, r7
 997 00ae 06B0     		add	sp, sp, #24
 998              		@ sp needed
 999 00b0 80BD     		pop	{r7, pc}
 1000              	.L57:
 1001 00b2 C046     		.align	2
 1002              	.L56:
 1003 00b4 B8050000 		.word	.LC58
 1004              		.cfi_endproc
 1005              	.LFE40:
 1006              		.size	cmd_uint, .-cmd_uint
 1007              		.section	.text.cmd_noargs,"ax",%progbits
 1008              		.align	2
 1009              		.global	cmd_noargs
 1010              		.code	16
 1011              		.thumb_func
 1012              		.type	cmd_noargs, %function
 1013              	cmd_noargs:
 1014              	.LFB41:
 229:command.c     **** 
 230:command.c     **** /**
 231:command.c     ****  * A command that takes no arguments is really just a call to the helper function, but
 232:command.c     ****  * we will check the syntax first
 233:command.c     ****  */
 234:command.c     **** int cmd_noargs(char *argv[], int argc, const struct cmd *cmd) {
 1015              		.loc 1 234 0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 16
 1018              		@ frame_needed = 1, uses_anonymous_args = 0
 1019 0000 80B5     		push	{r7, lr}
 1020              		.cfi_def_cfa_offset 8
 1021              		.cfi_offset 7, -8
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 25


 1022              		.cfi_offset 14, -4
 1023 0002 84B0     		sub	sp, sp, #16
 1024              		.cfi_def_cfa_offset 24
 1025 0004 00AF     		add	r7, sp, #0
 1026              		.cfi_def_cfa_register 7
 1027 0006 F860     		str	r0, [r7, #12]
 1028 0008 B960     		str	r1, [r7, #8]
 1029 000a 7A60     		str	r2, [r7, #4]
 235:command.c     ****     if (argc != 1) {
 1030              		.loc 1 235 0
 1031 000c BB68     		ldr	r3, [r7, #8]
 1032 000e 012B     		cmp	r3, #1
 1033 0010 07D0     		beq	.L59
 236:command.c     ****         cmd_usage(argv, cmd);
 1034              		.loc 1 236 0
 1035 0012 7A68     		ldr	r2, [r7, #4]
 1036 0014 FB68     		ldr	r3, [r7, #12]
 1037 0016 1100     		movs	r1, r2
 1038 0018 1800     		movs	r0, r3
 1039 001a FFF7FEFF 		bl	cmd_usage
 237:command.c     ****         return 1;
 1040              		.loc 1 237 0
 1041 001e 0123     		movs	r3, #1
 1042 0020 0CE0     		b	.L60
 1043              	.L59:
 238:command.c     ****     }
 239:command.c     ****     if (cmd->post_func != NULL) {
 1044              		.loc 1 239 0
 1045 0022 7B68     		ldr	r3, [r7, #4]
 1046 0024 DB69     		ldr	r3, [r3, #28]
 1047 0026 002B     		cmp	r3, #0
 1048 0028 07D0     		beq	.L61
 240:command.c     ****         return cmd->post_func(argv, argc);
 1049              		.loc 1 240 0
 1050 002a 7B68     		ldr	r3, [r7, #4]
 1051 002c DB69     		ldr	r3, [r3, #28]
 1052 002e B968     		ldr	r1, [r7, #8]
 1053 0030 FA68     		ldr	r2, [r7, #12]
 1054 0032 1000     		movs	r0, r2
 1055 0034 9847     		blx	r3
 1056 0036 0300     		movs	r3, r0
 1057 0038 00E0     		b	.L60
 1058              	.L61:
 241:command.c     ****     }
 242:command.c     ****     return 0;    
 1059              		.loc 1 242 0
 1060 003a 0023     		movs	r3, #0
 1061              	.L60:
 243:command.c     **** }
 1062              		.loc 1 243 0
 1063 003c 1800     		movs	r0, r3
 1064 003e BD46     		mov	sp, r7
 1065 0040 04B0     		add	sp, sp, #16
 1066              		@ sp needed
 1067 0042 80BD     		pop	{r7, pc}
 1068              		.cfi_endproc
 1069              	.LFE41:
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 26


 1070              		.size	cmd_noargs, .-cmd_noargs
 1071              		.section	.rodata
 1072 05bd 000000   		.align	2
 1073              	.LC61:
 1074 05c0 2B2B252D 		.ascii	"++%-12.12s\011%s\015\012\000"
 1074      31322E31 
 1074      32730925 
 1074      730D0A00 
 1075              		.align	2
 1076              	.LC63:
 1077 05d0 3C657272 		.ascii	"<error: unknown command: %s>\015\012\000"
 1077      6F723A20 
 1077      756E6B6E 
 1077      6F776E20 
 1077      636F6D6D 
 1078              		.section	.text.cmd_help,"ax",%progbits
 1079              		.align	2
 1080              		.global	cmd_help
 1081              		.code	16
 1082              		.thumb_func
 1083              		.type	cmd_help, %function
 1084              	cmd_help:
 1085              	.LFB42:
 244:command.c     **** 
 245:command.c     **** /**
 246:command.c     ****  * The help command can take zero or one arguments
 247:command.c     ****  */
 248:command.c     **** int cmd_help(char *argv[], int argc, const struct cmd *cmd) {
 1086              		.loc 1 248 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 24
 1089              		@ frame_needed = 1, uses_anonymous_args = 0
 1090 0000 80B5     		push	{r7, lr}
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 86B0     		sub	sp, sp, #24
 1095              		.cfi_def_cfa_offset 32
 1096 0004 00AF     		add	r7, sp, #0
 1097              		.cfi_def_cfa_register 7
 1098 0006 F860     		str	r0, [r7, #12]
 1099 0008 B960     		str	r1, [r7, #8]
 1100 000a 7A60     		str	r2, [r7, #4]
 249:command.c     ****     // Did we even get the help command wrong?
 250:command.c     ****     if (argc > 2) {
 1101              		.loc 1 250 0
 1102 000c BB68     		ldr	r3, [r7, #8]
 1103 000e 022B     		cmp	r3, #2
 1104 0010 07DD     		ble	.L63
 251:command.c     ****         cmd_usage(argv, cmd);
 1105              		.loc 1 251 0
 1106 0012 7A68     		ldr	r2, [r7, #4]
 1107 0014 FB68     		ldr	r3, [r7, #12]
 1108 0016 1100     		movs	r1, r2
 1109 0018 1800     		movs	r0, r3
 1110 001a FFF7FEFF 		bl	cmd_usage
 252:command.c     ****         return 1;
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 27


 1111              		.loc 1 252 0
 1112 001e 0123     		movs	r3, #1
 1113 0020 4AE0     		b	.L64
 1114              	.L63:
 253:command.c     ****     }
 254:command.c     ****     // No args, means just show the list...
 255:command.c     ****     if (argc == 1) {
 1115              		.loc 1 255 0
 1116 0022 BB68     		ldr	r3, [r7, #8]
 1117 0024 012B     		cmp	r3, #1
 1118 0026 1BD1     		bne	.L65
 1119              	.LBB4:
 256:command.c     ****         int i = 0;
 1120              		.loc 1 256 0
 1121 0028 0023     		movs	r3, #0
 1122 002a 7B61     		str	r3, [r7, #20]
 257:command.c     ****         while (commands[i].name != NULL) {
 1123              		.loc 1 257 0
 1124 002c 10E0     		b	.L66
 1125              	.L67:
 258:command.c     ****             serial_printf("++%-12.12s\t%s\r\n", commands[i].name, commands[i].help);
 1126              		.loc 1 258 0
 1127 002e 244B     		ldr	r3, .L71
 1128 0030 7A69     		ldr	r2, [r7, #20]
 1129 0032 5201     		lsls	r2, r2, #5
 1130 0034 D158     		ldr	r1, [r2, r3]
 1131 0036 224A     		ldr	r2, .L71
 1132 0038 7B69     		ldr	r3, [r7, #20]
 1133 003a 5B01     		lsls	r3, r3, #5
 1134 003c D318     		adds	r3, r2, r3
 1135 003e 1033     		adds	r3, r3, #16
 1136 0040 1A68     		ldr	r2, [r3]
 1137 0042 204B     		ldr	r3, .L71+4
 1138 0044 1800     		movs	r0, r3
 1139 0046 FFF7FEFF 		bl	serial_printf
 259:command.c     ****             i++;
 1140              		.loc 1 259 0
 1141 004a 7B69     		ldr	r3, [r7, #20]
 1142 004c 0133     		adds	r3, r3, #1
 1143 004e 7B61     		str	r3, [r7, #20]
 1144              	.L66:
 257:command.c     ****         while (commands[i].name != NULL) {
 1145              		.loc 1 257 0
 1146 0050 1B4B     		ldr	r3, .L71
 1147 0052 7A69     		ldr	r2, [r7, #20]
 1148 0054 5201     		lsls	r2, r2, #5
 1149 0056 D358     		ldr	r3, [r2, r3]
 1150 0058 002B     		cmp	r3, #0
 1151 005a E8D1     		bne	.L67
 260:command.c     ****         }
 261:command.c     ****         return 0;
 1152              		.loc 1 261 0
 1153 005c 0023     		movs	r3, #0
 1154 005e 2BE0     		b	.L64
 1155              	.L65:
 1156              	.LBE4:
 262:command.c     ****     }
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 28


 263:command.c     ****     // One arg, means show usage of the given command
 264:command.c     ****     int i = 0;
 1157              		.loc 1 264 0
 1158 0060 0023     		movs	r3, #0
 1159 0062 3B61     		str	r3, [r7, #16]
 265:command.c     ****     while (commands[i].name != NULL) {
 1160              		.loc 1 265 0
 1161 0064 19E0     		b	.L68
 1162              	.L70:
 266:command.c     ****         if (strcmp(argv[1], commands[i].name) == 0) {
 1163              		.loc 1 266 0
 1164 0066 FB68     		ldr	r3, [r7, #12]
 1165 0068 0433     		adds	r3, r3, #4
 1166 006a 1868     		ldr	r0, [r3]
 1167 006c 144B     		ldr	r3, .L71
 1168 006e 3A69     		ldr	r2, [r7, #16]
 1169 0070 5201     		lsls	r2, r2, #5
 1170 0072 D358     		ldr	r3, [r2, r3]
 1171 0074 1900     		movs	r1, r3
 1172 0076 FFF7FEFF 		bl	strcmp
 1173 007a 031E     		subs	r3, r0, #0
 1174 007c 0AD1     		bne	.L69
 267:command.c     ****             cmd_usage(&argv[1], &commands[i]);
 1175              		.loc 1 267 0
 1176 007e FB68     		ldr	r3, [r7, #12]
 1177 0080 181D     		adds	r0, r3, #4
 1178 0082 3B69     		ldr	r3, [r7, #16]
 1179 0084 5A01     		lsls	r2, r3, #5
 1180 0086 0E4B     		ldr	r3, .L71
 1181 0088 D318     		adds	r3, r2, r3
 1182 008a 1900     		movs	r1, r3
 1183 008c FFF7FEFF 		bl	cmd_usage
 268:command.c     ****             return 0;
 1184              		.loc 1 268 0
 1185 0090 0023     		movs	r3, #0
 1186 0092 11E0     		b	.L64
 1187              	.L69:
 269:command.c     ****         }
 270:command.c     ****         i++;
 1188              		.loc 1 270 0
 1189 0094 3B69     		ldr	r3, [r7, #16]
 1190 0096 0133     		adds	r3, r3, #1
 1191 0098 3B61     		str	r3, [r7, #16]
 1192              	.L68:
 265:command.c     ****         if (strcmp(argv[1], commands[i].name) == 0) {
 1193              		.loc 1 265 0
 1194 009a 094B     		ldr	r3, .L71
 1195 009c 3A69     		ldr	r2, [r7, #16]
 1196 009e 5201     		lsls	r2, r2, #5
 1197 00a0 D358     		ldr	r3, [r2, r3]
 1198 00a2 002B     		cmp	r3, #0
 1199 00a4 DFD1     		bne	.L70
 271:command.c     ****     }
 272:command.c     ****     serial_printf("<error: unknown command: %s>\r\n", argv[1]);
 1200              		.loc 1 272 0
 1201 00a6 FB68     		ldr	r3, [r7, #12]
 1202 00a8 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 29


 1203 00aa 1A68     		ldr	r2, [r3]
 1204 00ac 064B     		ldr	r3, .L71+8
 1205 00ae 1100     		movs	r1, r2
 1206 00b0 1800     		movs	r0, r3
 1207 00b2 FFF7FEFF 		bl	serial_printf
 273:command.c     ****     return 0;
 1208              		.loc 1 273 0
 1209 00b6 0023     		movs	r3, #0
 1210              	.L64:
 274:command.c     **** }
 1211              		.loc 1 274 0
 1212 00b8 1800     		movs	r0, r3
 1213 00ba BD46     		mov	sp, r7
 1214 00bc 06B0     		add	sp, sp, #24
 1215              		@ sp needed
 1216 00be 80BD     		pop	{r7, pc}
 1217              	.L72:
 1218              		.align	2
 1219              	.L71:
 1220 00c0 00000000 		.word	commands
 1221 00c4 C0050000 		.word	.LC61
 1222 00c8 D0050000 		.word	.LC63
 1223              		.cfi_endproc
 1224              	.LFE42:
 1225              		.size	cmd_help, .-cmd_help
 1226              		.section	.rodata
 1227 05ef 00       		.align	2
 1228              	.LC67:
 1229 05f0 0D0A00   		.ascii	"\015\012\000"
 1230              		.section	.text.cmd_read,"ax",%progbits
 1231              		.align	2
 1232              		.global	cmd_read
 1233              		.code	16
 1234              		.thumb_func
 1235              		.type	cmd_read, %function
 1236              	cmd_read:
 1237              	.LFB43:
 275:command.c     **** 
 276:command.c     **** /**
 277:command.c     ****  * Read from the GPIB bus
 278:command.c     ****  */
 279:command.c     **** int cmd_read(char *argv[], int argc, const struct cmd *cmd) {
 1238              		.loc 1 279 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 48
 1241              		@ frame_needed = 1, uses_anonymous_args = 0
 1242 0000 80B5     		push	{r7, lr}
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 7, -8
 1245              		.cfi_offset 14, -4
 1246 0002 8CB0     		sub	sp, sp, #48
 1247              		.cfi_def_cfa_offset 56
 1248 0004 00AF     		add	r7, sp, #0
 1249              		.cfi_def_cfa_register 7
 1250 0006 F860     		str	r0, [r7, #12]
 1251 0008 B960     		str	r1, [r7, #8]
 1252 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 30


 280:command.c     ****     int until = GPIB_TIMEOUT;
 1253              		.loc 1 280 0
 1254 000c 0223     		movs	r3, #2
 1255 000e FF33     		adds	r3, r3, #255
 1256 0010 BB62     		str	r3, [r7, #40]
 281:command.c     **** //    uint8_t *buf = gpib_get_buffer();
 282:command.c     **** //    int     len;
 283:command.c     ****     uint8_t buf[16];
 284:command.c     ****     int     ended;
 285:command.c     ****     
 286:command.c     ****     if (argc > 2) {
 1257              		.loc 1 286 0
 1258 0012 BB68     		ldr	r3, [r7, #8]
 1259 0014 022B     		cmp	r3, #2
 1260 0016 07DD     		ble	.L74
 287:command.c     ****         cmd_usage(argv, cmd);
 1261              		.loc 1 287 0
 1262 0018 7A68     		ldr	r2, [r7, #4]
 1263 001a FB68     		ldr	r3, [r7, #12]
 1264 001c 1100     		movs	r1, r2
 1265 001e 1800     		movs	r0, r3
 1266 0020 FFF7FEFF 		bl	cmd_usage
 288:command.c     ****         return 1;
 1267              		.loc 1 288 0
 1268 0024 0123     		movs	r3, #1
 1269 0026 6AE0     		b	.L84
 1270              	.L74:
 289:command.c     ****     }
 290:command.c     ****     if (argc == 2) {
 1271              		.loc 1 290 0
 1272 0028 BB68     		ldr	r3, [r7, #8]
 1273 002a 022B     		cmp	r3, #2
 1274 002c 35D1     		bne	.L76
 291:command.c     ****         if (strcmp(argv[1], "eoi") == 0) {
 1275              		.loc 1 291 0
 1276 002e FB68     		ldr	r3, [r7, #12]
 1277 0030 0433     		adds	r3, r3, #4
 1278 0032 1B68     		ldr	r3, [r3]
 1279 0034 344A     		ldr	r2, .L85
 1280 0036 1100     		movs	r1, r2
 1281 0038 1800     		movs	r0, r3
 1282 003a FFF7FEFF 		bl	strcmp
 1283 003e 031E     		subs	r3, r0, #0
 1284 0040 03D1     		bne	.L77
 292:command.c     ****             until = GPIB_EOI;
 1285              		.loc 1 292 0
 1286 0042 8023     		movs	r3, #128
 1287 0044 5B00     		lsls	r3, r3, #1
 1288 0046 BB62     		str	r3, [r7, #40]
 1289 0048 27E0     		b	.L76
 1290              	.L77:
 293:command.c     ****         } else if (!is_int(argv[1])) {
 1291              		.loc 1 293 0
 1292 004a FB68     		ldr	r3, [r7, #12]
 1293 004c 0433     		adds	r3, r3, #4
 1294 004e 1B68     		ldr	r3, [r3]
 1295 0050 1800     		movs	r0, r3
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 31


 1296 0052 FFF7FEFF 		bl	is_int
 1297 0056 031E     		subs	r3, r0, #0
 1298 0058 07D1     		bne	.L78
 294:command.c     ****             cmd_usage(argv, cmd);
 1299              		.loc 1 294 0
 1300 005a 7A68     		ldr	r2, [r7, #4]
 1301 005c FB68     		ldr	r3, [r7, #12]
 1302 005e 1100     		movs	r1, r2
 1303 0060 1800     		movs	r0, r3
 1304 0062 FFF7FEFF 		bl	cmd_usage
 295:command.c     ****             return 1;
 1305              		.loc 1 295 0
 1306 0066 0123     		movs	r3, #1
 1307 0068 49E0     		b	.L84
 1308              	.L78:
 1309              	.LBB5:
 296:command.c     ****         } else {
 297:command.c     ****             int ch = to_int(argv[1]);
 1310              		.loc 1 297 0
 1311 006a FB68     		ldr	r3, [r7, #12]
 1312 006c 0433     		adds	r3, r3, #4
 1313 006e 1B68     		ldr	r3, [r3]
 1314 0070 1800     		movs	r0, r3
 1315 0072 FFF7FEFF 		bl	to_int
 1316 0076 0300     		movs	r3, r0
 1317 0078 7B62     		str	r3, [r7, #36]
 298:command.c     ****             if (ch < 0 || ch > 255) {
 1318              		.loc 1 298 0
 1319 007a 7B6A     		ldr	r3, [r7, #36]
 1320 007c 002B     		cmp	r3, #0
 1321 007e 02DB     		blt	.L79
 1322              		.loc 1 298 0 is_stmt 0 discriminator 1
 1323 0080 7B6A     		ldr	r3, [r7, #36]
 1324 0082 FF2B     		cmp	r3, #255
 1325 0084 07DD     		ble	.L80
 1326              	.L79:
 299:command.c     ****                 cmd_usage(argv, cmd);
 1327              		.loc 1 299 0 is_stmt 1
 1328 0086 7A68     		ldr	r2, [r7, #4]
 1329 0088 FB68     		ldr	r3, [r7, #12]
 1330 008a 1100     		movs	r1, r2
 1331 008c 1800     		movs	r0, r3
 1332 008e FFF7FEFF 		bl	cmd_usage
 300:command.c     ****                 return 1;
 1333              		.loc 1 300 0
 1334 0092 0123     		movs	r3, #1
 1335 0094 33E0     		b	.L84
 1336              	.L80:
 301:command.c     ****             }
 302:command.c     ****             until = ch;
 1337              		.loc 1 302 0
 1338 0096 7B6A     		ldr	r3, [r7, #36]
 1339 0098 BB62     		str	r3, [r7, #40]
 1340              	.L76:
 1341              	.LBE5:
 303:command.c     ****         }
 304:command.c     ****     }
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 32


 305:command.c     ****     
 306:command.c     ****     gpib_address_talker(settings.address);
 1342              		.loc 1 306 0
 1343 009a 1C4B     		ldr	r3, .L85+4
 1344 009c DB88     		ldrh	r3, [r3, #6]
 1345 009e DBB2     		uxtb	r3, r3
 1346 00a0 1800     		movs	r0, r3
 1347 00a2 FFF7FEFF 		bl	gpib_address_talker
 1348              	.L82:
 1349              	.LBB6:
 307:command.c     ****     
 308:command.c     ****     do {
 309:command.c     ****         int len = gpib_read_bytes(buf, 16, &ended);
 1350              		.loc 1 309 0
 1351 00a6 1023     		movs	r3, #16
 1352 00a8 FA18     		adds	r2, r7, r3
 1353 00aa 1423     		movs	r3, #20
 1354 00ac FB18     		adds	r3, r7, r3
 1355 00ae 1021     		movs	r1, #16
 1356 00b0 1800     		movs	r0, r3
 1357 00b2 FFF7FEFF 		bl	gpib_read_bytes
 1358 00b6 0300     		movs	r3, r0
 1359 00b8 FB62     		str	r3, [r7, #44]
 310:command.c     ****         if (settings.interact) {
 1360              		.loc 1 310 0
 1361 00ba 144B     		ldr	r3, .L85+4
 1362 00bc 9B8A     		ldrh	r3, [r3, #20]
 1363 00be 002B     		cmp	r3, #0
 1364 00c0 08D0     		beq	.L81
 311:command.c     ****             len = chomp(buf, len);   
 1365              		.loc 1 311 0
 1366 00c2 FA6A     		ldr	r2, [r7, #44]
 1367 00c4 1423     		movs	r3, #20
 1368 00c6 FB18     		adds	r3, r7, r3
 1369 00c8 1100     		movs	r1, r2
 1370 00ca 1800     		movs	r0, r3
 1371 00cc FFF7FEFF 		bl	chomp
 1372 00d0 0300     		movs	r3, r0
 1373 00d2 FB62     		str	r3, [r7, #44]
 1374              	.L81:
 312:command.c     ****         }
 313:command.c     ****         serial_add(buf, len);
 1375              		.loc 1 313 0
 1376 00d4 FA6A     		ldr	r2, [r7, #44]
 1377 00d6 1423     		movs	r3, #20
 1378 00d8 FB18     		adds	r3, r7, r3
 1379 00da 1100     		movs	r1, r2
 1380 00dc 1800     		movs	r0, r3
 1381 00de FFF7FEFF 		bl	serial_add
 1382              	.LBE6:
 314:command.c     ****     } while (ended == GPIB_NOT_ENDED);
 1383              		.loc 1 314 0
 1384 00e2 3B69     		ldr	r3, [r7, #16]
 1385 00e4 002B     		cmp	r3, #0
 1386 00e6 DED0     		beq	.L82
 315:command.c     ****     if (settings.interact) {
 1387              		.loc 1 315 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 33


 1388 00e8 084B     		ldr	r3, .L85+4
 1389 00ea 9B8A     		ldrh	r3, [r3, #20]
 1390 00ec 002B     		cmp	r3, #0
 1391 00ee 03D0     		beq	.L83
 316:command.c     ****         serial_add_string("\r\n");
 1392              		.loc 1 316 0
 1393 00f0 074B     		ldr	r3, .L85+8
 1394 00f2 1800     		movs	r0, r3
 1395 00f4 FFF7FEFF 		bl	serial_add_string
 1396              	.L83:
 317:command.c     ****     }
 318:command.c     ****     serial_flush();
 1397              		.loc 1 318 0
 1398 00f8 FFF7FEFF 		bl	serial_flush
 319:command.c     ****     return 0;
 1399              		.loc 1 319 0
 1400 00fc 0023     		movs	r3, #0
 1401              	.L84:
 320:command.c     **** }
 1402              		.loc 1 320 0 discriminator 1
 1403 00fe 1800     		movs	r0, r3
 1404 0100 BD46     		mov	sp, r7
 1405 0102 0CB0     		add	sp, sp, #48
 1406              		@ sp needed
 1407 0104 80BD     		pop	{r7, pc}
 1408              	.L86:
 1409 0106 C046     		.align	2
 1410              	.L85:
 1411 0108 94000000 		.word	.LC6
 1412 010c 00000000 		.word	settings
 1413 0110 F0050000 		.word	.LC67
 1414              		.cfi_endproc
 1415              	.LFE43:
 1416              		.size	cmd_read, .-cmd_read
 1417              		.section	.rodata
 1418 05f3 00       		.align	2
 1419              	.LC70:
 1420 05f4 252D3130 		.ascii	"%-10.10s = %d\000"
 1420      2E313073 
 1420      203D2025 
 1420      6400
 1421 0602 0000     		.align	2
 1422              	.LC72:
 1423 0604 20282573 		.ascii	" (%s)\000"
 1423      2900
 1424              		.section	.text.cmd_config,"ax",%progbits
 1425              		.align	2
 1426              		.global	cmd_config
 1427              		.code	16
 1428              		.thumb_func
 1429              		.type	cmd_config, %function
 1430              	cmd_config:
 1431              	.LFB44:
 321:command.c     **** 
 322:command.c     **** /**
 323:command.c     ****  * List out all items of settings that can be set by commands
 324:command.c     ****  */
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 34


 325:command.c     **** int cmd_config(char *argv[], int argc, const struct cmd *cmd) {
 1432              		.loc 1 325 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 32
 1435              		@ frame_needed = 1, uses_anonymous_args = 0
 1436 0000 80B5     		push	{r7, lr}
 1437              		.cfi_def_cfa_offset 8
 1438              		.cfi_offset 7, -8
 1439              		.cfi_offset 14, -4
 1440 0002 88B0     		sub	sp, sp, #32
 1441              		.cfi_def_cfa_offset 40
 1442 0004 00AF     		add	r7, sp, #0
 1443              		.cfi_def_cfa_register 7
 1444 0006 F860     		str	r0, [r7, #12]
 1445 0008 B960     		str	r1, [r7, #8]
 1446 000a 7A60     		str	r2, [r7, #4]
 326:command.c     ****     if (argc != 1) {
 1447              		.loc 1 326 0
 1448 000c BB68     		ldr	r3, [r7, #8]
 1449 000e 012B     		cmp	r3, #1
 1450 0010 07D0     		beq	.L88
 327:command.c     ****         cmd_usage(argv, cmd);
 1451              		.loc 1 327 0
 1452 0012 7A68     		ldr	r2, [r7, #4]
 1453 0014 FB68     		ldr	r3, [r7, #12]
 1454 0016 1100     		movs	r1, r2
 1455 0018 1800     		movs	r0, r3
 1456 001a FFF7FEFF 		bl	cmd_usage
 328:command.c     ****         return 1;
 1457              		.loc 1 328 0
 1458 001e 0123     		movs	r3, #1
 1459 0020 5AE0     		b	.L89
 1460              	.L88:
 329:command.c     ****     }
 330:command.c     ****     // Now look through the commands, finding ones referencing the config
 331:command.c     ****     int i = 0;
 1461              		.loc 1 331 0
 1462 0022 0023     		movs	r3, #0
 1463 0024 FB61     		str	r3, [r7, #28]
 332:command.c     ****     while (commands[i].name != NULL) {
 1464              		.loc 1 332 0
 1465 0026 50E0     		b	.L90
 1466              	.L97:
 333:command.c     ****         if (commands[i].setting != NULL) {
 1467              		.loc 1 333 0
 1468 0028 2D4A     		ldr	r2, .L98
 1469 002a FB69     		ldr	r3, [r7, #28]
 1470 002c 5B01     		lsls	r3, r3, #5
 1471 002e D318     		adds	r3, r2, r3
 1472 0030 0833     		adds	r3, r3, #8
 1473 0032 1B68     		ldr	r3, [r3]
 1474 0034 002B     		cmp	r3, #0
 1475 0036 45D0     		beq	.L91
 1476              	.LBB7:
 334:command.c     ****             uint16_t value = *(commands[i].setting);
 1477              		.loc 1 334 0
 1478 0038 294A     		ldr	r2, .L98
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 35


 1479 003a FB69     		ldr	r3, [r7, #28]
 1480 003c 5B01     		lsls	r3, r3, #5
 1481 003e D318     		adds	r3, r2, r3
 1482 0040 0833     		adds	r3, r3, #8
 1483 0042 1A68     		ldr	r2, [r3]
 1484 0044 1223     		movs	r3, #18
 1485 0046 FB18     		adds	r3, r7, r3
 1486 0048 1288     		ldrh	r2, [r2]
 1487 004a 1A80     		strh	r2, [r3]
 335:command.c     ****             char    *meaning = NULL;
 1488              		.loc 1 335 0
 1489 004c 0023     		movs	r3, #0
 1490 004e BB61     		str	r3, [r7, #24]
 336:command.c     ****             
 337:command.c     ****             if (commands[i].meanings != NULL) {
 1491              		.loc 1 337 0
 1492 0050 234A     		ldr	r2, .L98
 1493 0052 FB69     		ldr	r3, [r7, #28]
 1494 0054 5B01     		lsls	r3, r3, #5
 1495 0056 D318     		adds	r3, r2, r3
 1496 0058 1833     		adds	r3, r3, #24
 1497 005a 1B68     		ldr	r3, [r3]
 1498 005c 002B     		cmp	r3, #0
 1499 005e 19D0     		beq	.L92
 1500              	.LBB8:
 338:command.c     ****                 const struct item_meaning *m = commands[i].meanings;
 1501              		.loc 1 338 0
 1502 0060 1F4A     		ldr	r2, .L98
 1503 0062 FB69     		ldr	r3, [r7, #28]
 1504 0064 5B01     		lsls	r3, r3, #5
 1505 0066 D318     		adds	r3, r2, r3
 1506 0068 1833     		adds	r3, r3, #24
 1507 006a 1B68     		ldr	r3, [r3]
 1508 006c 7B61     		str	r3, [r7, #20]
 339:command.c     ****                 while (m->meaning != NULL) {
 1509              		.loc 1 339 0
 1510 006e 0DE0     		b	.L93
 1511              	.L95:
 340:command.c     ****                     if (m->value == value) {
 1512              		.loc 1 340 0
 1513 0070 7B69     		ldr	r3, [r7, #20]
 1514 0072 1A68     		ldr	r2, [r3]
 1515 0074 1223     		movs	r3, #18
 1516 0076 FB18     		adds	r3, r7, r3
 1517 0078 1B88     		ldrh	r3, [r3]
 1518 007a 9A42     		cmp	r2, r3
 1519 007c 03D1     		bne	.L94
 341:command.c     ****                         meaning = m->meaning;
 1520              		.loc 1 341 0
 1521 007e 7B69     		ldr	r3, [r7, #20]
 1522 0080 5B68     		ldr	r3, [r3, #4]
 1523 0082 BB61     		str	r3, [r7, #24]
 342:command.c     ****                         break;
 1524              		.loc 1 342 0
 1525 0084 06E0     		b	.L92
 1526              	.L94:
 343:command.c     ****                     }
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 36


 344:command.c     ****                     m++;
 1527              		.loc 1 344 0
 1528 0086 7B69     		ldr	r3, [r7, #20]
 1529 0088 0833     		adds	r3, r3, #8
 1530 008a 7B61     		str	r3, [r7, #20]
 1531              	.L93:
 339:command.c     ****                     if (m->value == value) {
 1532              		.loc 1 339 0
 1533 008c 7B69     		ldr	r3, [r7, #20]
 1534 008e 5B68     		ldr	r3, [r3, #4]
 1535 0090 002B     		cmp	r3, #0
 1536 0092 EDD1     		bne	.L95
 1537              	.L92:
 1538              	.LBE8:
 345:command.c     ****                 }
 346:command.c     ****             }
 347:command.c     ****             serial_printf("%-10.10s = %d", commands[i].name, value);
 1539              		.loc 1 347 0
 1540 0094 124B     		ldr	r3, .L98
 1541 0096 FA69     		ldr	r2, [r7, #28]
 1542 0098 5201     		lsls	r2, r2, #5
 1543 009a D158     		ldr	r1, [r2, r3]
 1544 009c 1223     		movs	r3, #18
 1545 009e FB18     		adds	r3, r7, r3
 1546 00a0 1A88     		ldrh	r2, [r3]
 1547 00a2 104B     		ldr	r3, .L98+4
 1548 00a4 1800     		movs	r0, r3
 1549 00a6 FFF7FEFF 		bl	serial_printf
 348:command.c     ****             if (meaning) {
 1550              		.loc 1 348 0
 1551 00aa BB69     		ldr	r3, [r7, #24]
 1552 00ac 002B     		cmp	r3, #0
 1553 00ae 05D0     		beq	.L96
 349:command.c     ****                 serial_printf(" (%s)", meaning);
 1554              		.loc 1 349 0
 1555 00b0 BA69     		ldr	r2, [r7, #24]
 1556 00b2 0D4B     		ldr	r3, .L98+8
 1557 00b4 1100     		movs	r1, r2
 1558 00b6 1800     		movs	r0, r3
 1559 00b8 FFF7FEFF 		bl	serial_printf
 1560              	.L96:
 350:command.c     ****             }
 351:command.c     ****             serial_printf("\r\n");
 1561              		.loc 1 351 0
 1562 00bc 0B4B     		ldr	r3, .L98+12
 1563 00be 1800     		movs	r0, r3
 1564 00c0 FFF7FEFF 		bl	serial_printf
 1565              	.L91:
 1566              	.LBE7:
 352:command.c     ****         }
 353:command.c     ****         i++;
 1567              		.loc 1 353 0
 1568 00c4 FB69     		ldr	r3, [r7, #28]
 1569 00c6 0133     		adds	r3, r3, #1
 1570 00c8 FB61     		str	r3, [r7, #28]
 1571              	.L90:
 332:command.c     ****         if (commands[i].setting != NULL) {
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 37


 1572              		.loc 1 332 0
 1573 00ca 054B     		ldr	r3, .L98
 1574 00cc FA69     		ldr	r2, [r7, #28]
 1575 00ce 5201     		lsls	r2, r2, #5
 1576 00d0 D358     		ldr	r3, [r2, r3]
 1577 00d2 002B     		cmp	r3, #0
 1578 00d4 A8D1     		bne	.L97
 354:command.c     ****     }   
 355:command.c     ****     return 0;
 1579              		.loc 1 355 0
 1580 00d6 0023     		movs	r3, #0
 1581              	.L89:
 356:command.c     **** }
 1582              		.loc 1 356 0
 1583 00d8 1800     		movs	r0, r3
 1584 00da BD46     		mov	sp, r7
 1585 00dc 08B0     		add	sp, sp, #32
 1586              		@ sp needed
 1587 00de 80BD     		pop	{r7, pc}
 1588              	.L99:
 1589              		.align	2
 1590              	.L98:
 1591 00e0 00000000 		.word	commands
 1592 00e4 F4050000 		.word	.LC70
 1593 00e8 04060000 		.word	.LC72
 1594 00ec F0050000 		.word	.LC67
 1595              		.cfi_endproc
 1596              	.LFE44:
 1597              		.size	cmd_config, .-cmd_config
 1598              		.section	.rodata
 1599 060a 0000     		.align	2
 1600              	.LC75:
 1601 060c 79617567 		.ascii	"yaugi %d.%d by Lee Essen\015\012\000"
 1601      69202564 
 1601      2E256420 
 1601      6279204C 
 1601      65652045 
 1602              		.section	.text.helper_version,"ax",%progbits
 1603              		.align	2
 1604              		.global	helper_version
 1605              		.code	16
 1606              		.thumb_func
 1607              		.type	helper_version, %function
 1608              	helper_version:
 1609              	.LFB45:
 357:command.c     **** 
 358:command.c     **** 
 359:command.c     **** int helper_version() {
 1610              		.loc 1 359 0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 0
 1613              		@ frame_needed = 1, uses_anonymous_args = 0
 1614 0000 80B5     		push	{r7, lr}
 1615              		.cfi_def_cfa_offset 8
 1616              		.cfi_offset 7, -8
 1617              		.cfi_offset 14, -4
 1618 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 38


 1619              		.cfi_def_cfa_register 7
 360:command.c     ****     serial_printf("yaugi %d.%d by Lee Essen\r\n", MAJOR_VERSION, MINOR_VERSION);
 1620              		.loc 1 360 0
 1621 0004 044B     		ldr	r3, .L102
 1622 0006 0222     		movs	r2, #2
 1623 0008 0121     		movs	r1, #1
 1624 000a 1800     		movs	r0, r3
 1625 000c FFF7FEFF 		bl	serial_printf
 361:command.c     ****     return 0;
 1626              		.loc 1 361 0
 1627 0010 0023     		movs	r3, #0
 362:command.c     **** }
 1628              		.loc 1 362 0
 1629 0012 1800     		movs	r0, r3
 1630 0014 BD46     		mov	sp, r7
 1631              		@ sp needed
 1632 0016 80BD     		pop	{r7, pc}
 1633              	.L103:
 1634              		.align	2
 1635              	.L102:
 1636 0018 0C060000 		.word	.LC75
 1637              		.cfi_endproc
 1638              	.LFE45:
 1639              		.size	helper_version, .-helper_version
 1640              		.section	.rodata
 1641 0627 00       		.align	2
 1642              	.LC77:
 1643 0628 70696E20 		.ascii	"pin status = %04x\015\012\000"
 1643      73746174 
 1643      7573203D 
 1643      20253034 
 1643      780D0A00 
 1644              		.section	.text.helper_gpiball,"ax",%progbits
 1645              		.align	2
 1646              		.global	helper_gpiball
 1647              		.code	16
 1648              		.thumb_func
 1649              		.type	helper_gpiball, %function
 1650              	helper_gpiball:
 1651              	.LFB46:
 363:command.c     ****  
 364:command.c     **** 
 365:command.c     **** int helper_gpiball() {
 1652              		.loc 1 365 0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 8
 1655              		@ frame_needed = 1, uses_anonymous_args = 0
 1656 0000 90B5     		push	{r4, r7, lr}
 1657              		.cfi_def_cfa_offset 12
 1658              		.cfi_offset 4, -12
 1659              		.cfi_offset 7, -8
 1660              		.cfi_offset 14, -4
 1661 0002 83B0     		sub	sp, sp, #12
 1662              		.cfi_def_cfa_offset 24
 1663 0004 00AF     		add	r7, sp, #0
 1664              		.cfi_def_cfa_register 7
 366:command.c     ****     uint16_t v = gpib_readall();
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 39


 1665              		.loc 1 366 0
 1666 0006 BC1D     		adds	r4, r7, #6
 1667 0008 FFF7FEFF 		bl	gpib_readall
 1668 000c 0300     		movs	r3, r0
 1669 000e 2380     		strh	r3, [r4]
 367:command.c     ****     serial_printf("pin status = %04x\r\n", v);
 1670              		.loc 1 367 0
 1671 0010 BB1D     		adds	r3, r7, #6
 1672 0012 1A88     		ldrh	r2, [r3]
 1673 0014 044B     		ldr	r3, .L106
 1674 0016 1100     		movs	r1, r2
 1675 0018 1800     		movs	r0, r3
 1676 001a FFF7FEFF 		bl	serial_printf
 368:command.c     ****     return 0;
 1677              		.loc 1 368 0
 1678 001e 0023     		movs	r3, #0
 369:command.c     **** }
 1679              		.loc 1 369 0
 1680 0020 1800     		movs	r0, r3
 1681 0022 BD46     		mov	sp, r7
 1682 0024 03B0     		add	sp, sp, #12
 1683              		@ sp needed
 1684 0026 90BD     		pop	{r4, r7, pc}
 1685              	.L107:
 1686              		.align	2
 1687              	.L106:
 1688 0028 28060000 		.word	.LC77
 1689              		.cfi_endproc
 1690              	.LFE46:
 1691              		.size	helper_gpiball, .-helper_gpiball
 1692              		.section	.text.helper_clr,"ax",%progbits
 1693              		.align	2
 1694              		.global	helper_clr
 1695              		.code	16
 1696              		.thumb_func
 1697              		.type	helper_clr, %function
 1698              	helper_clr:
 1699              	.LFB47:
 370:command.c     **** 
 371:command.c     **** /**
 372:command.c     ****  * Send the selected device clear command (needs to be tested)
 373:command.c     ****  */
 374:command.c     **** int helper_clr() {
 1700              		.loc 1 374 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704 0000 80B5     		push	{r7, lr}
 1705              		.cfi_def_cfa_offset 8
 1706              		.cfi_offset 7, -8
 1707              		.cfi_offset 14, -4
 1708 0002 00AF     		add	r7, sp, #0
 1709              		.cfi_def_cfa_register 7
 375:command.c     ****     gpib_send_SDC();
 1710              		.loc 1 375 0
 1711 0004 FFF7FEFF 		bl	gpib_send_SDC
 376:command.c     ****     return 0;
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 40


 1712              		.loc 1 376 0
 1713 0008 0023     		movs	r3, #0
 377:command.c     **** }
 1714              		.loc 1 377 0
 1715 000a 1800     		movs	r0, r3
 1716 000c BD46     		mov	sp, r7
 1717              		@ sp needed
 1718 000e 80BD     		pop	{r7, pc}
 1719              		.cfi_endproc
 1720              	.LFE47:
 1721              		.size	helper_clr, .-helper_clr
 1722              		.section	.text.helper_ifc,"ax",%progbits
 1723              		.align	2
 1724              		.global	helper_ifc
 1725              		.code	16
 1726              		.thumb_func
 1727              		.type	helper_ifc, %function
 1728              	helper_ifc:
 1729              	.LFB48:
 378:command.c     **** int helper_ifc() {
 1730              		.loc 1 378 0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 1, uses_anonymous_args = 0
 1734 0000 80B5     		push	{r7, lr}
 1735              		.cfi_def_cfa_offset 8
 1736              		.cfi_offset 7, -8
 1737              		.cfi_offset 14, -4
 1738 0002 00AF     		add	r7, sp, #0
 1739              		.cfi_def_cfa_register 7
 379:command.c     ****     gpib_interface_clear();
 1740              		.loc 1 379 0
 1741 0004 FFF7FEFF 		bl	gpib_interface_clear
 380:command.c     ****     return 0;
 1742              		.loc 1 380 0
 1743 0008 0023     		movs	r3, #0
 381:command.c     **** }
 1744              		.loc 1 381 0
 1745 000a 1800     		movs	r0, r3
 1746 000c BD46     		mov	sp, r7
 1747              		@ sp needed
 1748 000e 80BD     		pop	{r7, pc}
 1749              		.cfi_endproc
 1750              	.LFE48:
 1751              		.size	helper_ifc, .-helper_ifc
 1752              		.section	.text.helper_llo,"ax",%progbits
 1753              		.align	2
 1754              		.global	helper_llo
 1755              		.code	16
 1756              		.thumb_func
 1757              		.type	helper_llo, %function
 1758              	helper_llo:
 1759              	.LFB49:
 382:command.c     **** int helper_llo() {
 1760              		.loc 1 382 0
 1761              		.cfi_startproc
 1762              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 41


 1763              		@ frame_needed = 1, uses_anonymous_args = 0
 1764 0000 80B5     		push	{r7, lr}
 1765              		.cfi_def_cfa_offset 8
 1766              		.cfi_offset 7, -8
 1767              		.cfi_offset 14, -4
 1768 0002 00AF     		add	r7, sp, #0
 1769              		.cfi_def_cfa_register 7
 383:command.c     ****     gpib_send_LLO();
 1770              		.loc 1 383 0
 1771 0004 FFF7FEFF 		bl	gpib_send_LLO
 384:command.c     ****     return 0;
 1772              		.loc 1 384 0
 1773 0008 0023     		movs	r3, #0
 385:command.c     **** }
 1774              		.loc 1 385 0
 1775 000a 1800     		movs	r0, r3
 1776 000c BD46     		mov	sp, r7
 1777              		@ sp needed
 1778 000e 80BD     		pop	{r7, pc}
 1779              		.cfi_endproc
 1780              	.LFE49:
 1781              		.size	helper_llo, .-helper_llo
 1782              		.section	.text.helper_loc,"ax",%progbits
 1783              		.align	2
 1784              		.global	helper_loc
 1785              		.code	16
 1786              		.thumb_func
 1787              		.type	helper_loc, %function
 1788              	helper_loc:
 1789              	.LFB50:
 386:command.c     **** int helper_loc() {
 1790              		.loc 1 386 0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 1, uses_anonymous_args = 0
 1794 0000 80B5     		push	{r7, lr}
 1795              		.cfi_def_cfa_offset 8
 1796              		.cfi_offset 7, -8
 1797              		.cfi_offset 14, -4
 1798 0002 00AF     		add	r7, sp, #0
 1799              		.cfi_def_cfa_register 7
 387:command.c     ****     gpib_send_GTL();
 1800              		.loc 1 387 0
 1801 0004 FFF7FEFF 		bl	gpib_send_GTL
 388:command.c     ****     return 0;
 1802              		.loc 1 388 0
 1803 0008 0023     		movs	r3, #0
 389:command.c     **** }
 1804              		.loc 1 389 0
 1805 000a 1800     		movs	r0, r3
 1806 000c BD46     		mov	sp, r7
 1807              		@ sp needed
 1808 000e 80BD     		pop	{r7, pc}
 1809              		.cfi_endproc
 1810              	.LFE50:
 1811              		.size	helper_loc, .-helper_loc
 1812              		.global	no_usage_args
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 42


 1813              		.section	.rodata
 1814              		.align	2
 1815              	.LC79:
 1816 063c 00       		.ascii	"\000"
 1817              		.data
 1818              		.align	2
 1819              		.type	no_usage_args, %object
 1820              		.size	no_usage_args, 8
 1821              	no_usage_args:
 1822 0000 3C060000 		.word	.LC79
 1823 0004 00000000 		.word	0
 1824              		.global	auto_means
 1825              		.section	.rodata
 1826 063d 000000   		.align	2
 1827              	.LC80:
 1828 0640 72656164 		.ascii	"read-after-write disabled\000"
 1828      2D616674 
 1828      65722D77 
 1828      72697465 
 1828      20646973 
 1829 065a 0000     		.align	2
 1830              	.LC81:
 1831 065c 72656164 		.ascii	"read-after-write always\000"
 1831      2D616674 
 1831      65722D77 
 1831      72697465 
 1831      20616C77 
 1832              		.align	2
 1833              	.LC82:
 1834 0674 72656164 		.ascii	"read-after-write if write contained ?\000"
 1834      2D616674 
 1834      65722D77 
 1834      72697465 
 1834      20696620 
 1835 069a 0000     		.align	2
 1836              		.type	auto_means, %object
 1837              		.size	auto_means, 32
 1838              	auto_means:
 1839 069c 00000000 		.word	0
 1840 06a0 40060000 		.word	.LC80
 1841 06a4 01000000 		.word	1
 1842 06a8 5C060000 		.word	.LC81
 1843 06ac 02000000 		.word	2
 1844 06b0 74060000 		.word	.LC82
 1845 06b4 00000000 		.word	0
 1846 06b8 00000000 		.word	0
 1847              		.global	enable_disable_means
 1848              		.align	2
 1849              	.LC83:
 1850 06bc 64697361 		.ascii	"disabled\000"
 1850      626C6564 
 1850      00
 1851 06c5 000000   		.align	2
 1852              	.LC84:
 1853 06c8 656E6162 		.ascii	"enabled\000"
 1853      6C656400 
 1854              		.align	2
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 43


 1855              		.type	enable_disable_means, %object
 1856              		.size	enable_disable_means, 24
 1857              	enable_disable_means:
 1858 06d0 00000000 		.word	0
 1859 06d4 BC060000 		.word	.LC83
 1860 06d8 01000000 		.word	1
 1861 06dc C8060000 		.word	.LC84
 1862 06e0 00000000 		.word	0
 1863 06e4 00000000 		.word	0
 1864              		.global	eos_means
 1865              		.align	2
 1866              	.LC85:
 1867 06e8 61707065 		.ascii	"append CR+LF to GPIB output\000"
 1867      6E642043 
 1867      522B4C46 
 1867      20746F20 
 1867      47504942 
 1868              		.align	2
 1869              	.LC86:
 1870 0704 61707065 		.ascii	"append CR to GPIB output\000"
 1870      6E642043 
 1870      5220746F 
 1870      20475049 
 1870      42206F75 
 1871 071d 000000   		.align	2
 1872              	.LC87:
 1873 0720 61707065 		.ascii	"append LF to GPIB output\000"
 1873      6E64204C 
 1873      4620746F 
 1873      20475049 
 1873      42206F75 
 1874 0739 000000   		.align	2
 1875              	.LC88:
 1876 073c 646F206E 		.ascii	"do not append to GPIB output\000"
 1876      6F742061 
 1876      7070656E 
 1876      6420746F 
 1876      20475049 
 1877 0759 000000   		.align	2
 1878              		.type	eos_means, %object
 1879              		.size	eos_means, 40
 1880              	eos_means:
 1881 075c 00000000 		.word	0
 1882 0760 E8060000 		.word	.LC85
 1883 0764 01000000 		.word	1
 1884 0768 04070000 		.word	.LC86
 1885 076c 02000000 		.word	2
 1886 0770 20070000 		.word	.LC87
 1887 0774 03000000 		.word	3
 1888 0778 3C070000 		.word	.LC88
 1889 077c 00000000 		.word	0
 1890 0780 00000000 		.word	0
 1891              		.global	enable_disable_usage
 1892              		.align	2
 1893              	.LC89:
 1894 0784 5B307C31 		.ascii	"[0|1]\000"
 1894      5D00
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 44


 1895              		.data
 1896              		.align	2
 1897              		.type	enable_disable_usage, %object
 1898              		.size	enable_disable_usage, 8
 1899              	enable_disable_usage:
 1900 0008 84070000 		.word	.LC89
 1901 000c 00000000 		.word	0
 1902              		.section	.rodata
 1903 078a 0000     		.align	2
 1904              	.LC90:
 1905 078c 5B504144 		.ascii	"[PAD]\000"
 1905      5D00
 1906 0792 0000     		.align	2
 1907              	.LC91:
 1908 0794 09776865 		.ascii	"\011where PAD is between 0 and 30\000"
 1908      72652050 
 1908      41442069 
 1908      73206265 
 1908      74776565 
 1909              		.data
 1910              		.align	2
 1911              		.type	__compound_literal.0, %object
 1912              		.size	__compound_literal.0, 12
 1913              	__compound_literal.0:
 1914 0010 8C070000 		.word	.LC90
 1915 0014 94070000 		.word	.LC91
 1916 0018 00000000 		.word	0
 1917              		.section	.rodata
 1918 07b3 00       		.align	2
 1919              	.LC92:
 1920 07b4 5B307C31 		.ascii	"[0|1|2]\000"
 1920      7C325D00 
 1921              		.data
 1922              		.align	2
 1923              		.type	__compound_literal.1, %object
 1924              		.size	__compound_literal.1, 8
 1925              	__compound_literal.1:
 1926 001c B4070000 		.word	.LC92
 1927 0020 00000000 		.word	0
 1928              		.section	.rodata
 1929              		.align	2
 1930              	.LC93:
 1931 07bc 5B307C31 		.ascii	"[0|1|2|3]\000"
 1931      7C327C33 
 1931      5D00
 1932              		.data
 1933              		.align	2
 1934              		.type	__compound_literal.2, %object
 1935              		.size	__compound_literal.2, 8
 1936              	__compound_literal.2:
 1937 0024 BC070000 		.word	.LC93
 1938 0028 00000000 		.word	0
 1939              		.section	.rodata
 1940 07c6 0000     		.align	2
 1941              	.LC94:
 1942 07c8 5B636861 		.ascii	"[char]\000"
 1942      725D00
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 45


 1943 07cf 00       		.align	2
 1944              	.LC95:
 1945 07d0 09776865 		.ascii	"\011where char is between 0 and 255\000"
 1945      72652063 
 1945      68617220 
 1945      69732062 
 1945      65747765 
 1946              		.data
 1947              		.align	2
 1948              		.type	__compound_literal.3, %object
 1949              		.size	__compound_literal.3, 12
 1950              	__compound_literal.3:
 1951 002c C8070000 		.word	.LC94
 1952 0030 D0070000 		.word	.LC95
 1953 0034 00000000 		.word	0
 1954              		.section	.rodata
 1955 07f1 000000   		.align	2
 1956              	.LC96:
 1957 07f4 5B636F6D 		.ascii	"[command]\000"
 1957      6D616E64 
 1957      5D00
 1958              		.data
 1959              		.align	2
 1960              		.type	__compound_literal.4, %object
 1961              		.size	__compound_literal.4, 8
 1962              	__compound_literal.4:
 1963 0038 F4070000 		.word	.LC96
 1964 003c 00000000 		.word	0
 1965              		.section	.rodata
 1966 07fe 0000     		.align	2
 1967              	.LC97:
 1968 0800 5B454F49 		.ascii	"[EOI | char]\000"
 1968      207C2063 
 1968      6861725D 
 1968      00
 1969              		.data
 1970              		.align	2
 1971              		.type	__compound_literal.5, %object
 1972              		.size	__compound_literal.5, 12
 1973              	__compound_literal.5:
 1974 0040 00080000 		.word	.LC97
 1975 0044 D0070000 		.word	.LC95
 1976 0048 00000000 		.word	0
 1977              		.section	.rodata
 1978 080d 000000   		.align	2
 1979              	.LC98:
 1980 0810 5B74696D 		.ascii	"[time]\000"
 1980      655D00
 1981 0817 00       		.align	2
 1982              	.LC99:
 1983 0818 09776865 		.ascii	"\011where time is between 1 and 3000\000"
 1983      72652074 
 1983      696D6520 
 1983      69732062 
 1983      65747765 
 1984              		.data
 1985              		.align	2
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 46


 1986              		.type	__compound_literal.6, %object
 1987              		.size	__compound_literal.6, 12
 1988              	__compound_literal.6:
 1989 004c 10080000 		.word	.LC98
 1990 0050 18080000 		.word	.LC99
 1991 0054 00000000 		.word	0
 1992              		.text
 1993              	.Letext0:
 1994              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1995              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1996              		.file 4 "settings.h"
 1997              		.section	.debug_info,"",%progbits
 1998              	.Ldebug_info0:
 1999 0000 AD070000 		.4byte	0x7ad
 2000 0004 0400     		.2byte	0x4
 2001 0006 00000000 		.4byte	.Ldebug_abbrev0
 2002 000a 04       		.byte	0x4
 2003 000b 01       		.uleb128 0x1
 2004 000c 61010000 		.4byte	.LASF68
 2005 0010 0C       		.byte	0xc
 2006 0011 41030000 		.4byte	.LASF69
 2007 0015 55000000 		.4byte	.LASF70
 2008 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2009 001d 00000000 		.4byte	0
 2010 0021 00000000 		.4byte	.Ldebug_line0
 2011 0025 02       		.uleb128 0x2
 2012 0026 01       		.byte	0x1
 2013 0027 06       		.byte	0x6
 2014 0028 22020000 		.4byte	.LASF0
 2015 002c 03       		.uleb128 0x3
 2016 002d 3B010000 		.4byte	.LASF3
 2017 0031 02       		.byte	0x2
 2018 0032 1D       		.byte	0x1d
 2019 0033 37000000 		.4byte	0x37
 2020 0037 02       		.uleb128 0x2
 2021 0038 01       		.byte	0x1
 2022 0039 08       		.byte	0x8
 2023 003a 53010000 		.4byte	.LASF1
 2024 003e 02       		.uleb128 0x2
 2025 003f 02       		.byte	0x2
 2026 0040 05       		.byte	0x5
 2027 0041 21000000 		.4byte	.LASF2
 2028 0045 03       		.uleb128 0x3
 2029 0046 96000000 		.4byte	.LASF4
 2030 004a 02       		.byte	0x2
 2031 004b 2B       		.byte	0x2b
 2032 004c 50000000 		.4byte	0x50
 2033 0050 02       		.uleb128 0x2
 2034 0051 02       		.byte	0x2
 2035 0052 07       		.byte	0x7
 2036 0053 78020000 		.4byte	.LASF5
 2037 0057 02       		.uleb128 0x2
 2038 0058 04       		.byte	0x4
 2039 0059 05       		.byte	0x5
 2040 005a 08010000 		.4byte	.LASF6
 2041 005e 03       		.uleb128 0x3
 2042 005f 1C030000 		.4byte	.LASF7
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 47


 2043 0063 02       		.byte	0x2
 2044 0064 41       		.byte	0x41
 2045 0065 69000000 		.4byte	0x69
 2046 0069 02       		.uleb128 0x2
 2047 006a 04       		.byte	0x4
 2048 006b 07       		.byte	0x7
 2049 006c FA020000 		.4byte	.LASF8
 2050 0070 02       		.uleb128 0x2
 2051 0071 08       		.byte	0x8
 2052 0072 05       		.byte	0x5
 2053 0073 E4000000 		.4byte	.LASF9
 2054 0077 02       		.uleb128 0x2
 2055 0078 08       		.byte	0x8
 2056 0079 07       		.byte	0x7
 2057 007a 2E020000 		.4byte	.LASF10
 2058 007e 04       		.uleb128 0x4
 2059 007f 04       		.byte	0x4
 2060 0080 05       		.byte	0x5
 2061 0081 696E7400 		.ascii	"int\000"
 2062 0085 02       		.uleb128 0x2
 2063 0086 04       		.byte	0x4
 2064 0087 07       		.byte	0x7
 2065 0088 4E020000 		.4byte	.LASF11
 2066 008c 03       		.uleb128 0x3
 2067 008d AC000000 		.4byte	.LASF12
 2068 0091 03       		.byte	0x3
 2069 0092 18       		.byte	0x18
 2070 0093 2C000000 		.4byte	0x2c
 2071 0097 03       		.uleb128 0x3
 2072 0098 5B020000 		.4byte	.LASF13
 2073 009c 03       		.byte	0x3
 2074 009d 24       		.byte	0x24
 2075 009e 45000000 		.4byte	0x45
 2076 00a2 03       		.uleb128 0x3
 2077 00a3 45020000 		.4byte	.LASF14
 2078 00a7 03       		.byte	0x3
 2079 00a8 30       		.byte	0x30
 2080 00a9 5E000000 		.4byte	0x5e
 2081 00ad 02       		.uleb128 0x2
 2082 00ae 04       		.byte	0x4
 2083 00af 04       		.byte	0x4
 2084 00b0 D9020000 		.4byte	.LASF15
 2085 00b4 02       		.uleb128 0x2
 2086 00b5 08       		.byte	0x8
 2087 00b6 04       		.byte	0x4
 2088 00b7 0C030000 		.4byte	.LASF16
 2089 00bb 02       		.uleb128 0x2
 2090 00bc 01       		.byte	0x1
 2091 00bd 08       		.byte	0x8
 2092 00be A0020000 		.4byte	.LASF17
 2093 00c2 02       		.uleb128 0x2
 2094 00c3 08       		.byte	0x8
 2095 00c4 04       		.byte	0x4
 2096 00c5 FF010000 		.4byte	.LASF18
 2097 00c9 02       		.uleb128 0x2
 2098 00ca 04       		.byte	0x4
 2099 00cb 07       		.byte	0x7
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 48


 2100 00cc 46000000 		.4byte	.LASF19
 2101 00d0 05       		.uleb128 0x5
 2102 00d1 04       		.byte	0x4
 2103 00d2 BB000000 		.4byte	0xbb
 2104 00d6 05       		.uleb128 0x5
 2105 00d7 04       		.byte	0x4
 2106 00d8 DC000000 		.4byte	0xdc
 2107 00dc 06       		.uleb128 0x6
 2108 00dd BB000000 		.4byte	0xbb
 2109 00e1 07       		.uleb128 0x7
 2110 00e2 D6000000 		.4byte	.LASF28
 2111 00e6 18       		.byte	0x18
 2112 00e7 04       		.byte	0x4
 2113 00e8 0D       		.byte	0xd
 2114 00e9 66010000 		.4byte	0x166
 2115 00ed 08       		.uleb128 0x8
 2116 00ee 37030000 		.4byte	.LASF20
 2117 00f2 04       		.byte	0x4
 2118 00f3 0E       		.byte	0xe
 2119 00f4 A2000000 		.4byte	0xa2
 2120 00f8 00       		.byte	0
 2121 00f9 08       		.uleb128 0x8
 2122 00fa 00000000 		.4byte	.LASF21
 2123 00fe 04       		.byte	0x4
 2124 00ff 0F       		.byte	0xf
 2125 0100 97000000 		.4byte	0x97
 2126 0104 04       		.byte	0x4
 2127 0105 08       		.uleb128 0x8
 2128 0106 26010000 		.4byte	.LASF22
 2129 010a 04       		.byte	0x4
 2130 010b 10       		.byte	0x10
 2131 010c 97000000 		.4byte	0x97
 2132 0110 06       		.byte	0x6
 2133 0111 08       		.uleb128 0x8
 2134 0112 C4000000 		.4byte	.LASF23
 2135 0116 04       		.byte	0x4
 2136 0117 11       		.byte	0x11
 2137 0118 97000000 		.4byte	0x97
 2138 011c 08       		.byte	0x8
 2139 011d 09       		.uleb128 0x9
 2140 011e 656F6900 		.ascii	"eoi\000"
 2141 0122 04       		.byte	0x4
 2142 0123 12       		.byte	0x12
 2143 0124 97000000 		.4byte	0x97
 2144 0128 0A       		.byte	0xa
 2145 0129 09       		.uleb128 0x9
 2146 012a 656F7300 		.ascii	"eos\000"
 2147 012e 04       		.byte	0x4
 2148 012f 13       		.byte	0x13
 2149 0130 97000000 		.4byte	0x97
 2150 0134 0C       		.byte	0xc
 2151 0135 08       		.uleb128 0x8
 2152 0136 0B020000 		.4byte	.LASF24
 2153 013a 04       		.byte	0x4
 2154 013b 14       		.byte	0x14
 2155 013c 97000000 		.4byte	0x97
 2156 0140 0E       		.byte	0xe
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 49


 2157 0141 08       		.uleb128 0x8
 2158 0142 8B020000 		.4byte	.LASF25
 2159 0146 04       		.byte	0x4
 2160 0147 15       		.byte	0x15
 2161 0148 97000000 		.4byte	0x97
 2162 014c 10       		.byte	0x10
 2163 014d 08       		.uleb128 0x8
 2164 014e F2000000 		.4byte	.LASF26
 2165 0152 04       		.byte	0x4
 2166 0153 16       		.byte	0x16
 2167 0154 97000000 		.4byte	0x97
 2168 0158 12       		.byte	0x12
 2169 0159 08       		.uleb128 0x8
 2170 015a 13030000 		.4byte	.LASF27
 2171 015e 04       		.byte	0x4
 2172 015f 19       		.byte	0x19
 2173 0160 97000000 		.4byte	0x97
 2174 0164 14       		.byte	0x14
 2175 0165 00       		.byte	0
 2176 0166 05       		.uleb128 0x5
 2177 0167 04       		.byte	0x4
 2178 0168 97000000 		.4byte	0x97
 2179 016c 07       		.uleb128 0x7
 2180 016d 2E010000 		.4byte	.LASF29
 2181 0171 08       		.byte	0x8
 2182 0172 01       		.byte	0x1
 2183 0173 32       		.byte	0x32
 2184 0174 91010000 		.4byte	0x191
 2185 0178 08       		.uleb128 0x8
 2186 0179 A1000000 		.4byte	.LASF30
 2187 017d 01       		.byte	0x1
 2188 017e 33       		.byte	0x33
 2189 017f 7E000000 		.4byte	0x7e
 2190 0183 00       		.byte	0
 2191 0184 08       		.uleb128 0x8
 2192 0185 2B000000 		.4byte	.LASF31
 2193 0189 01       		.byte	0x1
 2194 018a 34       		.byte	0x34
 2195 018b D0000000 		.4byte	0xd0
 2196 018f 04       		.byte	0x4
 2197 0190 00       		.byte	0
 2198 0191 0A       		.uleb128 0xa
 2199 0192 636D6400 		.ascii	"cmd\000"
 2200 0196 20       		.byte	0x20
 2201 0197 01       		.byte	0x1
 2202 0198 37       		.byte	0x37
 2203 0199 0A020000 		.4byte	0x20a
 2204 019d 08       		.uleb128 0x8
 2205 019e EF010000 		.4byte	.LASF32
 2206 01a2 01       		.byte	0x1
 2207 01a3 38       		.byte	0x38
 2208 01a4 D0000000 		.4byte	0xd0
 2209 01a8 00       		.byte	0
 2210 01a9 08       		.uleb128 0x8
 2211 01aa DF000000 		.4byte	.LASF33
 2212 01ae 01       		.byte	0x1
 2213 01af 39       		.byte	0x39
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 50


 2214 01b0 34020000 		.4byte	0x234
 2215 01b4 04       		.byte	0x4
 2216 01b5 08       		.uleb128 0x8
 2217 01b6 19000000 		.4byte	.LASF34
 2218 01ba 01       		.byte	0x1
 2219 01bb 3A       		.byte	0x3a
 2220 01bc 66010000 		.4byte	0x166
 2221 01c0 08       		.byte	0x8
 2222 01c1 09       		.uleb128 0x9
 2223 01c2 6D696E00 		.ascii	"min\000"
 2224 01c6 01       		.byte	0x1
 2225 01c7 3B       		.byte	0x3b
 2226 01c8 97000000 		.4byte	0x97
 2227 01cc 0C       		.byte	0xc
 2228 01cd 09       		.uleb128 0x9
 2229 01ce 6D617800 		.ascii	"max\000"
 2230 01d2 01       		.byte	0x1
 2231 01d3 3C       		.byte	0x3c
 2232 01d4 97000000 		.4byte	0x97
 2233 01d8 0E       		.byte	0xe
 2234 01d9 08       		.uleb128 0x8
 2235 01da A7000000 		.4byte	.LASF35
 2236 01de 01       		.byte	0x1
 2237 01df 42       		.byte	0x42
 2238 01e0 D6000000 		.4byte	0xd6
 2239 01e4 10       		.byte	0x10
 2240 01e5 08       		.uleb128 0x8
 2241 01e6 13000000 		.4byte	.LASF36
 2242 01ea 01       		.byte	0x1
 2243 01eb 43       		.byte	0x43
 2244 01ec 3A020000 		.4byte	0x23a
 2245 01f0 14       		.byte	0x14
 2246 01f1 08       		.uleb128 0x8
 2247 01f2 CD000000 		.4byte	.LASF37
 2248 01f6 01       		.byte	0x1
 2249 01f7 44       		.byte	0x44
 2250 01f8 40020000 		.4byte	0x240
 2251 01fc 18       		.byte	0x18
 2252 01fd 08       		.uleb128 0x8
 2253 01fe FE000000 		.4byte	.LASF38
 2254 0202 01       		.byte	0x1
 2255 0203 45       		.byte	0x45
 2256 0204 5F020000 		.4byte	0x25f
 2257 0208 1C       		.byte	0x1c
 2258 0209 00       		.byte	0
 2259 020a 0B       		.uleb128 0xb
 2260 020b 7E000000 		.4byte	0x7e
 2261 020f 23020000 		.4byte	0x223
 2262 0213 0C       		.uleb128 0xc
 2263 0214 23020000 		.4byte	0x223
 2264 0218 0C       		.uleb128 0xc
 2265 0219 7E000000 		.4byte	0x7e
 2266 021d 0C       		.uleb128 0xc
 2267 021e 29020000 		.4byte	0x229
 2268 0222 00       		.byte	0
 2269 0223 05       		.uleb128 0x5
 2270 0224 04       		.byte	0x4
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 51


 2271 0225 D0000000 		.4byte	0xd0
 2272 0229 05       		.uleb128 0x5
 2273 022a 04       		.byte	0x4
 2274 022b 2F020000 		.4byte	0x22f
 2275 022f 06       		.uleb128 0x6
 2276 0230 91010000 		.4byte	0x191
 2277 0234 05       		.uleb128 0x5
 2278 0235 04       		.byte	0x4
 2279 0236 0A020000 		.4byte	0x20a
 2280 023a 05       		.uleb128 0x5
 2281 023b 04       		.byte	0x4
 2282 023c D6000000 		.4byte	0xd6
 2283 0240 05       		.uleb128 0x5
 2284 0241 04       		.byte	0x4
 2285 0242 46020000 		.4byte	0x246
 2286 0246 06       		.uleb128 0x6
 2287 0247 6C010000 		.4byte	0x16c
 2288 024b 0B       		.uleb128 0xb
 2289 024c 7E000000 		.4byte	0x7e
 2290 0250 5F020000 		.4byte	0x25f
 2291 0254 0C       		.uleb128 0xc
 2292 0255 23020000 		.4byte	0x223
 2293 0259 0C       		.uleb128 0xc
 2294 025a 7E000000 		.4byte	0x7e
 2295 025e 00       		.byte	0
 2296 025f 05       		.uleb128 0x5
 2297 0260 04       		.byte	0x4
 2298 0261 4B020000 		.4byte	0x24b
 2299 0265 0D       		.uleb128 0xd
 2300 0266 45010000 		.4byte	.LASF39
 2301 026a 01       		.byte	0x1
 2302 026b 4F       		.byte	0x4f
 2303 026c 7E000000 		.4byte	0x7e
 2304 0270 00000000 		.4byte	.LFB35
 2305 0274 DC000000 		.4byte	.LFE35-.LFB35
 2306 0278 01       		.uleb128 0x1
 2307 0279 9C       		.byte	0x9c
 2308 027a A7020000 		.4byte	0x2a7
 2309 027e 0E       		.uleb128 0xe
 2310 027f 62756600 		.ascii	"buf\000"
 2311 0283 01       		.byte	0x1
 2312 0284 4F       		.byte	0x4f
 2313 0285 A7020000 		.4byte	0x2a7
 2314 0289 02       		.uleb128 0x2
 2315 028a 91       		.byte	0x91
 2316 028b 6C       		.sleb128 -20
 2317 028c 0E       		.uleb128 0xe
 2318 028d 6C656E00 		.ascii	"len\000"
 2319 0291 01       		.byte	0x1
 2320 0292 4F       		.byte	0x4f
 2321 0293 7E000000 		.4byte	0x7e
 2322 0297 02       		.uleb128 0x2
 2323 0298 91       		.byte	0x91
 2324 0299 68       		.sleb128 -24
 2325 029a 0F       		.uleb128 0xf
 2326 029b 6900     		.ascii	"i\000"
 2327 029d 01       		.byte	0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 52


 2328 029e 50       		.byte	0x50
 2329 029f 7E000000 		.4byte	0x7e
 2330 02a3 02       		.uleb128 0x2
 2331 02a4 91       		.byte	0x91
 2332 02a5 74       		.sleb128 -12
 2333 02a6 00       		.byte	0
 2334 02a7 05       		.uleb128 0x5
 2335 02a8 04       		.byte	0x4
 2336 02a9 8C000000 		.4byte	0x8c
 2337 02ad 0D       		.uleb128 0xd
 2338 02ae D2020000 		.4byte	.LASF40
 2339 02b2 01       		.byte	0x1
 2340 02b3 7E       		.byte	0x7e
 2341 02b4 7E000000 		.4byte	0x7e
 2342 02b8 00000000 		.4byte	.LFB36
 2343 02bc 40000000 		.4byte	.LFE36-.LFB36
 2344 02c0 01       		.uleb128 0x1
 2345 02c1 9C       		.byte	0x9c
 2346 02c2 D3020000 		.4byte	0x2d3
 2347 02c6 0E       		.uleb128 0xe
 2348 02c7 7600     		.ascii	"v\000"
 2349 02c9 01       		.byte	0x1
 2350 02ca 7E       		.byte	0x7e
 2351 02cb D0000000 		.4byte	0xd0
 2352 02cf 02       		.uleb128 0x2
 2353 02d0 91       		.byte	0x91
 2354 02d1 74       		.sleb128 -12
 2355 02d2 00       		.byte	0
 2356 02d3 10       		.uleb128 0x10
 2357 02d4 B4000000 		.4byte	.LASF41
 2358 02d8 01       		.byte	0x1
 2359 02d9 88       		.byte	0x88
 2360 02da 7E000000 		.4byte	0x7e
 2361 02de 00000000 		.4byte	.LFB37
 2362 02e2 3C000000 		.4byte	.LFE37-.LFB37
 2363 02e6 01       		.uleb128 0x1
 2364 02e7 9C       		.byte	0x9c
 2365 02e8 05030000 		.4byte	0x305
 2366 02ec 0E       		.uleb128 0xe
 2367 02ed 7600     		.ascii	"v\000"
 2368 02ef 01       		.byte	0x1
 2369 02f0 88       		.byte	0x88
 2370 02f1 D0000000 		.4byte	0xd0
 2371 02f5 02       		.uleb128 0x2
 2372 02f6 91       		.byte	0x91
 2373 02f7 6C       		.sleb128 -20
 2374 02f8 0F       		.uleb128 0xf
 2375 02f9 6900     		.ascii	"i\000"
 2376 02fb 01       		.byte	0x1
 2377 02fc 89       		.byte	0x89
 2378 02fd 7E000000 		.4byte	0x7e
 2379 0301 02       		.uleb128 0x2
 2380 0302 91       		.byte	0x91
 2381 0303 74       		.sleb128 -12
 2382 0304 00       		.byte	0
 2383 0305 11       		.uleb128 0x11
 2384 0306 A5020000 		.4byte	.LASF43
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 53


 2385 030a 01       		.byte	0x1
 2386 030b 95       		.byte	0x95
 2387 030c 00000000 		.4byte	.LFB38
 2388 0310 88000000 		.4byte	.LFE38-.LFB38
 2389 0314 01       		.uleb128 0x1
 2390 0315 9C       		.byte	0x9c
 2391 0316 51030000 		.4byte	0x351
 2392 031a 0E       		.uleb128 0xe
 2393 031b 62756600 		.ascii	"buf\000"
 2394 031f 01       		.byte	0x1
 2395 0320 95       		.byte	0x95
 2396 0321 A7020000 		.4byte	0x2a7
 2397 0325 02       		.uleb128 0x2
 2398 0326 91       		.byte	0x91
 2399 0327 6C       		.sleb128 -20
 2400 0328 0E       		.uleb128 0xe
 2401 0329 6C656E00 		.ascii	"len\000"
 2402 032d 01       		.byte	0x1
 2403 032e 95       		.byte	0x95
 2404 032f 7E000000 		.4byte	0x7e
 2405 0333 02       		.uleb128 0x2
 2406 0334 91       		.byte	0x91
 2407 0335 68       		.sleb128 -24
 2408 0336 12       		.uleb128 0x12
 2409 0337 1D020000 		.4byte	.LASF42
 2410 033b 01       		.byte	0x1
 2411 033c 96       		.byte	0x96
 2412 033d 7E000000 		.4byte	0x7e
 2413 0341 02       		.uleb128 0x2
 2414 0342 91       		.byte	0x91
 2415 0343 70       		.sleb128 -16
 2416 0344 0F       		.uleb128 0xf
 2417 0345 6900     		.ascii	"i\000"
 2418 0347 01       		.byte	0x1
 2419 0348 9E       		.byte	0x9e
 2420 0349 7E000000 		.4byte	0x7e
 2421 034d 02       		.uleb128 0x2
 2422 034e 91       		.byte	0x91
 2423 034f 74       		.sleb128 -12
 2424 0350 00       		.byte	0
 2425 0351 11       		.uleb128 0x11
 2426 0352 E5020000 		.4byte	.LASF44
 2427 0356 01       		.byte	0x1
 2428 0357 AB       		.byte	0xab
 2429 0358 00000000 		.4byte	.LFB39
 2430 035c D4000000 		.4byte	.LFE39-.LFB39
 2431 0360 01       		.uleb128 0x1
 2432 0361 9C       		.byte	0x9c
 2433 0362 C1030000 		.4byte	0x3c1
 2434 0366 13       		.uleb128 0x13
 2435 0367 64020000 		.4byte	.LASF45
 2436 036b 01       		.byte	0x1
 2437 036c AB       		.byte	0xab
 2438 036d 23020000 		.4byte	0x223
 2439 0371 02       		.uleb128 0x2
 2440 0372 91       		.byte	0x91
 2441 0373 64       		.sleb128 -28
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 54


 2442 0374 0E       		.uleb128 0xe
 2443 0375 636D6400 		.ascii	"cmd\000"
 2444 0379 01       		.byte	0x1
 2445 037a AB       		.byte	0xab
 2446 037b 29020000 		.4byte	0x229
 2447 037f 02       		.uleb128 0x2
 2448 0380 91       		.byte	0x91
 2449 0381 60       		.sleb128 -32
 2450 0382 0F       		.uleb128 0xf
 2451 0383 7000     		.ascii	"p\000"
 2452 0385 01       		.byte	0x1
 2453 0386 AC       		.byte	0xac
 2454 0387 3A020000 		.4byte	0x23a
 2455 038b 02       		.uleb128 0x2
 2456 038c 91       		.byte	0x91
 2457 038d 74       		.sleb128 -12
 2458 038e 14       		.uleb128 0x14
 2459 038f 66000000 		.4byte	.LBB2
 2460 0393 26000000 		.4byte	.LBE2-.LBB2
 2461 0397 A8030000 		.4byte	0x3a8
 2462 039b 0F       		.uleb128 0xf
 2463 039c 6D00     		.ascii	"m\000"
 2464 039e 01       		.byte	0x1
 2465 039f BA       		.byte	0xba
 2466 03a0 40020000 		.4byte	0x240
 2467 03a4 02       		.uleb128 0x2
 2468 03a5 91       		.byte	0x91
 2469 03a6 70       		.sleb128 -16
 2470 03a7 00       		.byte	0
 2471 03a8 15       		.uleb128 0x15
 2472 03a9 94000000 		.4byte	.LBB3
 2473 03ad 1C000000 		.4byte	.LBE3-.LBB3
 2474 03b1 12       		.uleb128 0x12
 2475 03b2 A1000000 		.4byte	.LASF30
 2476 03b6 01       		.byte	0x1
 2477 03b7 C3       		.byte	0xc3
 2478 03b8 97000000 		.4byte	0x97
 2479 03bc 02       		.uleb128 0x2
 2480 03bd 91       		.byte	0x91
 2481 03be 6E       		.sleb128 -18
 2482 03bf 00       		.byte	0
 2483 03c0 00       		.byte	0
 2484 03c1 0D       		.uleb128 0xd
 2485 03c2 6F030000 		.4byte	.LASF46
 2486 03c6 01       		.byte	0x1
 2487 03c7 CE       		.byte	0xce
 2488 03c8 7E000000 		.4byte	0x7e
 2489 03cc 00000000 		.4byte	.LFB40
 2490 03d0 B8000000 		.4byte	.LFE40-.LFB40
 2491 03d4 01       		.uleb128 0x1
 2492 03d5 9C       		.byte	0x9c
 2493 03d6 13040000 		.4byte	0x413
 2494 03da 13       		.uleb128 0x13
 2495 03db 64020000 		.4byte	.LASF45
 2496 03df 01       		.byte	0x1
 2497 03e0 CE       		.byte	0xce
 2498 03e1 23020000 		.4byte	0x223
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 55


 2499 03e5 02       		.uleb128 0x2
 2500 03e6 91       		.byte	0x91
 2501 03e7 6C       		.sleb128 -20
 2502 03e8 13       		.uleb128 0x13
 2503 03e9 1D020000 		.4byte	.LASF42
 2504 03ed 01       		.byte	0x1
 2505 03ee CE       		.byte	0xce
 2506 03ef 7E000000 		.4byte	0x7e
 2507 03f3 02       		.uleb128 0x2
 2508 03f4 91       		.byte	0x91
 2509 03f5 68       		.sleb128 -24
 2510 03f6 0E       		.uleb128 0xe
 2511 03f7 636D6400 		.ascii	"cmd\000"
 2512 03fb 01       		.byte	0x1
 2513 03fc CE       		.byte	0xce
 2514 03fd 29020000 		.4byte	0x229
 2515 0401 02       		.uleb128 0x2
 2516 0402 91       		.byte	0x91
 2517 0403 64       		.sleb128 -28
 2518 0404 12       		.uleb128 0x12
 2519 0405 27030000 		.4byte	.LASF47
 2520 0409 01       		.byte	0x1
 2521 040a D8       		.byte	0xd8
 2522 040b 7E000000 		.4byte	0x7e
 2523 040f 02       		.uleb128 0x2
 2524 0410 91       		.byte	0x91
 2525 0411 74       		.sleb128 -12
 2526 0412 00       		.byte	0
 2527 0413 0D       		.uleb128 0xd
 2528 0414 B1020000 		.4byte	.LASF48
 2529 0418 01       		.byte	0x1
 2530 0419 EA       		.byte	0xea
 2531 041a 7E000000 		.4byte	0x7e
 2532 041e 00000000 		.4byte	.LFB41
 2533 0422 44000000 		.4byte	.LFE41-.LFB41
 2534 0426 01       		.uleb128 0x1
 2535 0427 9C       		.byte	0x9c
 2536 0428 57040000 		.4byte	0x457
 2537 042c 13       		.uleb128 0x13
 2538 042d 64020000 		.4byte	.LASF45
 2539 0431 01       		.byte	0x1
 2540 0432 EA       		.byte	0xea
 2541 0433 23020000 		.4byte	0x223
 2542 0437 02       		.uleb128 0x2
 2543 0438 91       		.byte	0x91
 2544 0439 74       		.sleb128 -12
 2545 043a 13       		.uleb128 0x13
 2546 043b 1D020000 		.4byte	.LASF42
 2547 043f 01       		.byte	0x1
 2548 0440 EA       		.byte	0xea
 2549 0441 7E000000 		.4byte	0x7e
 2550 0445 02       		.uleb128 0x2
 2551 0446 91       		.byte	0x91
 2552 0447 70       		.sleb128 -16
 2553 0448 0E       		.uleb128 0xe
 2554 0449 636D6400 		.ascii	"cmd\000"
 2555 044d 01       		.byte	0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 56


 2556 044e EA       		.byte	0xea
 2557 044f 29020000 		.4byte	0x229
 2558 0453 02       		.uleb128 0x2
 2559 0454 91       		.byte	0x91
 2560 0455 6C       		.sleb128 -20
 2561 0456 00       		.byte	0
 2562 0457 0D       		.uleb128 0xd
 2563 0458 14020000 		.4byte	.LASF49
 2564 045c 01       		.byte	0x1
 2565 045d F8       		.byte	0xf8
 2566 045e 7E000000 		.4byte	0x7e
 2567 0462 00000000 		.4byte	.LFB42
 2568 0466 CC000000 		.4byte	.LFE42-.LFB42
 2569 046a 01       		.uleb128 0x1
 2570 046b 9C       		.byte	0x9c
 2571 046c BF040000 		.4byte	0x4bf
 2572 0470 13       		.uleb128 0x13
 2573 0471 64020000 		.4byte	.LASF45
 2574 0475 01       		.byte	0x1
 2575 0476 F8       		.byte	0xf8
 2576 0477 23020000 		.4byte	0x223
 2577 047b 02       		.uleb128 0x2
 2578 047c 91       		.byte	0x91
 2579 047d 6C       		.sleb128 -20
 2580 047e 13       		.uleb128 0x13
 2581 047f 1D020000 		.4byte	.LASF42
 2582 0483 01       		.byte	0x1
 2583 0484 F8       		.byte	0xf8
 2584 0485 7E000000 		.4byte	0x7e
 2585 0489 02       		.uleb128 0x2
 2586 048a 91       		.byte	0x91
 2587 048b 68       		.sleb128 -24
 2588 048c 0E       		.uleb128 0xe
 2589 048d 636D6400 		.ascii	"cmd\000"
 2590 0491 01       		.byte	0x1
 2591 0492 F8       		.byte	0xf8
 2592 0493 29020000 		.4byte	0x229
 2593 0497 02       		.uleb128 0x2
 2594 0498 91       		.byte	0x91
 2595 0499 64       		.sleb128 -28
 2596 049a 16       		.uleb128 0x16
 2597 049b 6900     		.ascii	"i\000"
 2598 049d 01       		.byte	0x1
 2599 049e 0801     		.2byte	0x108
 2600 04a0 7E000000 		.4byte	0x7e
 2601 04a4 02       		.uleb128 0x2
 2602 04a5 91       		.byte	0x91
 2603 04a6 70       		.sleb128 -16
 2604 04a7 15       		.uleb128 0x15
 2605 04a8 28000000 		.4byte	.LBB4
 2606 04ac 38000000 		.4byte	.LBE4-.LBB4
 2607 04b0 16       		.uleb128 0x16
 2608 04b1 6900     		.ascii	"i\000"
 2609 04b3 01       		.byte	0x1
 2610 04b4 0001     		.2byte	0x100
 2611 04b6 7E000000 		.4byte	0x7e
 2612 04ba 02       		.uleb128 0x2
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 57


 2613 04bb 91       		.byte	0x91
 2614 04bc 74       		.sleb128 -12
 2615 04bd 00       		.byte	0
 2616 04be 00       		.byte	0
 2617 04bf 17       		.uleb128 0x17
 2618 04c0 3D000000 		.4byte	.LASF50
 2619 04c4 01       		.byte	0x1
 2620 04c5 1701     		.2byte	0x117
 2621 04c7 7E000000 		.4byte	0x7e
 2622 04cb 00000000 		.4byte	.LFB43
 2623 04cf 14010000 		.4byte	.LFE43-.LFB43
 2624 04d3 01       		.uleb128 0x1
 2625 04d4 9C       		.byte	0x9c
 2626 04d5 69050000 		.4byte	0x569
 2627 04d9 18       		.uleb128 0x18
 2628 04da 64020000 		.4byte	.LASF45
 2629 04de 01       		.byte	0x1
 2630 04df 1701     		.2byte	0x117
 2631 04e1 23020000 		.4byte	0x223
 2632 04e5 02       		.uleb128 0x2
 2633 04e6 91       		.byte	0x91
 2634 04e7 54       		.sleb128 -44
 2635 04e8 18       		.uleb128 0x18
 2636 04e9 1D020000 		.4byte	.LASF42
 2637 04ed 01       		.byte	0x1
 2638 04ee 1701     		.2byte	0x117
 2639 04f0 7E000000 		.4byte	0x7e
 2640 04f4 02       		.uleb128 0x2
 2641 04f5 91       		.byte	0x91
 2642 04f6 50       		.sleb128 -48
 2643 04f7 19       		.uleb128 0x19
 2644 04f8 636D6400 		.ascii	"cmd\000"
 2645 04fc 01       		.byte	0x1
 2646 04fd 1701     		.2byte	0x117
 2647 04ff 29020000 		.4byte	0x229
 2648 0503 02       		.uleb128 0x2
 2649 0504 91       		.byte	0x91
 2650 0505 4C       		.sleb128 -52
 2651 0506 1A       		.uleb128 0x1a
 2652 0507 4F000000 		.4byte	.LASF51
 2653 050b 01       		.byte	0x1
 2654 050c 1801     		.2byte	0x118
 2655 050e 7E000000 		.4byte	0x7e
 2656 0512 02       		.uleb128 0x2
 2657 0513 91       		.byte	0x91
 2658 0514 70       		.sleb128 -16
 2659 0515 16       		.uleb128 0x16
 2660 0516 62756600 		.ascii	"buf\000"
 2661 051a 01       		.byte	0x1
 2662 051b 1B01     		.2byte	0x11b
 2663 051d 69050000 		.4byte	0x569
 2664 0521 02       		.uleb128 0x2
 2665 0522 91       		.byte	0x91
 2666 0523 5C       		.sleb128 -36
 2667 0524 1A       		.uleb128 0x1a
 2668 0525 DF020000 		.4byte	.LASF52
 2669 0529 01       		.byte	0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 58


 2670 052a 1C01     		.2byte	0x11c
 2671 052c 7E000000 		.4byte	0x7e
 2672 0530 02       		.uleb128 0x2
 2673 0531 91       		.byte	0x91
 2674 0532 58       		.sleb128 -40
 2675 0533 14       		.uleb128 0x14
 2676 0534 6A000000 		.4byte	.LBB5
 2677 0538 30000000 		.4byte	.LBE5-.LBB5
 2678 053c 4F050000 		.4byte	0x54f
 2679 0540 16       		.uleb128 0x16
 2680 0541 636800   		.ascii	"ch\000"
 2681 0544 01       		.byte	0x1
 2682 0545 2901     		.2byte	0x129
 2683 0547 7E000000 		.4byte	0x7e
 2684 054b 02       		.uleb128 0x2
 2685 054c 91       		.byte	0x91
 2686 054d 6C       		.sleb128 -20
 2687 054e 00       		.byte	0
 2688 054f 15       		.uleb128 0x15
 2689 0550 A6000000 		.4byte	.LBB6
 2690 0554 3C000000 		.4byte	.LBE6-.LBB6
 2691 0558 16       		.uleb128 0x16
 2692 0559 6C656E00 		.ascii	"len\000"
 2693 055d 01       		.byte	0x1
 2694 055e 3501     		.2byte	0x135
 2695 0560 7E000000 		.4byte	0x7e
 2696 0564 02       		.uleb128 0x2
 2697 0565 91       		.byte	0x91
 2698 0566 74       		.sleb128 -12
 2699 0567 00       		.byte	0
 2700 0568 00       		.byte	0
 2701 0569 1B       		.uleb128 0x1b
 2702 056a 8C000000 		.4byte	0x8c
 2703 056e 79050000 		.4byte	0x579
 2704 0572 1C       		.uleb128 0x1c
 2705 0573 C9000000 		.4byte	0xc9
 2706 0577 0F       		.byte	0xf
 2707 0578 00       		.byte	0
 2708 0579 17       		.uleb128 0x17
 2709 057a C7020000 		.4byte	.LASF53
 2710 057e 01       		.byte	0x1
 2711 057f 4501     		.2byte	0x145
 2712 0581 7E000000 		.4byte	0x7e
 2713 0585 00000000 		.4byte	.LFB44
 2714 0589 F0000000 		.4byte	.LFE44-.LFB44
 2715 058d 01       		.uleb128 0x1
 2716 058e 9C       		.byte	0x9c
 2717 058f 0D060000 		.4byte	0x60d
 2718 0593 18       		.uleb128 0x18
 2719 0594 64020000 		.4byte	.LASF45
 2720 0598 01       		.byte	0x1
 2721 0599 4501     		.2byte	0x145
 2722 059b 23020000 		.4byte	0x223
 2723 059f 02       		.uleb128 0x2
 2724 05a0 91       		.byte	0x91
 2725 05a1 64       		.sleb128 -28
 2726 05a2 18       		.uleb128 0x18
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 59


 2727 05a3 1D020000 		.4byte	.LASF42
 2728 05a7 01       		.byte	0x1
 2729 05a8 4501     		.2byte	0x145
 2730 05aa 7E000000 		.4byte	0x7e
 2731 05ae 02       		.uleb128 0x2
 2732 05af 91       		.byte	0x91
 2733 05b0 60       		.sleb128 -32
 2734 05b1 19       		.uleb128 0x19
 2735 05b2 636D6400 		.ascii	"cmd\000"
 2736 05b6 01       		.byte	0x1
 2737 05b7 4501     		.2byte	0x145
 2738 05b9 29020000 		.4byte	0x229
 2739 05bd 02       		.uleb128 0x2
 2740 05be 91       		.byte	0x91
 2741 05bf 5C       		.sleb128 -36
 2742 05c0 16       		.uleb128 0x16
 2743 05c1 6900     		.ascii	"i\000"
 2744 05c3 01       		.byte	0x1
 2745 05c4 4B01     		.2byte	0x14b
 2746 05c6 7E000000 		.4byte	0x7e
 2747 05ca 02       		.uleb128 0x2
 2748 05cb 91       		.byte	0x91
 2749 05cc 74       		.sleb128 -12
 2750 05cd 15       		.uleb128 0x15
 2751 05ce 38000000 		.4byte	.LBB7
 2752 05d2 8C000000 		.4byte	.LBE7-.LBB7
 2753 05d6 1A       		.uleb128 0x1a
 2754 05d7 A1000000 		.4byte	.LASF30
 2755 05db 01       		.byte	0x1
 2756 05dc 4E01     		.2byte	0x14e
 2757 05de 97000000 		.4byte	0x97
 2758 05e2 02       		.uleb128 0x2
 2759 05e3 91       		.byte	0x91
 2760 05e4 6A       		.sleb128 -22
 2761 05e5 1A       		.uleb128 0x1a
 2762 05e6 2B000000 		.4byte	.LASF31
 2763 05ea 01       		.byte	0x1
 2764 05eb 4F01     		.2byte	0x14f
 2765 05ed D0000000 		.4byte	0xd0
 2766 05f1 02       		.uleb128 0x2
 2767 05f2 91       		.byte	0x91
 2768 05f3 70       		.sleb128 -16
 2769 05f4 15       		.uleb128 0x15
 2770 05f5 60000000 		.4byte	.LBB8
 2771 05f9 34000000 		.4byte	.LBE8-.LBB8
 2772 05fd 16       		.uleb128 0x16
 2773 05fe 6D00     		.ascii	"m\000"
 2774 0600 01       		.byte	0x1
 2775 0601 5201     		.2byte	0x152
 2776 0603 40020000 		.4byte	0x240
 2777 0607 02       		.uleb128 0x2
 2778 0608 91       		.byte	0x91
 2779 0609 6C       		.sleb128 -20
 2780 060a 00       		.byte	0
 2781 060b 00       		.byte	0
 2782 060c 00       		.byte	0
 2783 060d 1D       		.uleb128 0x1d
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 60


 2784 060e 69020000 		.4byte	.LASF55
 2785 0612 01       		.byte	0x1
 2786 0613 6701     		.2byte	0x167
 2787 0615 7E000000 		.4byte	0x7e
 2788 0619 00000000 		.4byte	.LFB45
 2789 061d 1C000000 		.4byte	.LFE45-.LFB45
 2790 0621 01       		.uleb128 0x1
 2791 0622 9C       		.byte	0x9c
 2792 0623 1E       		.uleb128 0x1e
 2793 0624 60030000 		.4byte	.LASF54
 2794 0628 01       		.byte	0x1
 2795 0629 6D01     		.2byte	0x16d
 2796 062b 7E000000 		.4byte	0x7e
 2797 062f 00000000 		.4byte	.LFB46
 2798 0633 2C000000 		.4byte	.LFE46-.LFB46
 2799 0637 01       		.uleb128 0x1
 2800 0638 9C       		.byte	0x9c
 2801 0639 4B060000 		.4byte	0x64b
 2802 063d 16       		.uleb128 0x16
 2803 063e 7600     		.ascii	"v\000"
 2804 0640 01       		.byte	0x1
 2805 0641 6E01     		.2byte	0x16e
 2806 0643 97000000 		.4byte	0x97
 2807 0647 02       		.uleb128 0x2
 2808 0648 91       		.byte	0x91
 2809 0649 6E       		.sleb128 -18
 2810 064a 00       		.byte	0
 2811 064b 1D       		.uleb128 0x1d
 2812 064c EF020000 		.4byte	.LASF56
 2813 0650 01       		.byte	0x1
 2814 0651 7601     		.2byte	0x176
 2815 0653 7E000000 		.4byte	0x7e
 2816 0657 00000000 		.4byte	.LFB47
 2817 065b 10000000 		.4byte	.LFE47-.LFB47
 2818 065f 01       		.uleb128 0x1
 2819 0660 9C       		.byte	0x9c
 2820 0661 1D       		.uleb128 0x1d
 2821 0662 08000000 		.4byte	.LASF57
 2822 0666 01       		.byte	0x1
 2823 0667 7A01     		.2byte	0x17a
 2824 0669 7E000000 		.4byte	0x7e
 2825 066d 00000000 		.4byte	.LFB48
 2826 0671 10000000 		.4byte	.LFE48-.LFB48
 2827 0675 01       		.uleb128 0x1
 2828 0676 9C       		.byte	0x9c
 2829 0677 1D       		.uleb128 0x1d
 2830 0678 BC020000 		.4byte	.LASF58
 2831 067c 01       		.byte	0x1
 2832 067d 7E01     		.2byte	0x17e
 2833 067f 7E000000 		.4byte	0x7e
 2834 0683 00000000 		.4byte	.LFB49
 2835 0687 10000000 		.4byte	.LFE49-.LFB49
 2836 068b 01       		.uleb128 0x1
 2837 068c 9C       		.byte	0x9c
 2838 068d 1D       		.uleb128 0x1d
 2839 068e F4010000 		.4byte	.LASF59
 2840 0692 01       		.byte	0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 61


 2841 0693 8201     		.2byte	0x182
 2842 0695 7E000000 		.4byte	0x7e
 2843 0699 00000000 		.4byte	.LFB50
 2844 069d 10000000 		.4byte	.LFE50-.LFB50
 2845 06a1 01       		.uleb128 0x1
 2846 06a2 9C       		.byte	0x9c
 2847 06a3 1F       		.uleb128 0x1f
 2848 06a4 D6000000 		.4byte	.LASF28
 2849 06a8 04       		.byte	0x4
 2850 06a9 1D       		.byte	0x1d
 2851 06aa E1000000 		.4byte	0xe1
 2852 06ae 1B       		.uleb128 0x1b
 2853 06af D0000000 		.4byte	0xd0
 2854 06b3 BE060000 		.4byte	0x6be
 2855 06b7 1C       		.uleb128 0x1c
 2856 06b8 C9000000 		.4byte	0xc9
 2857 06bc 13       		.byte	0x13
 2858 06bd 00       		.byte	0
 2859 06be 20       		.uleb128 0x20
 2860 06bf 4E010000 		.4byte	.LASF60
 2861 06c3 01       		.byte	0x1
 2862 06c4 19       		.byte	0x19
 2863 06c5 AE060000 		.4byte	0x6ae
 2864 06c9 05       		.uleb128 0x5
 2865 06ca 03       		.byte	0x3
 2866 06cb 00000000 		.4byte	toks
 2867 06cf 20       		.uleb128 0x20
 2868 06d0 33000000 		.4byte	.LASF61
 2869 06d4 01       		.byte	0x1
 2870 06d5 1A       		.byte	0x1a
 2871 06d6 7E000000 		.4byte	0x7e
 2872 06da 05       		.uleb128 0x5
 2873 06db 03       		.byte	0x3
 2874 06dc 00000000 		.4byte	tok_count
 2875 06e0 1B       		.uleb128 0x1b
 2876 06e1 2F020000 		.4byte	0x22f
 2877 06e5 F0060000 		.4byte	0x6f0
 2878 06e9 1C       		.uleb128 0x1c
 2879 06ea C9000000 		.4byte	0xc9
 2880 06ee 11       		.byte	0x11
 2881 06ef 00       		.byte	0
 2882 06f0 21       		.uleb128 0x21
 2883 06f1 BB000000 		.4byte	.LASF62
 2884 06f5 01       		.byte	0x1
 2885 06f6 B601     		.2byte	0x1b6
 2886 06f8 02070000 		.4byte	0x702
 2887 06fc 05       		.uleb128 0x5
 2888 06fd 03       		.byte	0x3
 2889 06fe 00000000 		.4byte	commands
 2890 0702 06       		.uleb128 0x6
 2891 0703 E0060000 		.4byte	0x6e0
 2892 0707 1B       		.uleb128 0x1b
 2893 0708 D6000000 		.4byte	0xd6
 2894 070c 17070000 		.4byte	0x717
 2895 0710 1C       		.uleb128 0x1c
 2896 0711 C9000000 		.4byte	0xc9
 2897 0715 01       		.byte	0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 62


 2898 0716 00       		.byte	0
 2899 0717 21       		.uleb128 0x21
 2900 0718 78030000 		.4byte	.LASF63
 2901 071c 01       		.byte	0x1
 2902 071d 9401     		.2byte	0x194
 2903 071f 07070000 		.4byte	0x707
 2904 0723 05       		.uleb128 0x5
 2905 0724 03       		.byte	0x3
 2906 0725 00000000 		.4byte	no_usage_args
 2907 0729 1B       		.uleb128 0x1b
 2908 072a 46020000 		.4byte	0x246
 2909 072e 39070000 		.4byte	0x739
 2910 0732 1C       		.uleb128 0x1c
 2911 0733 C9000000 		.4byte	0xc9
 2912 0737 03       		.byte	0x3
 2913 0738 00       		.byte	0
 2914 0739 21       		.uleb128 0x21
 2915 073a 2C030000 		.4byte	.LASF64
 2916 073e 01       		.byte	0x1
 2917 073f 9A01     		.2byte	0x19a
 2918 0741 4B070000 		.4byte	0x74b
 2919 0745 05       		.uleb128 0x5
 2920 0746 03       		.byte	0x3
 2921 0747 00000000 		.4byte	auto_means
 2922 074b 06       		.uleb128 0x6
 2923 074c 29070000 		.4byte	0x729
 2924 0750 1B       		.uleb128 0x1b
 2925 0751 46020000 		.4byte	0x246
 2926 0755 60070000 		.4byte	0x760
 2927 0759 1C       		.uleb128 0x1c
 2928 075a C9000000 		.4byte	0xc9
 2929 075e 02       		.byte	0x2
 2930 075f 00       		.byte	0
 2931 0760 21       		.uleb128 0x21
 2932 0761 11010000 		.4byte	.LASF65
 2933 0765 01       		.byte	0x1
 2934 0766 A101     		.2byte	0x1a1
 2935 0768 72070000 		.4byte	0x772
 2936 076c 05       		.uleb128 0x5
 2937 076d 03       		.byte	0x3
 2938 076e 00000000 		.4byte	enable_disable_means
 2939 0772 06       		.uleb128 0x6
 2940 0773 50070000 		.4byte	0x750
 2941 0777 1B       		.uleb128 0x1b
 2942 0778 46020000 		.4byte	0x246
 2943 077c 87070000 		.4byte	0x787
 2944 0780 1C       		.uleb128 0x1c
 2945 0781 C9000000 		.4byte	0xc9
 2946 0785 04       		.byte	0x4
 2947 0786 00       		.byte	0
 2948 0787 21       		.uleb128 0x21
 2949 0788 96020000 		.4byte	.LASF66
 2950 078c 01       		.byte	0x1
 2951 078d A701     		.2byte	0x1a7
 2952 078f 99070000 		.4byte	0x799
 2953 0793 05       		.uleb128 0x5
 2954 0794 03       		.byte	0x3
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 63


 2955 0795 00000000 		.4byte	eos_means
 2956 0799 06       		.uleb128 0x6
 2957 079a 77070000 		.4byte	0x777
 2958 079e 21       		.uleb128 0x21
 2959 079f 4B030000 		.4byte	.LASF67
 2960 07a3 01       		.byte	0x1
 2961 07a4 B001     		.2byte	0x1b0
 2962 07a6 07070000 		.4byte	0x707
 2963 07aa 05       		.uleb128 0x5
 2964 07ab 03       		.byte	0x3
 2965 07ac 00000000 		.4byte	enable_disable_usage
 2966 07b0 00       		.byte	0
 2967              		.section	.debug_abbrev,"",%progbits
 2968              	.Ldebug_abbrev0:
 2969 0000 01       		.uleb128 0x1
 2970 0001 11       		.uleb128 0x11
 2971 0002 01       		.byte	0x1
 2972 0003 25       		.uleb128 0x25
 2973 0004 0E       		.uleb128 0xe
 2974 0005 13       		.uleb128 0x13
 2975 0006 0B       		.uleb128 0xb
 2976 0007 03       		.uleb128 0x3
 2977 0008 0E       		.uleb128 0xe
 2978 0009 1B       		.uleb128 0x1b
 2979 000a 0E       		.uleb128 0xe
 2980 000b 55       		.uleb128 0x55
 2981 000c 17       		.uleb128 0x17
 2982 000d 11       		.uleb128 0x11
 2983 000e 01       		.uleb128 0x1
 2984 000f 10       		.uleb128 0x10
 2985 0010 17       		.uleb128 0x17
 2986 0011 00       		.byte	0
 2987 0012 00       		.byte	0
 2988 0013 02       		.uleb128 0x2
 2989 0014 24       		.uleb128 0x24
 2990 0015 00       		.byte	0
 2991 0016 0B       		.uleb128 0xb
 2992 0017 0B       		.uleb128 0xb
 2993 0018 3E       		.uleb128 0x3e
 2994 0019 0B       		.uleb128 0xb
 2995 001a 03       		.uleb128 0x3
 2996 001b 0E       		.uleb128 0xe
 2997 001c 00       		.byte	0
 2998 001d 00       		.byte	0
 2999 001e 03       		.uleb128 0x3
 3000 001f 16       		.uleb128 0x16
 3001 0020 00       		.byte	0
 3002 0021 03       		.uleb128 0x3
 3003 0022 0E       		.uleb128 0xe
 3004 0023 3A       		.uleb128 0x3a
 3005 0024 0B       		.uleb128 0xb
 3006 0025 3B       		.uleb128 0x3b
 3007 0026 0B       		.uleb128 0xb
 3008 0027 49       		.uleb128 0x49
 3009 0028 13       		.uleb128 0x13
 3010 0029 00       		.byte	0
 3011 002a 00       		.byte	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 64


 3012 002b 04       		.uleb128 0x4
 3013 002c 24       		.uleb128 0x24
 3014 002d 00       		.byte	0
 3015 002e 0B       		.uleb128 0xb
 3016 002f 0B       		.uleb128 0xb
 3017 0030 3E       		.uleb128 0x3e
 3018 0031 0B       		.uleb128 0xb
 3019 0032 03       		.uleb128 0x3
 3020 0033 08       		.uleb128 0x8
 3021 0034 00       		.byte	0
 3022 0035 00       		.byte	0
 3023 0036 05       		.uleb128 0x5
 3024 0037 0F       		.uleb128 0xf
 3025 0038 00       		.byte	0
 3026 0039 0B       		.uleb128 0xb
 3027 003a 0B       		.uleb128 0xb
 3028 003b 49       		.uleb128 0x49
 3029 003c 13       		.uleb128 0x13
 3030 003d 00       		.byte	0
 3031 003e 00       		.byte	0
 3032 003f 06       		.uleb128 0x6
 3033 0040 26       		.uleb128 0x26
 3034 0041 00       		.byte	0
 3035 0042 49       		.uleb128 0x49
 3036 0043 13       		.uleb128 0x13
 3037 0044 00       		.byte	0
 3038 0045 00       		.byte	0
 3039 0046 07       		.uleb128 0x7
 3040 0047 13       		.uleb128 0x13
 3041 0048 01       		.byte	0x1
 3042 0049 03       		.uleb128 0x3
 3043 004a 0E       		.uleb128 0xe
 3044 004b 0B       		.uleb128 0xb
 3045 004c 0B       		.uleb128 0xb
 3046 004d 3A       		.uleb128 0x3a
 3047 004e 0B       		.uleb128 0xb
 3048 004f 3B       		.uleb128 0x3b
 3049 0050 0B       		.uleb128 0xb
 3050 0051 01       		.uleb128 0x1
 3051 0052 13       		.uleb128 0x13
 3052 0053 00       		.byte	0
 3053 0054 00       		.byte	0
 3054 0055 08       		.uleb128 0x8
 3055 0056 0D       		.uleb128 0xd
 3056 0057 00       		.byte	0
 3057 0058 03       		.uleb128 0x3
 3058 0059 0E       		.uleb128 0xe
 3059 005a 3A       		.uleb128 0x3a
 3060 005b 0B       		.uleb128 0xb
 3061 005c 3B       		.uleb128 0x3b
 3062 005d 0B       		.uleb128 0xb
 3063 005e 49       		.uleb128 0x49
 3064 005f 13       		.uleb128 0x13
 3065 0060 38       		.uleb128 0x38
 3066 0061 0B       		.uleb128 0xb
 3067 0062 00       		.byte	0
 3068 0063 00       		.byte	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 65


 3069 0064 09       		.uleb128 0x9
 3070 0065 0D       		.uleb128 0xd
 3071 0066 00       		.byte	0
 3072 0067 03       		.uleb128 0x3
 3073 0068 08       		.uleb128 0x8
 3074 0069 3A       		.uleb128 0x3a
 3075 006a 0B       		.uleb128 0xb
 3076 006b 3B       		.uleb128 0x3b
 3077 006c 0B       		.uleb128 0xb
 3078 006d 49       		.uleb128 0x49
 3079 006e 13       		.uleb128 0x13
 3080 006f 38       		.uleb128 0x38
 3081 0070 0B       		.uleb128 0xb
 3082 0071 00       		.byte	0
 3083 0072 00       		.byte	0
 3084 0073 0A       		.uleb128 0xa
 3085 0074 13       		.uleb128 0x13
 3086 0075 01       		.byte	0x1
 3087 0076 03       		.uleb128 0x3
 3088 0077 08       		.uleb128 0x8
 3089 0078 0B       		.uleb128 0xb
 3090 0079 0B       		.uleb128 0xb
 3091 007a 3A       		.uleb128 0x3a
 3092 007b 0B       		.uleb128 0xb
 3093 007c 3B       		.uleb128 0x3b
 3094 007d 0B       		.uleb128 0xb
 3095 007e 01       		.uleb128 0x1
 3096 007f 13       		.uleb128 0x13
 3097 0080 00       		.byte	0
 3098 0081 00       		.byte	0
 3099 0082 0B       		.uleb128 0xb
 3100 0083 15       		.uleb128 0x15
 3101 0084 01       		.byte	0x1
 3102 0085 27       		.uleb128 0x27
 3103 0086 19       		.uleb128 0x19
 3104 0087 49       		.uleb128 0x49
 3105 0088 13       		.uleb128 0x13
 3106 0089 01       		.uleb128 0x1
 3107 008a 13       		.uleb128 0x13
 3108 008b 00       		.byte	0
 3109 008c 00       		.byte	0
 3110 008d 0C       		.uleb128 0xc
 3111 008e 05       		.uleb128 0x5
 3112 008f 00       		.byte	0
 3113 0090 49       		.uleb128 0x49
 3114 0091 13       		.uleb128 0x13
 3115 0092 00       		.byte	0
 3116 0093 00       		.byte	0
 3117 0094 0D       		.uleb128 0xd
 3118 0095 2E       		.uleb128 0x2e
 3119 0096 01       		.byte	0x1
 3120 0097 3F       		.uleb128 0x3f
 3121 0098 19       		.uleb128 0x19
 3122 0099 03       		.uleb128 0x3
 3123 009a 0E       		.uleb128 0xe
 3124 009b 3A       		.uleb128 0x3a
 3125 009c 0B       		.uleb128 0xb
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 66


 3126 009d 3B       		.uleb128 0x3b
 3127 009e 0B       		.uleb128 0xb
 3128 009f 27       		.uleb128 0x27
 3129 00a0 19       		.uleb128 0x19
 3130 00a1 49       		.uleb128 0x49
 3131 00a2 13       		.uleb128 0x13
 3132 00a3 11       		.uleb128 0x11
 3133 00a4 01       		.uleb128 0x1
 3134 00a5 12       		.uleb128 0x12
 3135 00a6 06       		.uleb128 0x6
 3136 00a7 40       		.uleb128 0x40
 3137 00a8 18       		.uleb128 0x18
 3138 00a9 9642     		.uleb128 0x2116
 3139 00ab 19       		.uleb128 0x19
 3140 00ac 01       		.uleb128 0x1
 3141 00ad 13       		.uleb128 0x13
 3142 00ae 00       		.byte	0
 3143 00af 00       		.byte	0
 3144 00b0 0E       		.uleb128 0xe
 3145 00b1 05       		.uleb128 0x5
 3146 00b2 00       		.byte	0
 3147 00b3 03       		.uleb128 0x3
 3148 00b4 08       		.uleb128 0x8
 3149 00b5 3A       		.uleb128 0x3a
 3150 00b6 0B       		.uleb128 0xb
 3151 00b7 3B       		.uleb128 0x3b
 3152 00b8 0B       		.uleb128 0xb
 3153 00b9 49       		.uleb128 0x49
 3154 00ba 13       		.uleb128 0x13
 3155 00bb 02       		.uleb128 0x2
 3156 00bc 18       		.uleb128 0x18
 3157 00bd 00       		.byte	0
 3158 00be 00       		.byte	0
 3159 00bf 0F       		.uleb128 0xf
 3160 00c0 34       		.uleb128 0x34
 3161 00c1 00       		.byte	0
 3162 00c2 03       		.uleb128 0x3
 3163 00c3 08       		.uleb128 0x8
 3164 00c4 3A       		.uleb128 0x3a
 3165 00c5 0B       		.uleb128 0xb
 3166 00c6 3B       		.uleb128 0x3b
 3167 00c7 0B       		.uleb128 0xb
 3168 00c8 49       		.uleb128 0x49
 3169 00c9 13       		.uleb128 0x13
 3170 00ca 02       		.uleb128 0x2
 3171 00cb 18       		.uleb128 0x18
 3172 00cc 00       		.byte	0
 3173 00cd 00       		.byte	0
 3174 00ce 10       		.uleb128 0x10
 3175 00cf 2E       		.uleb128 0x2e
 3176 00d0 01       		.byte	0x1
 3177 00d1 3F       		.uleb128 0x3f
 3178 00d2 19       		.uleb128 0x19
 3179 00d3 03       		.uleb128 0x3
 3180 00d4 0E       		.uleb128 0xe
 3181 00d5 3A       		.uleb128 0x3a
 3182 00d6 0B       		.uleb128 0xb
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 67


 3183 00d7 3B       		.uleb128 0x3b
 3184 00d8 0B       		.uleb128 0xb
 3185 00d9 27       		.uleb128 0x27
 3186 00da 19       		.uleb128 0x19
 3187 00db 49       		.uleb128 0x49
 3188 00dc 13       		.uleb128 0x13
 3189 00dd 11       		.uleb128 0x11
 3190 00de 01       		.uleb128 0x1
 3191 00df 12       		.uleb128 0x12
 3192 00e0 06       		.uleb128 0x6
 3193 00e1 40       		.uleb128 0x40
 3194 00e2 18       		.uleb128 0x18
 3195 00e3 9742     		.uleb128 0x2117
 3196 00e5 19       		.uleb128 0x19
 3197 00e6 01       		.uleb128 0x1
 3198 00e7 13       		.uleb128 0x13
 3199 00e8 00       		.byte	0
 3200 00e9 00       		.byte	0
 3201 00ea 11       		.uleb128 0x11
 3202 00eb 2E       		.uleb128 0x2e
 3203 00ec 01       		.byte	0x1
 3204 00ed 3F       		.uleb128 0x3f
 3205 00ee 19       		.uleb128 0x19
 3206 00ef 03       		.uleb128 0x3
 3207 00f0 0E       		.uleb128 0xe
 3208 00f1 3A       		.uleb128 0x3a
 3209 00f2 0B       		.uleb128 0xb
 3210 00f3 3B       		.uleb128 0x3b
 3211 00f4 0B       		.uleb128 0xb
 3212 00f5 27       		.uleb128 0x27
 3213 00f6 19       		.uleb128 0x19
 3214 00f7 11       		.uleb128 0x11
 3215 00f8 01       		.uleb128 0x1
 3216 00f9 12       		.uleb128 0x12
 3217 00fa 06       		.uleb128 0x6
 3218 00fb 40       		.uleb128 0x40
 3219 00fc 18       		.uleb128 0x18
 3220 00fd 9642     		.uleb128 0x2116
 3221 00ff 19       		.uleb128 0x19
 3222 0100 01       		.uleb128 0x1
 3223 0101 13       		.uleb128 0x13
 3224 0102 00       		.byte	0
 3225 0103 00       		.byte	0
 3226 0104 12       		.uleb128 0x12
 3227 0105 34       		.uleb128 0x34
 3228 0106 00       		.byte	0
 3229 0107 03       		.uleb128 0x3
 3230 0108 0E       		.uleb128 0xe
 3231 0109 3A       		.uleb128 0x3a
 3232 010a 0B       		.uleb128 0xb
 3233 010b 3B       		.uleb128 0x3b
 3234 010c 0B       		.uleb128 0xb
 3235 010d 49       		.uleb128 0x49
 3236 010e 13       		.uleb128 0x13
 3237 010f 02       		.uleb128 0x2
 3238 0110 18       		.uleb128 0x18
 3239 0111 00       		.byte	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 68


 3240 0112 00       		.byte	0
 3241 0113 13       		.uleb128 0x13
 3242 0114 05       		.uleb128 0x5
 3243 0115 00       		.byte	0
 3244 0116 03       		.uleb128 0x3
 3245 0117 0E       		.uleb128 0xe
 3246 0118 3A       		.uleb128 0x3a
 3247 0119 0B       		.uleb128 0xb
 3248 011a 3B       		.uleb128 0x3b
 3249 011b 0B       		.uleb128 0xb
 3250 011c 49       		.uleb128 0x49
 3251 011d 13       		.uleb128 0x13
 3252 011e 02       		.uleb128 0x2
 3253 011f 18       		.uleb128 0x18
 3254 0120 00       		.byte	0
 3255 0121 00       		.byte	0
 3256 0122 14       		.uleb128 0x14
 3257 0123 0B       		.uleb128 0xb
 3258 0124 01       		.byte	0x1
 3259 0125 11       		.uleb128 0x11
 3260 0126 01       		.uleb128 0x1
 3261 0127 12       		.uleb128 0x12
 3262 0128 06       		.uleb128 0x6
 3263 0129 01       		.uleb128 0x1
 3264 012a 13       		.uleb128 0x13
 3265 012b 00       		.byte	0
 3266 012c 00       		.byte	0
 3267 012d 15       		.uleb128 0x15
 3268 012e 0B       		.uleb128 0xb
 3269 012f 01       		.byte	0x1
 3270 0130 11       		.uleb128 0x11
 3271 0131 01       		.uleb128 0x1
 3272 0132 12       		.uleb128 0x12
 3273 0133 06       		.uleb128 0x6
 3274 0134 00       		.byte	0
 3275 0135 00       		.byte	0
 3276 0136 16       		.uleb128 0x16
 3277 0137 34       		.uleb128 0x34
 3278 0138 00       		.byte	0
 3279 0139 03       		.uleb128 0x3
 3280 013a 08       		.uleb128 0x8
 3281 013b 3A       		.uleb128 0x3a
 3282 013c 0B       		.uleb128 0xb
 3283 013d 3B       		.uleb128 0x3b
 3284 013e 05       		.uleb128 0x5
 3285 013f 49       		.uleb128 0x49
 3286 0140 13       		.uleb128 0x13
 3287 0141 02       		.uleb128 0x2
 3288 0142 18       		.uleb128 0x18
 3289 0143 00       		.byte	0
 3290 0144 00       		.byte	0
 3291 0145 17       		.uleb128 0x17
 3292 0146 2E       		.uleb128 0x2e
 3293 0147 01       		.byte	0x1
 3294 0148 3F       		.uleb128 0x3f
 3295 0149 19       		.uleb128 0x19
 3296 014a 03       		.uleb128 0x3
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 69


 3297 014b 0E       		.uleb128 0xe
 3298 014c 3A       		.uleb128 0x3a
 3299 014d 0B       		.uleb128 0xb
 3300 014e 3B       		.uleb128 0x3b
 3301 014f 05       		.uleb128 0x5
 3302 0150 27       		.uleb128 0x27
 3303 0151 19       		.uleb128 0x19
 3304 0152 49       		.uleb128 0x49
 3305 0153 13       		.uleb128 0x13
 3306 0154 11       		.uleb128 0x11
 3307 0155 01       		.uleb128 0x1
 3308 0156 12       		.uleb128 0x12
 3309 0157 06       		.uleb128 0x6
 3310 0158 40       		.uleb128 0x40
 3311 0159 18       		.uleb128 0x18
 3312 015a 9642     		.uleb128 0x2116
 3313 015c 19       		.uleb128 0x19
 3314 015d 01       		.uleb128 0x1
 3315 015e 13       		.uleb128 0x13
 3316 015f 00       		.byte	0
 3317 0160 00       		.byte	0
 3318 0161 18       		.uleb128 0x18
 3319 0162 05       		.uleb128 0x5
 3320 0163 00       		.byte	0
 3321 0164 03       		.uleb128 0x3
 3322 0165 0E       		.uleb128 0xe
 3323 0166 3A       		.uleb128 0x3a
 3324 0167 0B       		.uleb128 0xb
 3325 0168 3B       		.uleb128 0x3b
 3326 0169 05       		.uleb128 0x5
 3327 016a 49       		.uleb128 0x49
 3328 016b 13       		.uleb128 0x13
 3329 016c 02       		.uleb128 0x2
 3330 016d 18       		.uleb128 0x18
 3331 016e 00       		.byte	0
 3332 016f 00       		.byte	0
 3333 0170 19       		.uleb128 0x19
 3334 0171 05       		.uleb128 0x5
 3335 0172 00       		.byte	0
 3336 0173 03       		.uleb128 0x3
 3337 0174 08       		.uleb128 0x8
 3338 0175 3A       		.uleb128 0x3a
 3339 0176 0B       		.uleb128 0xb
 3340 0177 3B       		.uleb128 0x3b
 3341 0178 05       		.uleb128 0x5
 3342 0179 49       		.uleb128 0x49
 3343 017a 13       		.uleb128 0x13
 3344 017b 02       		.uleb128 0x2
 3345 017c 18       		.uleb128 0x18
 3346 017d 00       		.byte	0
 3347 017e 00       		.byte	0
 3348 017f 1A       		.uleb128 0x1a
 3349 0180 34       		.uleb128 0x34
 3350 0181 00       		.byte	0
 3351 0182 03       		.uleb128 0x3
 3352 0183 0E       		.uleb128 0xe
 3353 0184 3A       		.uleb128 0x3a
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 70


 3354 0185 0B       		.uleb128 0xb
 3355 0186 3B       		.uleb128 0x3b
 3356 0187 05       		.uleb128 0x5
 3357 0188 49       		.uleb128 0x49
 3358 0189 13       		.uleb128 0x13
 3359 018a 02       		.uleb128 0x2
 3360 018b 18       		.uleb128 0x18
 3361 018c 00       		.byte	0
 3362 018d 00       		.byte	0
 3363 018e 1B       		.uleb128 0x1b
 3364 018f 01       		.uleb128 0x1
 3365 0190 01       		.byte	0x1
 3366 0191 49       		.uleb128 0x49
 3367 0192 13       		.uleb128 0x13
 3368 0193 01       		.uleb128 0x1
 3369 0194 13       		.uleb128 0x13
 3370 0195 00       		.byte	0
 3371 0196 00       		.byte	0
 3372 0197 1C       		.uleb128 0x1c
 3373 0198 21       		.uleb128 0x21
 3374 0199 00       		.byte	0
 3375 019a 49       		.uleb128 0x49
 3376 019b 13       		.uleb128 0x13
 3377 019c 2F       		.uleb128 0x2f
 3378 019d 0B       		.uleb128 0xb
 3379 019e 00       		.byte	0
 3380 019f 00       		.byte	0
 3381 01a0 1D       		.uleb128 0x1d
 3382 01a1 2E       		.uleb128 0x2e
 3383 01a2 00       		.byte	0
 3384 01a3 3F       		.uleb128 0x3f
 3385 01a4 19       		.uleb128 0x19
 3386 01a5 03       		.uleb128 0x3
 3387 01a6 0E       		.uleb128 0xe
 3388 01a7 3A       		.uleb128 0x3a
 3389 01a8 0B       		.uleb128 0xb
 3390 01a9 3B       		.uleb128 0x3b
 3391 01aa 05       		.uleb128 0x5
 3392 01ab 49       		.uleb128 0x49
 3393 01ac 13       		.uleb128 0x13
 3394 01ad 11       		.uleb128 0x11
 3395 01ae 01       		.uleb128 0x1
 3396 01af 12       		.uleb128 0x12
 3397 01b0 06       		.uleb128 0x6
 3398 01b1 40       		.uleb128 0x40
 3399 01b2 18       		.uleb128 0x18
 3400 01b3 9642     		.uleb128 0x2116
 3401 01b5 19       		.uleb128 0x19
 3402 01b6 00       		.byte	0
 3403 01b7 00       		.byte	0
 3404 01b8 1E       		.uleb128 0x1e
 3405 01b9 2E       		.uleb128 0x2e
 3406 01ba 01       		.byte	0x1
 3407 01bb 3F       		.uleb128 0x3f
 3408 01bc 19       		.uleb128 0x19
 3409 01bd 03       		.uleb128 0x3
 3410 01be 0E       		.uleb128 0xe
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 71


 3411 01bf 3A       		.uleb128 0x3a
 3412 01c0 0B       		.uleb128 0xb
 3413 01c1 3B       		.uleb128 0x3b
 3414 01c2 05       		.uleb128 0x5
 3415 01c3 49       		.uleb128 0x49
 3416 01c4 13       		.uleb128 0x13
 3417 01c5 11       		.uleb128 0x11
 3418 01c6 01       		.uleb128 0x1
 3419 01c7 12       		.uleb128 0x12
 3420 01c8 06       		.uleb128 0x6
 3421 01c9 40       		.uleb128 0x40
 3422 01ca 18       		.uleb128 0x18
 3423 01cb 9642     		.uleb128 0x2116
 3424 01cd 19       		.uleb128 0x19
 3425 01ce 01       		.uleb128 0x1
 3426 01cf 13       		.uleb128 0x13
 3427 01d0 00       		.byte	0
 3428 01d1 00       		.byte	0
 3429 01d2 1F       		.uleb128 0x1f
 3430 01d3 34       		.uleb128 0x34
 3431 01d4 00       		.byte	0
 3432 01d5 03       		.uleb128 0x3
 3433 01d6 0E       		.uleb128 0xe
 3434 01d7 3A       		.uleb128 0x3a
 3435 01d8 0B       		.uleb128 0xb
 3436 01d9 3B       		.uleb128 0x3b
 3437 01da 0B       		.uleb128 0xb
 3438 01db 49       		.uleb128 0x49
 3439 01dc 13       		.uleb128 0x13
 3440 01dd 3F       		.uleb128 0x3f
 3441 01de 19       		.uleb128 0x19
 3442 01df 3C       		.uleb128 0x3c
 3443 01e0 19       		.uleb128 0x19
 3444 01e1 00       		.byte	0
 3445 01e2 00       		.byte	0
 3446 01e3 20       		.uleb128 0x20
 3447 01e4 34       		.uleb128 0x34
 3448 01e5 00       		.byte	0
 3449 01e6 03       		.uleb128 0x3
 3450 01e7 0E       		.uleb128 0xe
 3451 01e8 3A       		.uleb128 0x3a
 3452 01e9 0B       		.uleb128 0xb
 3453 01ea 3B       		.uleb128 0x3b
 3454 01eb 0B       		.uleb128 0xb
 3455 01ec 49       		.uleb128 0x49
 3456 01ed 13       		.uleb128 0x13
 3457 01ee 3F       		.uleb128 0x3f
 3458 01ef 19       		.uleb128 0x19
 3459 01f0 02       		.uleb128 0x2
 3460 01f1 18       		.uleb128 0x18
 3461 01f2 00       		.byte	0
 3462 01f3 00       		.byte	0
 3463 01f4 21       		.uleb128 0x21
 3464 01f5 34       		.uleb128 0x34
 3465 01f6 00       		.byte	0
 3466 01f7 03       		.uleb128 0x3
 3467 01f8 0E       		.uleb128 0xe
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 72


 3468 01f9 3A       		.uleb128 0x3a
 3469 01fa 0B       		.uleb128 0xb
 3470 01fb 3B       		.uleb128 0x3b
 3471 01fc 05       		.uleb128 0x5
 3472 01fd 49       		.uleb128 0x49
 3473 01fe 13       		.uleb128 0x13
 3474 01ff 3F       		.uleb128 0x3f
 3475 0200 19       		.uleb128 0x19
 3476 0201 02       		.uleb128 0x2
 3477 0202 18       		.uleb128 0x18
 3478 0203 00       		.byte	0
 3479 0204 00       		.byte	0
 3480 0205 00       		.byte	0
 3481              		.section	.debug_aranges,"",%progbits
 3482 0000 94000000 		.4byte	0x94
 3483 0004 0200     		.2byte	0x2
 3484 0006 00000000 		.4byte	.Ldebug_info0
 3485 000a 04       		.byte	0x4
 3486 000b 00       		.byte	0
 3487 000c 0000     		.2byte	0
 3488 000e 0000     		.2byte	0
 3489 0010 00000000 		.4byte	.LFB35
 3490 0014 DC000000 		.4byte	.LFE35-.LFB35
 3491 0018 00000000 		.4byte	.LFB36
 3492 001c 40000000 		.4byte	.LFE36-.LFB36
 3493 0020 00000000 		.4byte	.LFB37
 3494 0024 3C000000 		.4byte	.LFE37-.LFB37
 3495 0028 00000000 		.4byte	.LFB38
 3496 002c 88000000 		.4byte	.LFE38-.LFB38
 3497 0030 00000000 		.4byte	.LFB39
 3498 0034 D4000000 		.4byte	.LFE39-.LFB39
 3499 0038 00000000 		.4byte	.LFB40
 3500 003c B8000000 		.4byte	.LFE40-.LFB40
 3501 0040 00000000 		.4byte	.LFB41
 3502 0044 44000000 		.4byte	.LFE41-.LFB41
 3503 0048 00000000 		.4byte	.LFB42
 3504 004c CC000000 		.4byte	.LFE42-.LFB42
 3505 0050 00000000 		.4byte	.LFB43
 3506 0054 14010000 		.4byte	.LFE43-.LFB43
 3507 0058 00000000 		.4byte	.LFB44
 3508 005c F0000000 		.4byte	.LFE44-.LFB44
 3509 0060 00000000 		.4byte	.LFB45
 3510 0064 1C000000 		.4byte	.LFE45-.LFB45
 3511 0068 00000000 		.4byte	.LFB46
 3512 006c 2C000000 		.4byte	.LFE46-.LFB46
 3513 0070 00000000 		.4byte	.LFB47
 3514 0074 10000000 		.4byte	.LFE47-.LFB47
 3515 0078 00000000 		.4byte	.LFB48
 3516 007c 10000000 		.4byte	.LFE48-.LFB48
 3517 0080 00000000 		.4byte	.LFB49
 3518 0084 10000000 		.4byte	.LFE49-.LFB49
 3519 0088 00000000 		.4byte	.LFB50
 3520 008c 10000000 		.4byte	.LFE50-.LFB50
 3521 0090 00000000 		.4byte	0
 3522 0094 00000000 		.4byte	0
 3523              		.section	.debug_ranges,"",%progbits
 3524              	.Ldebug_ranges0:
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 73


 3525 0000 00000000 		.4byte	.LFB35
 3526 0004 DC000000 		.4byte	.LFE35
 3527 0008 00000000 		.4byte	.LFB36
 3528 000c 40000000 		.4byte	.LFE36
 3529 0010 00000000 		.4byte	.LFB37
 3530 0014 3C000000 		.4byte	.LFE37
 3531 0018 00000000 		.4byte	.LFB38
 3532 001c 88000000 		.4byte	.LFE38
 3533 0020 00000000 		.4byte	.LFB39
 3534 0024 D4000000 		.4byte	.LFE39
 3535 0028 00000000 		.4byte	.LFB40
 3536 002c B8000000 		.4byte	.LFE40
 3537 0030 00000000 		.4byte	.LFB41
 3538 0034 44000000 		.4byte	.LFE41
 3539 0038 00000000 		.4byte	.LFB42
 3540 003c CC000000 		.4byte	.LFE42
 3541 0040 00000000 		.4byte	.LFB43
 3542 0044 14010000 		.4byte	.LFE43
 3543 0048 00000000 		.4byte	.LFB44
 3544 004c F0000000 		.4byte	.LFE44
 3545 0050 00000000 		.4byte	.LFB45
 3546 0054 1C000000 		.4byte	.LFE45
 3547 0058 00000000 		.4byte	.LFB46
 3548 005c 2C000000 		.4byte	.LFE46
 3549 0060 00000000 		.4byte	.LFB47
 3550 0064 10000000 		.4byte	.LFE47
 3551 0068 00000000 		.4byte	.LFB48
 3552 006c 10000000 		.4byte	.LFE48
 3553 0070 00000000 		.4byte	.LFB49
 3554 0074 10000000 		.4byte	.LFE49
 3555 0078 00000000 		.4byte	.LFB50
 3556 007c 10000000 		.4byte	.LFE50
 3557 0080 00000000 		.4byte	0
 3558 0084 00000000 		.4byte	0
 3559              		.section	.debug_line,"",%progbits
 3560              	.Ldebug_line0:
 3561 0000 0C030000 		.section	.debug_str,"MS",%progbits,1
 3561      02002B01 
 3561      00000201 
 3561      FB0E0D00 
 3561      01010101 
 3562              	.LASF21:
 3563 0000 76657273 		.ascii	"version\000"
 3563      696F6E00 
 3564              	.LASF57:
 3565 0008 68656C70 		.ascii	"helper_ifc\000"
 3565      65725F69 
 3565      666300
 3566              	.LASF36:
 3567 0013 75736167 		.ascii	"usage\000"
 3567      6500
 3568              	.LASF34:
 3569 0019 73657474 		.ascii	"setting\000"
 3569      696E6700 
 3570              	.LASF2:
 3571 0021 73686F72 		.ascii	"short int\000"
 3571      7420696E 
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 74


 3571      7400
 3572              	.LASF31:
 3573 002b 6D65616E 		.ascii	"meaning\000"
 3573      696E6700 
 3574              	.LASF61:
 3575 0033 746F6B5F 		.ascii	"tok_count\000"
 3575      636F756E 
 3575      7400
 3576              	.LASF50:
 3577 003d 636D645F 		.ascii	"cmd_read\000"
 3577      72656164 
 3577      00
 3578              	.LASF19:
 3579 0046 73697A65 		.ascii	"sizetype\000"
 3579      74797065 
 3579      00
 3580              	.LASF51:
 3581 004f 756E7469 		.ascii	"until\000"
 3581      6C00
 3582              	.LASF70:
 3583 0055 5C5C4D61 		.ascii	"\\\\Mac\\Home\\Documents\\dev\\yaugi\\GPIB USB Adap"
 3583      635C486F 
 3583      6D655C44 
 3583      6F63756D 
 3583      656E7473 
 3584 0081 7465725C 		.ascii	"ter\\GPIB USB 1.cydsn\000"
 3584      47504942 
 3584      20555342 
 3584      20312E63 
 3584      7964736E 
 3585              	.LASF4:
 3586 0096 5F5F7569 		.ascii	"__uint16_t\000"
 3586      6E743136 
 3586      5F7400
 3587              	.LASF30:
 3588 00a1 76616C75 		.ascii	"value\000"
 3588      6500
 3589              	.LASF35:
 3590 00a7 68656C70 		.ascii	"help\000"
 3590      00
 3591              	.LASF12:
 3592 00ac 75696E74 		.ascii	"uint8_t\000"
 3592      385F7400 
 3593              	.LASF41:
 3594 00b4 746F5F69 		.ascii	"to_int\000"
 3594      6E7400
 3595              	.LASF62:
 3596 00bb 636F6D6D 		.ascii	"commands\000"
 3596      616E6473 
 3596      00
 3597              	.LASF23:
 3598 00c4 6175746F 		.ascii	"autoread\000"
 3598      72656164 
 3598      00
 3599              	.LASF37:
 3600 00cd 6D65616E 		.ascii	"meanings\000"
 3600      696E6773 
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 75


 3600      00
 3601              	.LASF28:
 3602 00d6 73657474 		.ascii	"settings\000"
 3602      696E6773 
 3602      00
 3603              	.LASF33:
 3604 00df 66756E63 		.ascii	"func\000"
 3604      00
 3605              	.LASF9:
 3606 00e4 6C6F6E67 		.ascii	"long long int\000"
 3606      206C6F6E 
 3606      6720696E 
 3606      7400
 3607              	.LASF26:
 3608 00f2 72656164 		.ascii	"read_tmo_ms\000"
 3608      5F746D6F 
 3608      5F6D7300 
 3609              	.LASF38:
 3610 00fe 706F7374 		.ascii	"post_func\000"
 3610      5F66756E 
 3610      6300
 3611              	.LASF6:
 3612 0108 6C6F6E67 		.ascii	"long int\000"
 3612      20696E74 
 3612      00
 3613              	.LASF65:
 3614 0111 656E6162 		.ascii	"enable_disable_means\000"
 3614      6C655F64 
 3614      69736162 
 3614      6C655F6D 
 3614      65616E73 
 3615              	.LASF22:
 3616 0126 61646472 		.ascii	"address\000"
 3616      65737300 
 3617              	.LASF29:
 3618 012e 6974656D 		.ascii	"item_meaning\000"
 3618      5F6D6561 
 3618      6E696E67 
 3618      00
 3619              	.LASF3:
 3620 013b 5F5F7569 		.ascii	"__uint8_t\000"
 3620      6E74385F 
 3620      7400
 3621              	.LASF39:
 3622 0145 746F6B65 		.ascii	"tokenise\000"
 3622      6E697365 
 3622      00
 3623              	.LASF60:
 3624 014e 746F6B73 		.ascii	"toks\000"
 3624      00
 3625              	.LASF1:
 3626 0153 756E7369 		.ascii	"unsigned char\000"
 3626      676E6564 
 3626      20636861 
 3626      7200
 3627              	.LASF68:
 3628 0161 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 76


 3628      43313120 
 3628      352E342E 
 3628      31203230 
 3628      31363036 
 3629 0194 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 3629      20726576 
 3629      6973696F 
 3629      6E203233 
 3629      37373135 
 3630 01c7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3630      66756E63 
 3630      74696F6E 
 3630      2D736563 
 3630      74696F6E 
 3631              	.LASF32:
 3632 01ef 6E616D65 		.ascii	"name\000"
 3632      00
 3633              	.LASF59:
 3634 01f4 68656C70 		.ascii	"helper_loc\000"
 3634      65725F6C 
 3634      6F6300
 3635              	.LASF18:
 3636 01ff 6C6F6E67 		.ascii	"long double\000"
 3636      20646F75 
 3636      626C6500 
 3637              	.LASF24:
 3638 020b 656F745F 		.ascii	"eot_char\000"
 3638      63686172 
 3638      00
 3639              	.LASF49:
 3640 0214 636D645F 		.ascii	"cmd_help\000"
 3640      68656C70 
 3640      00
 3641              	.LASF42:
 3642 021d 61726763 		.ascii	"argc\000"
 3642      00
 3643              	.LASF0:
 3644 0222 7369676E 		.ascii	"signed char\000"
 3644      65642063 
 3644      68617200 
 3645              	.LASF10:
 3646 022e 6C6F6E67 		.ascii	"long long unsigned int\000"
 3646      206C6F6E 
 3646      6720756E 
 3646      7369676E 
 3646      65642069 
 3647              	.LASF14:
 3648 0245 75696E74 		.ascii	"uint32_t\000"
 3648      33325F74 
 3648      00
 3649              	.LASF11:
 3650 024e 756E7369 		.ascii	"unsigned int\000"
 3650      676E6564 
 3650      20696E74 
 3650      00
 3651              	.LASF13:
 3652 025b 75696E74 		.ascii	"uint16_t\000"
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 77


 3652      31365F74 
 3652      00
 3653              	.LASF45:
 3654 0264 61726776 		.ascii	"argv\000"
 3654      00
 3655              	.LASF55:
 3656 0269 68656C70 		.ascii	"helper_version\000"
 3656      65725F76 
 3656      65727369 
 3656      6F6E00
 3657              	.LASF5:
 3658 0278 73686F72 		.ascii	"short unsigned int\000"
 3658      7420756E 
 3658      7369676E 
 3658      65642069 
 3658      6E7400
 3659              	.LASF25:
 3660 028b 656F745F 		.ascii	"eot_enable\000"
 3660      656E6162 
 3660      6C6500
 3661              	.LASF66:
 3662 0296 656F735F 		.ascii	"eos_means\000"
 3662      6D65616E 
 3662      7300
 3663              	.LASF17:
 3664 02a0 63686172 		.ascii	"char\000"
 3664      00
 3665              	.LASF43:
 3666 02a5 636D645F 		.ascii	"cmd_process\000"
 3666      70726F63 
 3666      65737300 
 3667              	.LASF48:
 3668 02b1 636D645F 		.ascii	"cmd_noargs\000"
 3668      6E6F6172 
 3668      677300
 3669              	.LASF58:
 3670 02bc 68656C70 		.ascii	"helper_llo\000"
 3670      65725F6C 
 3670      6C6F00
 3671              	.LASF53:
 3672 02c7 636D645F 		.ascii	"cmd_config\000"
 3672      636F6E66 
 3672      696700
 3673              	.LASF40:
 3674 02d2 69735F69 		.ascii	"is_int\000"
 3674      6E7400
 3675              	.LASF15:
 3676 02d9 666C6F61 		.ascii	"float\000"
 3676      7400
 3677              	.LASF52:
 3678 02df 656E6465 		.ascii	"ended\000"
 3678      6400
 3679              	.LASF44:
 3680 02e5 636D645F 		.ascii	"cmd_usage\000"
 3680      75736167 
 3680      6500
 3681              	.LASF56:
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccZgYoRQ.s 			page 78


 3682 02ef 68656C70 		.ascii	"helper_clr\000"
 3682      65725F63 
 3682      6C7200
 3683              	.LASF8:
 3684 02fa 6C6F6E67 		.ascii	"long unsigned int\000"
 3684      20756E73 
 3684      69676E65 
 3684      6420696E 
 3684      7400
 3685              	.LASF16:
 3686 030c 646F7562 		.ascii	"double\000"
 3686      6C6500
 3687              	.LASF27:
 3688 0313 696E7465 		.ascii	"interact\000"
 3688      72616374 
 3688      00
 3689              	.LASF7:
 3690 031c 5F5F7569 		.ascii	"__uint32_t\000"
 3690      6E743332 
 3690      5F7400
 3691              	.LASF47:
 3692 0327 62797465 		.ascii	"byte\000"
 3692      00
 3693              	.LASF64:
 3694 032c 6175746F 		.ascii	"auto_means\000"
 3694      5F6D6561 
 3694      6E7300
 3695              	.LASF20:
 3696 0337 7369676E 		.ascii	"signature\000"
 3696      61747572 
 3696      6500
 3697              	.LASF69:
 3698 0341 636F6D6D 		.ascii	"command.c\000"
 3698      616E642E 
 3698      6300
 3699              	.LASF67:
 3700 034b 656E6162 		.ascii	"enable_disable_usage\000"
 3700      6C655F64 
 3700      69736162 
 3700      6C655F75 
 3700      73616765 
 3701              	.LASF54:
 3702 0360 68656C70 		.ascii	"helper_gpiball\000"
 3702      65725F67 
 3702      70696261 
 3702      6C6C00
 3703              	.LASF46:
 3704 036f 636D645F 		.ascii	"cmd_uint\000"
 3704      75696E74 
 3704      00
 3705              	.LASF63:
 3706 0378 6E6F5F75 		.ascii	"no_usage_args\000"
 3706      73616765 
 3706      5F617267 
 3706      7300
 3707              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
