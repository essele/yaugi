ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"gpib.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	my_address
  20              		.data
  21              		.type	my_address, %object
  22              		.size	my_address, 1
  23              	my_address:
  24 0000 15       		.byte	21
  25              		.global	listening
  26 0001 000000   		.align	2
  27              		.type	listening, %object
  28              		.size	listening, 4
  29              	listening:
  30 0004 FFFFFFFF 		.word	-1
  31              		.global	talking
  32              		.align	2
  33              		.type	talking, %object
  34              		.size	talking, 4
  35              	talking:
  36 0008 FFFFFFFF 		.word	-1
  37              		.section	.text.gpib_settle,"ax",%progbits
  38              		.align	2
  39              		.global	gpib_settle
  40              		.code	16
  41              		.thumb_func
  42              		.type	gpib_settle, %function
  43              	gpib_settle:
  44              	.LFB34:
  45              		.file 1 "gpib.c"
   1:gpib.c        **** /****
   2:gpib.c        ****  * YAUGI -- Yet Another USB GPIB Interface
   3:gpib.c        ****  * 
   4:gpib.c        ****  * Lee Essen, 2019
   5:gpib.c        ****  *
   6:gpib.c        ****  * This work is licensed under a Creative Commons 
   7:gpib.c        ****  * Attribution-NonCommercial-ShareAlike 4.0 International License.
   8:gpib.c        ****  *
   9:gpib.c        ****  */
  10:gpib.c        **** 
  11:gpib.c        **** #include "gpib.h"
  12:gpib.c        **** #include "settings.h"
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 2


  13:gpib.c        **** 
  14:gpib.c        **** /**
  15:gpib.c        ****  * How long after we start to see a device do we consider it ok to talk to
  16:gpib.c        ****  * (in ms)
  17:gpib.c        ****  */
  18:gpib.c        **** #define GPIB_INIT_TIME      3000
  19:gpib.c        **** 
  20:gpib.c        **** /**
  21:gpib.c        ****  * Definitions of the various lines (for bitbanging)
  22:gpib.c        ****  */
  23:gpib.c        **** typedef enum {
  24:gpib.c        ****     ATN=0, SRQ, IFC, NDAC, NRFD, DAV, EOI, REN } gpib_line;
  25:gpib.c        **** 
  26:gpib.c        **** /**
  27:gpib.c        ****  * My internal GPIB address (default controller = 21)
  28:gpib.c        ****  */
  29:gpib.c        **** uint8_t my_address = 21;
  30:gpib.c        **** 
  31:gpib.c        **** /**
  32:gpib.c        ****  * Track who is listening and who is talking so we only send commands
  33:gpib.c        ****  * when we need to
  34:gpib.c        ****  */
  35:gpib.c        **** int listening = -1;
  36:gpib.c        **** int talking = -1;
  37:gpib.c        **** 
  38:gpib.c        **** 
  39:gpib.c        **** /**
  40:gpib.c        ****  * Delay for letting data settle ... will need to revisit when we rework for performance
  41:gpib.c        ****  */
  42:gpib.c        **** void gpib_settle() {
  46              		.loc 1 42 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 1, uses_anonymous_args = 0
  50 0000 80B5     		push	{r7, lr}
  51              		.cfi_def_cfa_offset 8
  52              		.cfi_offset 7, -8
  53              		.cfi_offset 14, -4
  54 0002 00AF     		add	r7, sp, #0
  55              		.cfi_def_cfa_register 7
  43:gpib.c        ****     CyDelayUs(2);
  56              		.loc 1 43 0
  57 0004 0220     		movs	r0, #2
  58 0006 FFF7FEFF 		bl	CyDelayUs
  44:gpib.c        **** }
  59              		.loc 1 44 0
  60 000a C046     		nop
  61 000c BD46     		mov	sp, r7
  62              		@ sp needed
  63 000e 80BD     		pop	{r7, pc}
  64              		.cfi_endproc
  65              	.LFE34:
  66              		.size	gpib_settle, .-gpib_settle
  67              		.global	_gpib_mode
  68              		.bss
  69              		.align	2
  70              		.type	_gpib_mode, %object
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 3


  71              		.size	_gpib_mode, 4
  72              	_gpib_mode:
  73 0000 00000000 		.space	4
  74              		.section	.text.gpib_assert_line,"ax",%progbits
  75              		.align	2
  76              		.global	gpib_assert_line
  77              		.code	16
  78              		.thumb_func
  79              		.type	gpib_assert_line, %function
  80              	gpib_assert_line:
  81              	.LFB35:
  45:gpib.c        **** 
  46:gpib.c        **** /**
  47:gpib.c        ****  * We can detect if a device is not present since all the pins will be low, if
  48:gpib.c        ****  * that is the case then we don't want to proceed. We'll just check the SIG pins
  49:gpib.c        ****  * since all shouldn't be low in normal operation.
  50:gpib.c        ****  *
  51:gpib.c        ****  * TODO: we should only really do this check when we are not driving anything, otherwise
  52:gpib.c        ****  * we might get strange results.
  53:gpib.c        ****  */
  54:gpib.c        **** int _gpib_mode = GPIB_NODEVICE;
  55:gpib.c        **** 
  56:gpib.c        **** /**
  57:gpib.c        ****  * Assert means pulling a line low
  58:gpib.c        ****  */
  59:gpib.c        **** void gpib_assert_line(gpib_line line) {
  82              		.loc 1 59 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86 0000 80B5     		push	{r7, lr}
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 82B0     		sub	sp, sp, #8
  91              		.cfi_def_cfa_offset 16
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  94 0006 0200     		movs	r2, r0
  95 0008 FB1D     		adds	r3, r7, #7
  96 000a 1A70     		strb	r2, [r3]
  60:gpib.c        ****     (*(reg32 *)SIG__DR_CLR) = (1 << line);
  97              		.loc 1 60 0
  98 000c 054B     		ldr	r3, .L3
  99 000e FA1D     		adds	r2, r7, #7
 100 0010 1278     		ldrb	r2, [r2]
 101 0012 0121     		movs	r1, #1
 102 0014 9140     		lsls	r1, r1, r2
 103 0016 0A00     		movs	r2, r1
 104 0018 1A60     		str	r2, [r3]
  61:gpib.c        **** }
 105              		.loc 1 61 0
 106 001a C046     		nop
 107 001c BD46     		mov	sp, r7
 108 001e 02B0     		add	sp, sp, #8
 109              		@ sp needed
 110 0020 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 4


 111              	.L4:
 112 0022 C046     		.align	2
 113              	.L3:
 114 0024 44010440 		.word	1074004292
 115              		.cfi_endproc
 116              	.LFE35:
 117              		.size	gpib_assert_line, .-gpib_assert_line
 118              		.section	.text.gpib_unassert_line,"ax",%progbits
 119              		.align	2
 120              		.global	gpib_unassert_line
 121              		.code	16
 122              		.thumb_func
 123              		.type	gpib_unassert_line, %function
 124              	gpib_unassert_line:
 125              	.LFB36:
  62:gpib.c        **** 
  63:gpib.c        **** /**
  64:gpib.c        ****  * Unasserting means letting it float high
  65:gpib.c        ****  */
  66:gpib.c        **** void gpib_unassert_line(gpib_line line) {
 126              		.loc 1 66 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 8
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130 0000 80B5     		push	{r7, lr}
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 7, -8
 133              		.cfi_offset 14, -4
 134 0002 82B0     		sub	sp, sp, #8
 135              		.cfi_def_cfa_offset 16
 136 0004 00AF     		add	r7, sp, #0
 137              		.cfi_def_cfa_register 7
 138 0006 0200     		movs	r2, r0
 139 0008 FB1D     		adds	r3, r7, #7
 140 000a 1A70     		strb	r2, [r3]
  67:gpib.c        ****     (*(reg32 *)SIG__DR_SET) = (1 << line);
 141              		.loc 1 67 0
 142 000c 054B     		ldr	r3, .L6
 143 000e FA1D     		adds	r2, r7, #7
 144 0010 1278     		ldrb	r2, [r2]
 145 0012 0121     		movs	r1, #1
 146 0014 9140     		lsls	r1, r1, r2
 147 0016 0A00     		movs	r2, r1
 148 0018 1A60     		str	r2, [r3]
  68:gpib.c        **** }
 149              		.loc 1 68 0
 150 001a C046     		nop
 151 001c BD46     		mov	sp, r7
 152 001e 02B0     		add	sp, sp, #8
 153              		@ sp needed
 154 0020 80BD     		pop	{r7, pc}
 155              	.L7:
 156 0022 C046     		.align	2
 157              	.L6:
 158 0024 40010440 		.word	1074004288
 159              		.cfi_endproc
 160              	.LFE36:
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 5


 161              		.size	gpib_unassert_line, .-gpib_unassert_line
 162              		.section	.text.gpib_readall,"ax",%progbits
 163              		.align	2
 164              		.global	gpib_readall
 165              		.code	16
 166              		.thumb_func
 167              		.type	gpib_readall, %function
 168              	gpib_readall:
 169              	.LFB37:
  69:gpib.c        **** 
  70:gpib.c        **** uint16_t gpib_readall() {
 170              		.loc 1 70 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 8
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174 0000 80B5     		push	{r7, lr}
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 7, -8
 177              		.cfi_offset 14, -4
 178 0002 82B0     		sub	sp, sp, #8
 179              		.cfi_def_cfa_offset 16
 180 0004 00AF     		add	r7, sp, #0
 181              		.cfi_def_cfa_register 7
  71:gpib.c        ****     uint16_t rc = ((*(reg32 *)SIG__PS) & 0xff) << 8;
 182              		.loc 1 71 0
 183 0006 0C4B     		ldr	r3, .L10
 184 0008 1B68     		ldr	r3, [r3]
 185 000a 9BB2     		uxth	r3, r3
 186 000c FF22     		movs	r2, #255
 187 000e 1340     		ands	r3, r2
 188 0010 9AB2     		uxth	r2, r3
 189 0012 BB1D     		adds	r3, r7, #6
 190 0014 1202     		lsls	r2, r2, #8
 191 0016 1A80     		strh	r2, [r3]
  72:gpib.c        ****     rc |= ((*(reg32 *)DIO__PS) & 0xff);
 192              		.loc 1 72 0
 193 0018 084B     		ldr	r3, .L10+4
 194 001a 1B68     		ldr	r3, [r3]
 195 001c FF22     		movs	r2, #255
 196 001e 1340     		ands	r3, r2
 197 0020 99B2     		uxth	r1, r3
 198 0022 BB1D     		adds	r3, r7, #6
 199 0024 BA1D     		adds	r2, r7, #6
 200 0026 1288     		ldrh	r2, [r2]
 201 0028 0A43     		orrs	r2, r1
 202 002a 1A80     		strh	r2, [r3]
  73:gpib.c        ****     return rc;
 203              		.loc 1 73 0
 204 002c BB1D     		adds	r3, r7, #6
 205 002e 1B88     		ldrh	r3, [r3]
  74:gpib.c        **** }
 206              		.loc 1 74 0
 207 0030 1800     		movs	r0, r3
 208 0032 BD46     		mov	sp, r7
 209 0034 02B0     		add	sp, sp, #8
 210              		@ sp needed
 211 0036 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 6


 212              	.L11:
 213              		.align	2
 214              	.L10:
 215 0038 04010440 		.word	1074004228
 216 003c 04020440 		.word	1074004484
 217              		.cfi_endproc
 218              	.LFE37:
 219              		.size	gpib_readall, .-gpib_readall
 220              		.section	.text.gpib_read_line,"ax",%progbits
 221              		.align	2
 222              		.global	gpib_read_line
 223              		.code	16
 224              		.thumb_func
 225              		.type	gpib_read_line, %function
 226              	gpib_read_line:
 227              	.LFB38:
  75:gpib.c        **** 
  76:gpib.c        **** /**
  77:gpib.c        ****  * Read the status of a line ... true is low! false is high!
  78:gpib.c        ****  */
  79:gpib.c        **** bool gpib_read_line(gpib_line line) {
 228              		.loc 1 79 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 16
 231              		@ frame_needed = 1, uses_anonymous_args = 0
 232 0000 80B5     		push	{r7, lr}
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 7, -8
 235              		.cfi_offset 14, -4
 236 0002 84B0     		sub	sp, sp, #16
 237              		.cfi_def_cfa_offset 24
 238 0004 00AF     		add	r7, sp, #0
 239              		.cfi_def_cfa_register 7
 240 0006 0200     		movs	r2, r0
 241 0008 FB1D     		adds	r3, r7, #7
 242 000a 1A70     		strb	r2, [r3]
  80:gpib.c        ****     int v = ((*(reg32 *)SIG__PS) >> line) & 0x0001;
 243              		.loc 1 80 0
 244 000c 084B     		ldr	r3, .L14
 245 000e 1A68     		ldr	r2, [r3]
 246 0010 FB1D     		adds	r3, r7, #7
 247 0012 1B78     		ldrb	r3, [r3]
 248 0014 DA40     		lsrs	r2, r2, r3
 249 0016 1300     		movs	r3, r2
 250 0018 1A00     		movs	r2, r3
 251 001a 0123     		movs	r3, #1
 252 001c 1340     		ands	r3, r2
 253 001e FB60     		str	r3, [r7, #12]
  81:gpib.c        ****     return v == 0 ? true : false;
 254              		.loc 1 81 0
 255 0020 FB68     		ldr	r3, [r7, #12]
 256 0022 5A42     		rsbs	r2, r3, #0
 257 0024 5341     		adcs	r3, r3, r2
 258 0026 DBB2     		uxtb	r3, r3
  82:gpib.c        **** }
 259              		.loc 1 82 0
 260 0028 1800     		movs	r0, r3
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 7


 261 002a BD46     		mov	sp, r7
 262 002c 04B0     		add	sp, sp, #16
 263              		@ sp needed
 264 002e 80BD     		pop	{r7, pc}
 265              	.L15:
 266              		.align	2
 267              	.L14:
 268 0030 04010440 		.word	1074004228
 269              		.cfi_endproc
 270              	.LFE38:
 271              		.size	gpib_read_line, .-gpib_read_line
 272              		.section	.text.gpib_poll,"ax",%progbits
 273              		.align	2
 274              		.global	gpib_poll
 275              		.code	16
 276              		.thumb_func
 277              		.type	gpib_poll, %function
 278              	gpib_poll:
 279              	.LFB39:
  83:gpib.c        **** 
  84:gpib.c        **** /**
  85:gpib.c        ****  * Called periodically, will announce state changes, return value of 1 indicates we have
  86:gpib.c        ****  * had a state change.
  87:gpib.c        ****  *
  88:gpib.c        ****  * We'll just keep an eye on IFC and ATN ... if either are low then (since we are the controller) t
  89:gpib.c        ****  * must be a power fail/missing device.
  90:gpib.c        ****  *
  91:gpib.c        ****  * Once a device looks like it's back, we start a timer so we don't jump the gun
  92:gpib.c        ****  */
  93:gpib.c        **** int gpib_poll() {
 280              		.loc 1 93 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 8
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284 0000 90B5     		push	{r4, r7, lr}
 285              		.cfi_def_cfa_offset 12
 286              		.cfi_offset 4, -12
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
 289 0002 83B0     		sub	sp, sp, #12
 290              		.cfi_def_cfa_offset 24
 291 0004 00AF     		add	r7, sp, #0
 292              		.cfi_def_cfa_register 7
  94:gpib.c        ****     //uint8_t sig = (*(reg32 *)SIG__PS & 0xff);
  95:gpib.c        ****     int old_state = _gpib_mode;
 293              		.loc 1 95 0
 294 0006 1F4B     		ldr	r3, .L22
 295 0008 1B68     		ldr	r3, [r3]
 296 000a 7B60     		str	r3, [r7, #4]
  96:gpib.c        ****    
  97:gpib.c        ****     bool atn = gpib_read_line(ATN);
 297              		.loc 1 97 0
 298 000c FC1C     		adds	r4, r7, #3
 299 000e 0020     		movs	r0, #0
 300 0010 FFF7FEFF 		bl	gpib_read_line
 301 0014 0300     		movs	r3, r0
 302 0016 2370     		strb	r3, [r4]
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 8


  98:gpib.c        ****     bool ifc = gpib_read_line(IFC);
 303              		.loc 1 98 0
 304 0018 BC1C     		adds	r4, r7, #2
 305 001a 0220     		movs	r0, #2
 306 001c FFF7FEFF 		bl	gpib_read_line
 307 0020 0300     		movs	r3, r0
 308 0022 2370     		strb	r3, [r4]
  99:gpib.c        ****     
 100:gpib.c        ****     // Used to disable state checking (if a scope is on the lines!)
 101:gpib.c        ****     //    atn = ifc = false;
 102:gpib.c        ****     
 103:gpib.c        ****     // If either ATN or IFC are zero, then we must be missing a device ;-)
 104:gpib.c        ****     if (atn || ifc) {
 309              		.loc 1 104 0
 310 0024 FB1C     		adds	r3, r7, #3
 311 0026 1B78     		ldrb	r3, [r3]
 312 0028 002B     		cmp	r3, #0
 313 002a 03D1     		bne	.L17
 314              		.loc 1 104 0 is_stmt 0 discriminator 1
 315 002c BB1C     		adds	r3, r7, #2
 316 002e 1B78     		ldrb	r3, [r3]
 317 0030 002B     		cmp	r3, #0
 318 0032 03D0     		beq	.L18
 319              	.L17:
 105:gpib.c        ****         _gpib_mode = GPIB_NODEVICE;
 320              		.loc 1 105 0 is_stmt 1
 321 0034 134B     		ldr	r3, .L22
 322 0036 0022     		movs	r2, #0
 323 0038 1A60     		str	r2, [r3]
 324 003a 17E0     		b	.L19
 325              	.L18:
 106:gpib.c        ****     } else if (_gpib_mode == GPIB_NODEVICE) {
 326              		.loc 1 106 0
 327 003c 114B     		ldr	r3, .L22
 328 003e 1B68     		ldr	r3, [r3]
 329 0040 002B     		cmp	r3, #0
 330 0042 06D1     		bne	.L20
 107:gpib.c        ****         // device has potentially come back ... zero the timer..
 108:gpib.c        ****         Timer1_WriteCounter(0);
 331              		.loc 1 108 0
 332 0044 0020     		movs	r0, #0
 333 0046 FFF7FEFF 		bl	Timer1_WriteCounter
 109:gpib.c        ****         _gpib_mode = GPIB_INIT;
 334              		.loc 1 109 0
 335 004a 0E4B     		ldr	r3, .L22
 336 004c 0122     		movs	r2, #1
 337 004e 1A60     		str	r2, [r3]
 338 0050 0CE0     		b	.L19
 339              	.L20:
 110:gpib.c        ****     } else if (_gpib_mode == GPIB_INIT) {
 340              		.loc 1 110 0
 341 0052 0C4B     		ldr	r3, .L22
 342 0054 1B68     		ldr	r3, [r3]
 343 0056 012B     		cmp	r3, #1
 344 0058 08D1     		bne	.L19
 111:gpib.c        ****         // after a period we need to switch
 112:gpib.c        ****         if (Timer1_ReadCounter() > GPIB_INIT_TIME) {
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 9


 345              		.loc 1 112 0
 346 005a FFF7FEFF 		bl	Timer1_ReadCounter
 347 005e 0200     		movs	r2, r0
 348 0060 094B     		ldr	r3, .L22+4
 349 0062 9A42     		cmp	r2, r3
 350 0064 02D9     		bls	.L19
 113:gpib.c        ****             _gpib_mode = GPIB_RUNNING;
 351              		.loc 1 113 0
 352 0066 074B     		ldr	r3, .L22
 353 0068 0222     		movs	r2, #2
 354 006a 1A60     		str	r2, [r3]
 355              	.L19:
 114:gpib.c        ****         }
 115:gpib.c        ****     }    
 116:gpib.c        ****     return (_gpib_mode != old_state ? 1 : 0);
 356              		.loc 1 116 0
 357 006c 054B     		ldr	r3, .L22
 358 006e 1A68     		ldr	r2, [r3]
 359 0070 7B68     		ldr	r3, [r7, #4]
 360 0072 D31A     		subs	r3, r2, r3
 361 0074 5A1E     		subs	r2, r3, #1
 362 0076 9341     		sbcs	r3, r3, r2
 363 0078 DBB2     		uxtb	r3, r3
 117:gpib.c        **** }
 364              		.loc 1 117 0
 365 007a 1800     		movs	r0, r3
 366 007c BD46     		mov	sp, r7
 367 007e 03B0     		add	sp, sp, #12
 368              		@ sp needed
 369 0080 90BD     		pop	{r4, r7, pc}
 370              	.L23:
 371 0082 C046     		.align	2
 372              	.L22:
 373 0084 00000000 		.word	_gpib_mode
 374 0088 B80B0000 		.word	3000
 375              		.cfi_endproc
 376              	.LFE39:
 377              		.size	gpib_poll, .-gpib_poll
 378              		.section	.text.gpib_get_mode,"ax",%progbits
 379              		.align	2
 380              		.global	gpib_get_mode
 381              		.code	16
 382              		.thumb_func
 383              		.type	gpib_get_mode, %function
 384              	gpib_get_mode:
 385              	.LFB40:
 118:gpib.c        **** 
 119:gpib.c        **** int gpib_get_mode() {
 386              		.loc 1 119 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 10


 395              		.cfi_def_cfa_register 7
 120:gpib.c        ****     return _gpib_mode;
 396              		.loc 1 120 0
 397 0004 024B     		ldr	r3, .L26
 398 0006 1B68     		ldr	r3, [r3]
 121:gpib.c        **** }
 399              		.loc 1 121 0
 400 0008 1800     		movs	r0, r3
 401 000a BD46     		mov	sp, r7
 402              		@ sp needed
 403 000c 80BD     		pop	{r7, pc}
 404              	.L27:
 405 000e C046     		.align	2
 406              	.L26:
 407 0010 00000000 		.word	_gpib_mode
 408              		.cfi_endproc
 409              	.LFE40:
 410              		.size	gpib_get_mode, .-gpib_get_mode
 411              		.section	.text.gpib_wait_for_line_to_assert,"ax",%progbits
 412              		.align	2
 413              		.global	gpib_wait_for_line_to_assert
 414              		.code	16
 415              		.thumb_func
 416              		.type	gpib_wait_for_line_to_assert, %function
 417              	gpib_wait_for_line_to_assert:
 418              	.LFB41:
 122:gpib.c        **** 
 123:gpib.c        **** /**
 124:gpib.c        ****  * Wait for a line to go low, if it doesn't within read_tmo_ms then timeout
 125:gpib.c        ****  */
 126:gpib.c        **** bool gpib_wait_for_line_to_assert(gpib_line line) {
 419              		.loc 1 126 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 8
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423 0000 80B5     		push	{r7, lr}
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 427 0002 82B0     		sub	sp, sp, #8
 428              		.cfi_def_cfa_offset 16
 429 0004 00AF     		add	r7, sp, #0
 430              		.cfi_def_cfa_register 7
 431 0006 0200     		movs	r2, r0
 432 0008 FB1D     		adds	r3, r7, #7
 433 000a 1A70     		strb	r2, [r3]
 127:gpib.c        ****     // Prepare the counter...
 128:gpib.c        ****     Timer1_WriteCounter(0);
 434              		.loc 1 128 0
 435 000c 0020     		movs	r0, #0
 436 000e FFF7FEFF 		bl	Timer1_WriteCounter
 437              	.L32:
 129:gpib.c        ****     
 130:gpib.c        ****     while (1) {
 131:gpib.c        ****         if (gpib_read_line(line) == true) {
 438              		.loc 1 131 0
 439 0012 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 11


 440 0014 1B78     		ldrb	r3, [r3]
 441 0016 1800     		movs	r0, r3
 442 0018 FFF7FEFF 		bl	gpib_read_line
 443 001c 031E     		subs	r3, r0, #0
 444 001e 01D0     		beq	.L29
 132:gpib.c        ****             return true;
 445              		.loc 1 132 0
 446 0020 0123     		movs	r3, #1
 447 0022 07E0     		b	.L30
 448              	.L29:
 133:gpib.c        ****         }
 134:gpib.c        ****         if (Timer1_ReadCounter() > settings.read_tmo_ms) {
 449              		.loc 1 134 0
 450 0024 FFF7FEFF 		bl	Timer1_ReadCounter
 451 0028 0200     		movs	r2, r0
 452 002a 044B     		ldr	r3, .L33
 453 002c 5B8A     		ldrh	r3, [r3, #18]
 454 002e 9A42     		cmp	r2, r3
 455 0030 EFD9     		bls	.L32
 135:gpib.c        ****             return false;
 456              		.loc 1 135 0
 457 0032 0023     		movs	r3, #0
 458              	.L30:
 136:gpib.c        ****         }
 137:gpib.c        ****     }
 138:gpib.c        **** }
 459              		.loc 1 138 0
 460 0034 1800     		movs	r0, r3
 461 0036 BD46     		mov	sp, r7
 462 0038 02B0     		add	sp, sp, #8
 463              		@ sp needed
 464 003a 80BD     		pop	{r7, pc}
 465              	.L34:
 466              		.align	2
 467              	.L33:
 468 003c 00000000 		.word	settings
 469              		.cfi_endproc
 470              	.LFE41:
 471              		.size	gpib_wait_for_line_to_assert, .-gpib_wait_for_line_to_assert
 472              		.section	.text.gpib_wait_for_line_to_unassert,"ax",%progbits
 473              		.align	2
 474              		.global	gpib_wait_for_line_to_unassert
 475              		.code	16
 476              		.thumb_func
 477              		.type	gpib_wait_for_line_to_unassert, %function
 478              	gpib_wait_for_line_to_unassert:
 479              	.LFB42:
 139:gpib.c        **** 
 140:gpib.c        **** /**
 141:gpib.c        ****  * Wait for a line to go high, if it doesn't within read_tmo_ms then timeout
 142:gpib.c        ****  */
 143:gpib.c        **** bool gpib_wait_for_line_to_unassert(gpib_line line) {
 480              		.loc 1 143 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 8
 483              		@ frame_needed = 1, uses_anonymous_args = 0
 484 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 12


 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0002 82B0     		sub	sp, sp, #8
 489              		.cfi_def_cfa_offset 16
 490 0004 00AF     		add	r7, sp, #0
 491              		.cfi_def_cfa_register 7
 492 0006 0200     		movs	r2, r0
 493 0008 FB1D     		adds	r3, r7, #7
 494 000a 1A70     		strb	r2, [r3]
 144:gpib.c        ****     // Prepare the counter...
 145:gpib.c        ****     Timer1_WriteCounter(0);
 495              		.loc 1 145 0
 496 000c 0020     		movs	r0, #0
 497 000e FFF7FEFF 		bl	Timer1_WriteCounter
 498              	.L39:
 146:gpib.c        ****  
 147:gpib.c        ****     while (1) {
 148:gpib.c        ****         if (gpib_read_line(line) == false) {
 499              		.loc 1 148 0
 500 0012 FB1D     		adds	r3, r7, #7
 501 0014 1B78     		ldrb	r3, [r3]
 502 0016 1800     		movs	r0, r3
 503 0018 FFF7FEFF 		bl	gpib_read_line
 504 001c 0300     		movs	r3, r0
 505 001e 1A00     		movs	r2, r3
 506 0020 0123     		movs	r3, #1
 507 0022 5340     		eors	r3, r2
 508 0024 DBB2     		uxtb	r3, r3
 509 0026 002B     		cmp	r3, #0
 510 0028 01D0     		beq	.L36
 149:gpib.c        ****             return true;
 511              		.loc 1 149 0
 512 002a 0123     		movs	r3, #1
 513 002c 07E0     		b	.L37
 514              	.L36:
 150:gpib.c        ****         }
 151:gpib.c        ****         if (Timer1_ReadCounter() > settings.read_tmo_ms) {
 515              		.loc 1 151 0
 516 002e FFF7FEFF 		bl	Timer1_ReadCounter
 517 0032 0200     		movs	r2, r0
 518 0034 044B     		ldr	r3, .L40
 519 0036 5B8A     		ldrh	r3, [r3, #18]
 520 0038 9A42     		cmp	r2, r3
 521 003a EAD9     		bls	.L39
 152:gpib.c        ****             return false;
 522              		.loc 1 152 0
 523 003c 0023     		movs	r3, #0
 524              	.L37:
 153:gpib.c        ****         }
 154:gpib.c        ****     }
 155:gpib.c        **** }
 525              		.loc 1 155 0
 526 003e 1800     		movs	r0, r3
 527 0040 BD46     		mov	sp, r7
 528 0042 02B0     		add	sp, sp, #8
 529              		@ sp needed
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 13


 530 0044 80BD     		pop	{r7, pc}
 531              	.L41:
 532 0046 C046     		.align	2
 533              	.L40:
 534 0048 00000000 		.word	settings
 535              		.cfi_endproc
 536              	.LFE42:
 537              		.size	gpib_wait_for_line_to_unassert, .-gpib_wait_for_line_to_unassert
 538              		.section	.text.gpib_send_byte,"ax",%progbits
 539              		.align	2
 540              		.global	gpib_send_byte
 541              		.code	16
 542              		.thumb_func
 543              		.type	gpib_send_byte, %function
 544              	gpib_send_byte:
 545              	.LFB43:
 156:gpib.c        **** 
 157:gpib.c        **** /**
 158:gpib.c        ****  * Transmit a byte of data on the bus, post this call nothing should be
 159:gpib.c        ****  * asserted. An error returns false.
 160:gpib.c        ****  */
 161:gpib.c        **** bool gpib_send_byte(uint8_t byte, bool last) {
 546              		.loc 1 161 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 16
 549              		@ frame_needed = 1, uses_anonymous_args = 0
 550 0000 90B5     		push	{r4, r7, lr}
 551              		.cfi_def_cfa_offset 12
 552              		.cfi_offset 4, -12
 553              		.cfi_offset 7, -8
 554              		.cfi_offset 14, -4
 555 0002 85B0     		sub	sp, sp, #20
 556              		.cfi_def_cfa_offset 32
 557 0004 00AF     		add	r7, sp, #0
 558              		.cfi_def_cfa_register 7
 559 0006 0200     		movs	r2, r0
 560 0008 FB1D     		adds	r3, r7, #7
 561 000a 1A70     		strb	r2, [r3]
 562 000c BB1D     		adds	r3, r7, #6
 563 000e 0A1C     		adds	r2, r1, #0
 564 0010 1A70     		strb	r2, [r3]
 162:gpib.c        ****     bool ok;
 163:gpib.c        ****     
 164:gpib.c        ****     if (last) {
 565              		.loc 1 164 0
 566 0012 BB1D     		adds	r3, r7, #6
 567 0014 1B78     		ldrb	r3, [r3]
 568 0016 002B     		cmp	r3, #0
 569 0018 02D0     		beq	.L43
 165:gpib.c        ****        gpib_assert_line(EOI);
 570              		.loc 1 165 0
 571 001a 0620     		movs	r0, #6
 572 001c FFF7FEFF 		bl	gpib_assert_line
 573              	.L43:
 166:gpib.c        ****     }
 167:gpib.c        ****     
 168:gpib.c        ****     // Wait for NRFD to be high...
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 14


 169:gpib.c        ****     ok = gpib_wait_for_line_to_unassert(NRFD);
 574              		.loc 1 169 0
 575 0020 0F23     		movs	r3, #15
 576 0022 FC18     		adds	r4, r7, r3
 577 0024 0420     		movs	r0, #4
 578 0026 FFF7FEFF 		bl	gpib_wait_for_line_to_unassert
 579 002a 0300     		movs	r3, r0
 580 002c 2370     		strb	r3, [r4]
 170:gpib.c        ****     if (!ok) goto cleanup;
 581              		.loc 1 170 0
 582 002e 0F23     		movs	r3, #15
 583 0030 FB18     		adds	r3, r7, r3
 584 0032 1B78     		ldrb	r3, [r3]
 585 0034 0122     		movs	r2, #1
 586 0036 5340     		eors	r3, r2
 587 0038 DBB2     		uxtb	r3, r3
 588 003a 002B     		cmp	r3, #0
 589 003c 11D1     		bne	.L47
 171:gpib.c        ****     
 172:gpib.c        ****     // Write data onto the bus... (reverse logic!)
 173:gpib.c        ****     (*(reg32 *)DIO__DR) = ~byte;
 590              		.loc 1 173 0
 591 003e 114B     		ldr	r3, .L48
 592 0040 FA1D     		adds	r2, r7, #7
 593 0042 1278     		ldrb	r2, [r2]
 594 0044 D243     		mvns	r2, r2
 595 0046 1A60     		str	r2, [r3]
 174:gpib.c        ****     
 175:gpib.c        ****     // Allow settling time...
 176:gpib.c        ****     gpib_settle();     // we may need to adjust this later
 596              		.loc 1 176 0
 597 0048 FFF7FEFF 		bl	gpib_settle
 177:gpib.c        ****     
 178:gpib.c        ****     // Signal data is valie...
 179:gpib.c        ****     gpib_assert_line(DAV);
 598              		.loc 1 179 0
 599 004c 0520     		movs	r0, #5
 600 004e FFF7FEFF 		bl	gpib_assert_line
 180:gpib.c        ****     
 181:gpib.c        ****     // Wait until everyone has received it...
 182:gpib.c        ****     ok = gpib_wait_for_line_to_unassert(NDAC);
 601              		.loc 1 182 0
 602 0052 0F23     		movs	r3, #15
 603 0054 FC18     		adds	r4, r7, r3
 604 0056 0320     		movs	r0, #3
 605 0058 FFF7FEFF 		bl	gpib_wait_for_line_to_unassert
 606 005c 0300     		movs	r3, r0
 607 005e 2370     		strb	r3, [r4]
 608 0060 00E0     		b	.L45
 609              	.L47:
 170:gpib.c        ****     
 610              		.loc 1 170 0
 611 0062 C046     		nop
 612              	.L45:
 183:gpib.c        **** 
 184:gpib.c        **** cleanup:    
 185:gpib.c        ****     // Stop transmitting and clear the data
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 15


 186:gpib.c        ****     gpib_unassert_line(DAV);
 613              		.loc 1 186 0
 614 0064 0520     		movs	r0, #5
 615 0066 FFF7FEFF 		bl	gpib_unassert_line
 187:gpib.c        ****     (*(reg32 *)DIO__DR) = 0xff;
 616              		.loc 1 187 0
 617 006a 064B     		ldr	r3, .L48
 618 006c FF22     		movs	r2, #255
 619 006e 1A60     		str	r2, [r3]
 188:gpib.c        **** 
 189:gpib.c        ****     // Unassert anyway...
 190:gpib.c        ****     gpib_unassert_line(EOI);
 620              		.loc 1 190 0
 621 0070 0620     		movs	r0, #6
 622 0072 FFF7FEFF 		bl	gpib_unassert_line
 191:gpib.c        ****     
 192:gpib.c        ****     return ok;
 623              		.loc 1 192 0
 624 0076 0F23     		movs	r3, #15
 625 0078 FB18     		adds	r3, r7, r3
 626 007a 1B78     		ldrb	r3, [r3]
 193:gpib.c        ****  }
 627              		.loc 1 193 0
 628 007c 1800     		movs	r0, r3
 629 007e BD46     		mov	sp, r7
 630 0080 05B0     		add	sp, sp, #20
 631              		@ sp needed
 632 0082 90BD     		pop	{r4, r7, pc}
 633              	.L49:
 634              		.align	2
 635              	.L48:
 636 0084 00020440 		.word	1074004480
 637              		.cfi_endproc
 638              	.LFE43:
 639              		.size	gpib_send_byte, .-gpib_send_byte
 640              		.section	.text.gpib_receive_byte,"ax",%progbits
 641              		.align	2
 642              		.global	gpib_receive_byte
 643              		.code	16
 644              		.thumb_func
 645              		.type	gpib_receive_byte, %function
 646              	gpib_receive_byte:
 647              	.LFB44:
 194:gpib.c        **** 
 195:gpib.c        **** /**
 196:gpib.c        ****  * Read a character from the GPIB bus, return 0 if we got a timeout
 197:gpib.c        ****  * or 1 on success.
 198:gpib.c        ****  */
 199:gpib.c        **** int gpib_receive_byte(uint8_t *byte, int *eoi) {
 648              		.loc 1 199 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 16
 651              		@ frame_needed = 1, uses_anonymous_args = 0
 652 0000 80B5     		push	{r7, lr}
 653              		.cfi_def_cfa_offset 8
 654              		.cfi_offset 7, -8
 655              		.cfi_offset 14, -4
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 16


 656 0002 84B0     		sub	sp, sp, #16
 657              		.cfi_def_cfa_offset 24
 658 0004 00AF     		add	r7, sp, #0
 659              		.cfi_def_cfa_register 7
 660 0006 7860     		str	r0, [r7, #4]
 661 0008 3960     		str	r1, [r7]
 200:gpib.c        ****     int ok;
 201:gpib.c        ****     
 202:gpib.c        ****     gpib_assert_line(NDAC);
 662              		.loc 1 202 0
 663 000a 0320     		movs	r0, #3
 664 000c FFF7FEFF 		bl	gpib_assert_line
 203:gpib.c        ****     
 204:gpib.c        ****     /*
 205:gpib.c        ****     // Prepare to receive...
 206:gpib.c        ****     gpib_assert_line(NRFD);
 207:gpib.c        ****     
 208:gpib.c        ****     // Why do they unassert ATN if it's set??
 209:gpib.c        ****     */
 210:gpib.c        ****     
 211:gpib.c        ****     // Signal our readiness... (should alreadt be done)
 212:gpib.c        ****     gpib_unassert_line(NRFD);
 665              		.loc 1 212 0
 666 0010 0420     		movs	r0, #4
 667 0012 FFF7FEFF 		bl	gpib_unassert_line
 213:gpib.c        ****     
 214:gpib.c        ****     
 215:gpib.c        ****     // Wait for data to be available...
 216:gpib.c        ****     ok = gpib_wait_for_line_to_assert(DAV);
 668              		.loc 1 216 0
 669 0016 0520     		movs	r0, #5
 670 0018 FFF7FEFF 		bl	gpib_wait_for_line_to_assert
 671 001c 0300     		movs	r3, r0
 672 001e FB60     		str	r3, [r7, #12]
 217:gpib.c        ****     if (!ok) {
 673              		.loc 1 217 0
 674 0020 FB68     		ldr	r3, [r7, #12]
 675 0022 002B     		cmp	r3, #0
 676 0024 07D1     		bne	.L51
 218:gpib.c        ****         gpib_unassert_line(NRFD);
 677              		.loc 1 218 0
 678 0026 0420     		movs	r0, #4
 679 0028 FFF7FEFF 		bl	gpib_unassert_line
 219:gpib.c        ****         gpib_unassert_line(NDAC);
 680              		.loc 1 219 0
 681 002c 0320     		movs	r0, #3
 682 002e FFF7FEFF 		bl	gpib_unassert_line
 220:gpib.c        ****         return 0;
 683              		.loc 1 220 0
 684 0032 0023     		movs	r3, #0
 685 0034 26E0     		b	.L52
 686              	.L51:
 221:gpib.c        ****     }
 222:gpib.c        ****     // Not ready for more data at this point
 223:gpib.c        ****     gpib_assert_line(NRFD);
 687              		.loc 1 223 0
 688 0036 0420     		movs	r0, #4
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 17


 689 0038 FFF7FEFF 		bl	gpib_assert_line
 224:gpib.c        ****     
 225:gpib.c        ****     // Read the data...
 226:gpib.c        ****     *byte = ~(*(reg32 *)DIO__PS);
 690              		.loc 1 226 0
 691 003c 134B     		ldr	r3, .L54
 692 003e 1B68     		ldr	r3, [r3]
 693 0040 DBB2     		uxtb	r3, r3
 694 0042 DB43     		mvns	r3, r3
 695 0044 DAB2     		uxtb	r2, r3
 696 0046 7B68     		ldr	r3, [r7, #4]
 697 0048 1A70     		strb	r2, [r3]
 227:gpib.c        ****     *eoi = gpib_read_line(EOI);
 698              		.loc 1 227 0
 699 004a 0620     		movs	r0, #6
 700 004c FFF7FEFF 		bl	gpib_read_line
 701 0050 0300     		movs	r3, r0
 702 0052 1A00     		movs	r2, r3
 703 0054 3B68     		ldr	r3, [r7]
 704 0056 1A60     		str	r2, [r3]
 228:gpib.c        ****     
 229:gpib.c        ****     // If byte is NL (10 decimal) then it's the same as EOI
 230:gpib.c        ****     if (*byte == 10) {
 705              		.loc 1 230 0
 706 0058 7B68     		ldr	r3, [r7, #4]
 707 005a 1B78     		ldrb	r3, [r3]
 708 005c 0A2B     		cmp	r3, #10
 709 005e 02D1     		bne	.L53
 231:gpib.c        ****         *eoi = true;    // TODO
 710              		.loc 1 231 0
 711 0060 3B68     		ldr	r3, [r7]
 712 0062 0122     		movs	r2, #1
 713 0064 1A60     		str	r2, [r3]
 714              	.L53:
 232:gpib.c        ****     }
 233:gpib.c        ****     
 234:gpib.c        ****     
 235:gpib.c        ****     // We've read it...
 236:gpib.c        ****     gpib_unassert_line(NDAC);
 715              		.loc 1 236 0
 716 0066 0320     		movs	r0, #3
 717 0068 FFF7FEFF 		bl	gpib_unassert_line
 237:gpib.c        ****  //   gpib_settle();                  // why would we do this?
 238:gpib.c        ****     
 239:gpib.c        ****     // Wait for the talker to finish this byte
 240:gpib.c        ****     ok = gpib_wait_for_line_to_unassert(DAV);    
 718              		.loc 1 240 0
 719 006c 0520     		movs	r0, #5
 720 006e FFF7FEFF 		bl	gpib_wait_for_line_to_unassert
 721 0072 0300     		movs	r3, r0
 722 0074 FB60     		str	r3, [r7, #12]
 241:gpib.c        **** 
 242:gpib.c        **** //cleanup:
 243:gpib.c        ****     gpib_assert_line(NDAC);
 723              		.loc 1 243 0
 724 0076 0320     		movs	r0, #3
 725 0078 FFF7FEFF 		bl	gpib_assert_line
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 18


 244:gpib.c        ****     gpib_unassert_line(NRFD);   // we are still ready for data
 726              		.loc 1 244 0
 727 007c 0420     		movs	r0, #4
 728 007e FFF7FEFF 		bl	gpib_unassert_line
 245:gpib.c        ****  
 246:gpib.c        ****     //gpib_settle();
 247:gpib.c        ****     
 248:gpib.c        ****     return ok;
 729              		.loc 1 248 0
 730 0082 FB68     		ldr	r3, [r7, #12]
 731              	.L52:
 249:gpib.c        **** }
 732              		.loc 1 249 0
 733 0084 1800     		movs	r0, r3
 734 0086 BD46     		mov	sp, r7
 735 0088 04B0     		add	sp, sp, #16
 736              		@ sp needed
 737 008a 80BD     		pop	{r7, pc}
 738              	.L55:
 739              		.align	2
 740              	.L54:
 741 008c 04020440 		.word	1074004484
 742              		.cfi_endproc
 743              	.LFE44:
 744              		.size	gpib_receive_byte, .-gpib_receive_byte
 745              		.section	.text.gpib_interface_clear,"ax",%progbits
 746              		.align	2
 747              		.global	gpib_interface_clear
 748              		.code	16
 749              		.thumb_func
 750              		.type	gpib_interface_clear, %function
 751              	gpib_interface_clear:
 752              	.LFB45:
 250:gpib.c        **** 
 251:gpib.c        **** void gpib_interface_clear() {
 753              		.loc 1 251 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757 0000 80B5     		push	{r7, lr}
 758              		.cfi_def_cfa_offset 8
 759              		.cfi_offset 7, -8
 760              		.cfi_offset 14, -4
 761 0002 00AF     		add	r7, sp, #0
 762              		.cfi_def_cfa_register 7
 252:gpib.c        ****     gpib_assert_line(IFC);
 763              		.loc 1 252 0
 764 0004 0220     		movs	r0, #2
 765 0006 FFF7FEFF 		bl	gpib_assert_line
 253:gpib.c        ****     CyDelayUs(150);
 766              		.loc 1 253 0
 767 000a 9620     		movs	r0, #150
 768 000c FFF7FEFF 		bl	CyDelayUs
 254:gpib.c        ****     gpib_unassert_line(IFC);
 769              		.loc 1 254 0
 770 0010 0220     		movs	r0, #2
 771 0012 FFF7FEFF 		bl	gpib_unassert_line
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 19


 255:gpib.c        ****     CyDelayUs(150);                 // do we need to delay afterwards?
 772              		.loc 1 255 0
 773 0016 9620     		movs	r0, #150
 774 0018 FFF7FEFF 		bl	CyDelayUs
 256:gpib.c        **** }
 775              		.loc 1 256 0
 776 001c C046     		nop
 777 001e BD46     		mov	sp, r7
 778              		@ sp needed
 779 0020 80BD     		pop	{r7, pc}
 780              		.cfi_endproc
 781              	.LFE45:
 782              		.size	gpib_interface_clear, .-gpib_interface_clear
 783 0022 C046     		.section	.text.gpib_LAD,"ax",%progbits
 784              		.align	2
 785              		.global	gpib_LAD
 786              		.code	16
 787              		.thumb_func
 788              		.type	gpib_LAD, %function
 789              	gpib_LAD:
 790              	.LFB46:
 257:gpib.c        **** 
 258:gpib.c        **** void gpib_LAD(uint8_t address) {
 791              		.loc 1 258 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 8
 794              		@ frame_needed = 1, uses_anonymous_args = 0
 795 0000 80B5     		push	{r7, lr}
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 7, -8
 798              		.cfi_offset 14, -4
 799 0002 82B0     		sub	sp, sp, #8
 800              		.cfi_def_cfa_offset 16
 801 0004 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 803 0006 0200     		movs	r2, r0
 804 0008 FB1D     		adds	r3, r7, #7
 805 000a 1A70     		strb	r2, [r3]
 259:gpib.c        ****     gpib_send_byte(0x20 + address, false);
 806              		.loc 1 259 0
 807 000c FB1D     		adds	r3, r7, #7
 808 000e 1B78     		ldrb	r3, [r3]
 809 0010 2033     		adds	r3, r3, #32
 810 0012 DBB2     		uxtb	r3, r3
 811 0014 0021     		movs	r1, #0
 812 0016 1800     		movs	r0, r3
 813 0018 FFF7FEFF 		bl	gpib_send_byte
 260:gpib.c        **** }
 814              		.loc 1 260 0
 815 001c C046     		nop
 816 001e BD46     		mov	sp, r7
 817 0020 02B0     		add	sp, sp, #8
 818              		@ sp needed
 819 0022 80BD     		pop	{r7, pc}
 820              		.cfi_endproc
 821              	.LFE46:
 822              		.size	gpib_LAD, .-gpib_LAD
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 20


 823              		.section	.text.gpib_TAD,"ax",%progbits
 824              		.align	2
 825              		.global	gpib_TAD
 826              		.code	16
 827              		.thumb_func
 828              		.type	gpib_TAD, %function
 829              	gpib_TAD:
 830              	.LFB47:
 261:gpib.c        **** 
 262:gpib.c        **** void gpib_TAD(uint8_t address) {
 831              		.loc 1 262 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 8
 834              		@ frame_needed = 1, uses_anonymous_args = 0
 835 0000 80B5     		push	{r7, lr}
 836              		.cfi_def_cfa_offset 8
 837              		.cfi_offset 7, -8
 838              		.cfi_offset 14, -4
 839 0002 82B0     		sub	sp, sp, #8
 840              		.cfi_def_cfa_offset 16
 841 0004 00AF     		add	r7, sp, #0
 842              		.cfi_def_cfa_register 7
 843 0006 0200     		movs	r2, r0
 844 0008 FB1D     		adds	r3, r7, #7
 845 000a 1A70     		strb	r2, [r3]
 263:gpib.c        ****     gpib_send_byte(0x40 + address, false);
 846              		.loc 1 263 0
 847 000c FB1D     		adds	r3, r7, #7
 848 000e 1B78     		ldrb	r3, [r3]
 849 0010 4033     		adds	r3, r3, #64
 850 0012 DBB2     		uxtb	r3, r3
 851 0014 0021     		movs	r1, #0
 852 0016 1800     		movs	r0, r3
 853 0018 FFF7FEFF 		bl	gpib_send_byte
 264:gpib.c        **** }
 854              		.loc 1 264 0
 855 001c C046     		nop
 856 001e BD46     		mov	sp, r7
 857 0020 02B0     		add	sp, sp, #8
 858              		@ sp needed
 859 0022 80BD     		pop	{r7, pc}
 860              		.cfi_endproc
 861              	.LFE47:
 862              		.size	gpib_TAD, .-gpib_TAD
 863              		.section	.text.gpib_UNL,"ax",%progbits
 864              		.align	2
 865              		.global	gpib_UNL
 866              		.code	16
 867              		.thumb_func
 868              		.type	gpib_UNL, %function
 869              	gpib_UNL:
 870              	.LFB48:
 265:gpib.c        **** 
 266:gpib.c        **** void gpib_UNL() {
 871              		.loc 1 266 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 21


 874              		@ frame_needed = 1, uses_anonymous_args = 0
 875 0000 80B5     		push	{r7, lr}
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 7, -8
 878              		.cfi_offset 14, -4
 879 0002 00AF     		add	r7, sp, #0
 880              		.cfi_def_cfa_register 7
 267:gpib.c        ****     gpib_LAD(31);
 881              		.loc 1 267 0
 882 0004 1F20     		movs	r0, #31
 883 0006 FFF7FEFF 		bl	gpib_LAD
 268:gpib.c        **** }
 884              		.loc 1 268 0
 885 000a C046     		nop
 886 000c BD46     		mov	sp, r7
 887              		@ sp needed
 888 000e 80BD     		pop	{r7, pc}
 889              		.cfi_endproc
 890              	.LFE48:
 891              		.size	gpib_UNL, .-gpib_UNL
 892              		.section	.text.gpib_UNT,"ax",%progbits
 893              		.align	2
 894              		.global	gpib_UNT
 895              		.code	16
 896              		.thumb_func
 897              		.type	gpib_UNT, %function
 898              	gpib_UNT:
 899              	.LFB49:
 269:gpib.c        **** 
 270:gpib.c        **** void gpib_UNT() {
 900              		.loc 1 270 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 0000 80B5     		push	{r7, lr}
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 7, -8
 907              		.cfi_offset 14, -4
 908 0002 00AF     		add	r7, sp, #0
 909              		.cfi_def_cfa_register 7
 271:gpib.c        ****     gpib_TAD(31);
 910              		.loc 1 271 0
 911 0004 1F20     		movs	r0, #31
 912 0006 FFF7FEFF 		bl	gpib_TAD
 272:gpib.c        **** }
 913              		.loc 1 272 0
 914 000a C046     		nop
 915 000c BD46     		mov	sp, r7
 916              		@ sp needed
 917 000e 80BD     		pop	{r7, pc}
 918              		.cfi_endproc
 919              	.LFE49:
 920              		.size	gpib_UNT, .-gpib_UNT
 921              		.section	.text.gpib_send_SDC,"ax",%progbits
 922              		.align	2
 923              		.global	gpib_send_SDC
 924              		.code	16
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 22


 925              		.thumb_func
 926              		.type	gpib_send_SDC, %function
 927              	gpib_send_SDC:
 928              	.LFB50:
 273:gpib.c        **** 
 274:gpib.c        **** // TODO: this all needs to be tidied and parameterised ... horrible!
 275:gpib.c        **** void gpib_send_SDC() {
 929              		.loc 1 275 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 0
 932              		@ frame_needed = 1, uses_anonymous_args = 0
 933 0000 80B5     		push	{r7, lr}
 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 00AF     		add	r7, sp, #0
 938              		.cfi_def_cfa_register 7
 276:gpib.c        ****     gpib_assert_line(ATN);
 939              		.loc 1 276 0
 940 0004 0020     		movs	r0, #0
 941 0006 FFF7FEFF 		bl	gpib_assert_line
 277:gpib.c        ****     gpib_settle();                  // do we need this?
 942              		.loc 1 277 0
 943 000a FFF7FEFF 		bl	gpib_settle
 278:gpib.c        ****     gpib_send_byte(0x04, false);
 944              		.loc 1 278 0
 945 000e 0021     		movs	r1, #0
 946 0010 0420     		movs	r0, #4
 947 0012 FFF7FEFF 		bl	gpib_send_byte
 279:gpib.c        ****     gpib_unassert_line(ATN);
 948              		.loc 1 279 0
 949 0016 0020     		movs	r0, #0
 950 0018 FFF7FEFF 		bl	gpib_unassert_line
 280:gpib.c        ****     gpib_settle();                  // do we need this?
 951              		.loc 1 280 0
 952 001c FFF7FEFF 		bl	gpib_settle
 281:gpib.c        **** }
 953              		.loc 1 281 0
 954 0020 C046     		nop
 955 0022 BD46     		mov	sp, r7
 956              		@ sp needed
 957 0024 80BD     		pop	{r7, pc}
 958              		.cfi_endproc
 959              	.LFE50:
 960              		.size	gpib_send_SDC, .-gpib_send_SDC
 961 0026 C046     		.section	.text.gpib_send_LLO,"ax",%progbits
 962              		.align	2
 963              		.global	gpib_send_LLO
 964              		.code	16
 965              		.thumb_func
 966              		.type	gpib_send_LLO, %function
 967              	gpib_send_LLO:
 968              	.LFB51:
 282:gpib.c        **** void gpib_send_LLO() {
 969              		.loc 1 282 0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 23


 972              		@ frame_needed = 1, uses_anonymous_args = 0
 973 0000 80B5     		push	{r7, lr}
 974              		.cfi_def_cfa_offset 8
 975              		.cfi_offset 7, -8
 976              		.cfi_offset 14, -4
 977 0002 00AF     		add	r7, sp, #0
 978              		.cfi_def_cfa_register 7
 283:gpib.c        ****     gpib_assert_line(ATN);
 979              		.loc 1 283 0
 980 0004 0020     		movs	r0, #0
 981 0006 FFF7FEFF 		bl	gpib_assert_line
 284:gpib.c        ****     gpib_settle();                  // do we need this?
 982              		.loc 1 284 0
 983 000a FFF7FEFF 		bl	gpib_settle
 285:gpib.c        ****     gpib_send_byte(0x11, false);
 984              		.loc 1 285 0
 985 000e 0021     		movs	r1, #0
 986 0010 1120     		movs	r0, #17
 987 0012 FFF7FEFF 		bl	gpib_send_byte
 286:gpib.c        ****     gpib_unassert_line(ATN);
 988              		.loc 1 286 0
 989 0016 0020     		movs	r0, #0
 990 0018 FFF7FEFF 		bl	gpib_unassert_line
 287:gpib.c        ****     gpib_settle();                  // do we need this?
 991              		.loc 1 287 0
 992 001c FFF7FEFF 		bl	gpib_settle
 288:gpib.c        **** }
 993              		.loc 1 288 0
 994 0020 C046     		nop
 995 0022 BD46     		mov	sp, r7
 996              		@ sp needed
 997 0024 80BD     		pop	{r7, pc}
 998              		.cfi_endproc
 999              	.LFE51:
 1000              		.size	gpib_send_LLO, .-gpib_send_LLO
 1001 0026 C046     		.section	.text.gpib_send_GTL,"ax",%progbits
 1002              		.align	2
 1003              		.global	gpib_send_GTL
 1004              		.code	16
 1005              		.thumb_func
 1006              		.type	gpib_send_GTL, %function
 1007              	gpib_send_GTL:
 1008              	.LFB52:
 289:gpib.c        **** // need REN unasserted for this one...
 290:gpib.c        **** void gpib_send_GTL() {
 1009              		.loc 1 290 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 0
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013 0000 80B5     		push	{r7, lr}
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 7, -8
 1016              		.cfi_offset 14, -4
 1017 0002 00AF     		add	r7, sp, #0
 1018              		.cfi_def_cfa_register 7
 291:gpib.c        ****     gpib_unassert_line(REN);
 1019              		.loc 1 291 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 24


 1020 0004 0720     		movs	r0, #7
 1021 0006 FFF7FEFF 		bl	gpib_unassert_line
 292:gpib.c        ****     gpib_assert_line(ATN);
 1022              		.loc 1 292 0
 1023 000a 0020     		movs	r0, #0
 1024 000c FFF7FEFF 		bl	gpib_assert_line
 293:gpib.c        ****     gpib_settle();                  // do we need this?
 1025              		.loc 1 293 0
 1026 0010 FFF7FEFF 		bl	gpib_settle
 294:gpib.c        ****     gpib_send_byte(0x01, false);
 1027              		.loc 1 294 0
 1028 0014 0021     		movs	r1, #0
 1029 0016 0120     		movs	r0, #1
 1030 0018 FFF7FEFF 		bl	gpib_send_byte
 295:gpib.c        ****     gpib_unassert_line(ATN);
 1031              		.loc 1 295 0
 1032 001c 0020     		movs	r0, #0
 1033 001e FFF7FEFF 		bl	gpib_unassert_line
 296:gpib.c        ****     gpib_settle();                  // do we need this?
 1034              		.loc 1 296 0
 1035 0022 FFF7FEFF 		bl	gpib_settle
 297:gpib.c        **** }
 1036              		.loc 1 297 0
 1037 0026 C046     		nop
 1038 0028 BD46     		mov	sp, r7
 1039              		@ sp needed
 1040 002a 80BD     		pop	{r7, pc}
 1041              		.cfi_endproc
 1042              	.LFE52:
 1043              		.size	gpib_send_GTL, .-gpib_send_GTL
 1044              		.section	.text.gpib_address_listener,"ax",%progbits
 1045              		.align	2
 1046              		.global	gpib_address_listener
 1047              		.code	16
 1048              		.thumb_func
 1049              		.type	gpib_address_listener, %function
 1050              	gpib_address_listener:
 1051              	.LFB53:
 298:gpib.c        **** 
 299:gpib.c        **** void gpib_address_listener(uint8_t address) {
 1052              		.loc 1 299 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 8
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056 0000 80B5     		push	{r7, lr}
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 7, -8
 1059              		.cfi_offset 14, -4
 1060 0002 82B0     		sub	sp, sp, #8
 1061              		.cfi_def_cfa_offset 16
 1062 0004 00AF     		add	r7, sp, #0
 1063              		.cfi_def_cfa_register 7
 1064 0006 0200     		movs	r2, r0
 1065 0008 FB1D     		adds	r3, r7, #7
 1066 000a 1A70     		strb	r2, [r3]
 300:gpib.c        ****     
 301:gpib.c        ****     if (listening == address) {
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 25


 1067              		.loc 1 301 0
 1068 000c FB1D     		adds	r3, r7, #7
 1069 000e 1A78     		ldrb	r2, [r3]
 1070 0010 1A4B     		ldr	r3, .L68
 1071 0012 1B68     		ldr	r3, [r3]
 1072 0014 9A42     		cmp	r2, r3
 1073 0016 2CD0     		beq	.L67
 302:gpib.c        ****         return;
 303:gpib.c        ****     }
 304:gpib.c        ****     
 305:gpib.c        ****     // Need to enable "REMOTE" so devices will enter remote mode
 306:gpib.c        ****     // TODO: this should probably be an option??
 307:gpib.c        ****     // TODO: do we need to undo this for a talker??
 308:gpib.c        ****     
 309:gpib.c        ****     gpib_unassert_line(NRFD);
 1074              		.loc 1 309 0
 1075 0018 0420     		movs	r0, #4
 1076 001a FFF7FEFF 		bl	gpib_unassert_line
 310:gpib.c        ****     gpib_unassert_line(NDAC);
 1077              		.loc 1 310 0
 1078 001e 0320     		movs	r0, #3
 1079 0020 FFF7FEFF 		bl	gpib_unassert_line
 311:gpib.c        ****     
 312:gpib.c        ****     gpib_assert_line(REN);
 1080              		.loc 1 312 0
 1081 0024 0720     		movs	r0, #7
 1082 0026 FFF7FEFF 		bl	gpib_assert_line
 313:gpib.c        ****     gpib_settle();                  // do we need this?
 1083              		.loc 1 313 0
 1084 002a FFF7FEFF 		bl	gpib_settle
 314:gpib.c        **** 
 315:gpib.c        ****     gpib_assert_line(ATN);
 1085              		.loc 1 315 0
 1086 002e 0020     		movs	r0, #0
 1087 0030 FFF7FEFF 		bl	gpib_assert_line
 316:gpib.c        ****     gpib_settle();                  // do we need this?
 1088              		.loc 1 316 0
 1089 0034 FFF7FEFF 		bl	gpib_settle
 317:gpib.c        ****     
 318:gpib.c        ****     gpib_UNL();     // stop everyone listening
 1090              		.loc 1 318 0
 1091 0038 FFF7FEFF 		bl	gpib_UNL
 319:gpib.c        ****     gpib_UNT();     // stop everyone talking
 1092              		.loc 1 319 0
 1093 003c FFF7FEFF 		bl	gpib_UNT
 320:gpib.c        ****     gpib_LAD(address);
 1094              		.loc 1 320 0
 1095 0040 FB1D     		adds	r3, r7, #7
 1096 0042 1B78     		ldrb	r3, [r3]
 1097 0044 1800     		movs	r0, r3
 1098 0046 FFF7FEFF 		bl	gpib_LAD
 321:gpib.c        ****     gpib_TAD(my_address);
 1099              		.loc 1 321 0
 1100 004a 0D4B     		ldr	r3, .L68+4
 1101 004c 1B78     		ldrb	r3, [r3]
 1102 004e 1800     		movs	r0, r3
 1103 0050 FFF7FEFF 		bl	gpib_TAD
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 26


 322:gpib.c        ****     
 323:gpib.c        ****     gpib_unassert_line(ATN);
 1104              		.loc 1 323 0
 1105 0054 0020     		movs	r0, #0
 1106 0056 FFF7FEFF 		bl	gpib_unassert_line
 324:gpib.c        ****     gpib_settle();              // do we need this?
 1107              		.loc 1 324 0
 1108 005a FFF7FEFF 		bl	gpib_settle
 325:gpib.c        ****     
 326:gpib.c        ****     listening = address;
 1109              		.loc 1 326 0
 1110 005e FB1D     		adds	r3, r7, #7
 1111 0060 1A78     		ldrb	r2, [r3]
 1112 0062 064B     		ldr	r3, .L68
 1113 0064 1A60     		str	r2, [r3]
 327:gpib.c        ****     talking = my_address;
 1114              		.loc 1 327 0
 1115 0066 064B     		ldr	r3, .L68+4
 1116 0068 1B78     		ldrb	r3, [r3]
 1117 006a 1A00     		movs	r2, r3
 1118 006c 054B     		ldr	r3, .L68+8
 1119 006e 1A60     		str	r2, [r3]
 1120 0070 00E0     		b	.L64
 1121              	.L67:
 302:gpib.c        ****     }
 1122              		.loc 1 302 0
 1123 0072 C046     		nop
 1124              	.L64:
 328:gpib.c        **** }
 1125              		.loc 1 328 0
 1126 0074 BD46     		mov	sp, r7
 1127 0076 02B0     		add	sp, sp, #8
 1128              		@ sp needed
 1129 0078 80BD     		pop	{r7, pc}
 1130              	.L69:
 1131 007a C046     		.align	2
 1132              	.L68:
 1133 007c 00000000 		.word	listening
 1134 0080 00000000 		.word	my_address
 1135 0084 00000000 		.word	talking
 1136              		.cfi_endproc
 1137              	.LFE53:
 1138              		.size	gpib_address_listener, .-gpib_address_listener
 1139              		.section	.text.gpib_address_talker,"ax",%progbits
 1140              		.align	2
 1141              		.global	gpib_address_talker
 1142              		.code	16
 1143              		.thumb_func
 1144              		.type	gpib_address_talker, %function
 1145              	gpib_address_talker:
 1146              	.LFB54:
 329:gpib.c        **** 
 330:gpib.c        **** void gpib_address_talker(uint8_t address) {
 1147              		.loc 1 330 0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 8
 1150              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 27


 1151 0000 80B5     		push	{r7, lr}
 1152              		.cfi_def_cfa_offset 8
 1153              		.cfi_offset 7, -8
 1154              		.cfi_offset 14, -4
 1155 0002 82B0     		sub	sp, sp, #8
 1156              		.cfi_def_cfa_offset 16
 1157 0004 00AF     		add	r7, sp, #0
 1158              		.cfi_def_cfa_register 7
 1159 0006 0200     		movs	r2, r0
 1160 0008 FB1D     		adds	r3, r7, #7
 1161 000a 1A70     		strb	r2, [r3]
 331:gpib.c        **** 
 332:gpib.c        ****     if (talking == address) {
 1162              		.loc 1 332 0
 1163 000c FB1D     		adds	r3, r7, #7
 1164 000e 1A78     		ldrb	r2, [r3]
 1165 0010 1C4B     		ldr	r3, .L74
 1166 0012 1B68     		ldr	r3, [r3]
 1167 0014 9A42     		cmp	r2, r3
 1168 0016 30D0     		beq	.L73
 333:gpib.c        ****         return;
 334:gpib.c        ****     }
 335:gpib.c        ****     
 336:gpib.c        ****     // Make sure we are not asserting any handshake stuff...
 337:gpib.c        ****     gpib_unassert_line(NRFD);
 1169              		.loc 1 337 0
 1170 0018 0420     		movs	r0, #4
 1171 001a FFF7FEFF 		bl	gpib_unassert_line
 338:gpib.c        ****     gpib_unassert_line(NDAC);
 1172              		.loc 1 338 0
 1173 001e 0320     		movs	r0, #3
 1174 0020 FFF7FEFF 		bl	gpib_unassert_line
 339:gpib.c        ****  
 340:gpib.c        ****     // 
 341:gpib.c        ****     gpib_assert_line(ATN);
 1175              		.loc 1 341 0
 1176 0024 0020     		movs	r0, #0
 1177 0026 FFF7FEFF 		bl	gpib_assert_line
 342:gpib.c        ****     gpib_settle();                  // do we need this?
 1178              		.loc 1 342 0
 1179 002a FFF7FEFF 		bl	gpib_settle
 343:gpib.c        ****     
 344:gpib.c        ****     gpib_UNL();     // stop everyone listening
 1180              		.loc 1 344 0
 1181 002e FFF7FEFF 		bl	gpib_UNL
 345:gpib.c        ****     gpib_UNT();     // stop everyone talking
 1182              		.loc 1 345 0
 1183 0032 FFF7FEFF 		bl	gpib_UNT
 346:gpib.c        ****     gpib_LAD(my_address);
 1184              		.loc 1 346 0
 1185 0036 144B     		ldr	r3, .L74+4
 1186 0038 1B78     		ldrb	r3, [r3]
 1187 003a 1800     		movs	r0, r3
 1188 003c FFF7FEFF 		bl	gpib_LAD
 347:gpib.c        ****     gpib_TAD(address);
 1189              		.loc 1 347 0
 1190 0040 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 28


 1191 0042 1B78     		ldrb	r3, [r3]
 1192 0044 1800     		movs	r0, r3
 1193 0046 FFF7FEFF 		bl	gpib_TAD
 348:gpib.c        ****     
 349:gpib.c        ****     gpib_unassert_line(ATN);
 1194              		.loc 1 349 0
 1195 004a 0020     		movs	r0, #0
 1196 004c FFF7FEFF 		bl	gpib_unassert_line
 350:gpib.c        ****     gpib_settle();              // do we need this?
 1197              		.loc 1 350 0
 1198 0050 FFF7FEFF 		bl	gpib_settle
 351:gpib.c        ****     
 352:gpib.c        ****     // Prepare to receive... should NDAC be earlier to avoid both high errors
 353:gpib.c        ****     gpib_assert_line(NRFD);
 1199              		.loc 1 353 0
 1200 0054 0420     		movs	r0, #4
 1201 0056 FFF7FEFF 		bl	gpib_assert_line
 354:gpib.c        ****     gpib_assert_line(NDAC);
 1202              		.loc 1 354 0
 1203 005a 0320     		movs	r0, #3
 1204 005c FFF7FEFF 		bl	gpib_assert_line
 355:gpib.c        ****     
 356:gpib.c        ****     // Signal our readiness...
 357:gpib.c        ****     gpib_unassert_line(NRFD);
 1205              		.loc 1 357 0
 1206 0060 0420     		movs	r0, #4
 1207 0062 FFF7FEFF 		bl	gpib_unassert_line
 358:gpib.c        ****     
 359:gpib.c        ****     talking = address;
 1208              		.loc 1 359 0
 1209 0066 FB1D     		adds	r3, r7, #7
 1210 0068 1A78     		ldrb	r2, [r3]
 1211 006a 064B     		ldr	r3, .L74
 1212 006c 1A60     		str	r2, [r3]
 360:gpib.c        ****     listening = my_address;
 1213              		.loc 1 360 0
 1214 006e 064B     		ldr	r3, .L74+4
 1215 0070 1B78     		ldrb	r3, [r3]
 1216 0072 1A00     		movs	r2, r3
 1217 0074 054B     		ldr	r3, .L74+8
 1218 0076 1A60     		str	r2, [r3]
 1219 0078 00E0     		b	.L70
 1220              	.L73:
 333:gpib.c        ****     }
 1221              		.loc 1 333 0
 1222 007a C046     		nop
 1223              	.L70:
 361:gpib.c        **** }
 1224              		.loc 1 361 0
 1225 007c BD46     		mov	sp, r7
 1226 007e 02B0     		add	sp, sp, #8
 1227              		@ sp needed
 1228 0080 80BD     		pop	{r7, pc}
 1229              	.L75:
 1230 0082 C046     		.align	2
 1231              	.L74:
 1232 0084 00000000 		.word	talking
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 29


 1233 0088 00000000 		.word	my_address
 1234 008c 00000000 		.word	listening
 1235              		.cfi_endproc
 1236              	.LFE54:
 1237              		.size	gpib_address_talker, .-gpib_address_talker
 1238              		.section	.text.gpib_talking,"ax",%progbits
 1239              		.align	2
 1240              		.global	gpib_talking
 1241              		.code	16
 1242              		.thumb_func
 1243              		.type	gpib_talking, %function
 1244              	gpib_talking:
 1245              	.LFB55:
 362:gpib.c        **** 
 363:gpib.c        **** /**
 364:gpib.c        ****  * See if the talker has put some data on the bus...
 365:gpib.c        ****  */
 366:gpib.c        **** // TODO: get rid of bool
 367:gpib.c        **** bool gpib_talking() {
 1246              		.loc 1 367 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 0
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250 0000 80B5     		push	{r7, lr}
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 00AF     		add	r7, sp, #0
 1255              		.cfi_def_cfa_register 7
 368:gpib.c        ****     return gpib_read_line(DAV);
 1256              		.loc 1 368 0
 1257 0004 0520     		movs	r0, #5
 1258 0006 FFF7FEFF 		bl	gpib_read_line
 1259 000a 0300     		movs	r3, r0
 369:gpib.c        **** }
 1260              		.loc 1 369 0
 1261 000c 1800     		movs	r0, r3
 1262 000e BD46     		mov	sp, r7
 1263              		@ sp needed
 1264 0010 80BD     		pop	{r7, pc}
 1265              		.cfi_endproc
 1266              	.LFE55:
 1267              		.size	gpib_talking, .-gpib_talking
 1268 0012 C046     		.section	.text.gpib_send_bytes,"ax",%progbits
 1269              		.align	2
 1270              		.global	gpib_send_bytes
 1271              		.code	16
 1272              		.thumb_func
 1273              		.type	gpib_send_bytes, %function
 1274              	gpib_send_bytes:
 1275              	.LFB56:
 370:gpib.c        **** 
 371:gpib.c        **** /**
 372:gpib.c        ****  * Send a buffer over the GPIB interface, do the right thing with EO
 373:gpib.c        ****  * unless we have it disabled.
 374:gpib.c        ****  */
 375:gpib.c        **** // TODO: error checking and return
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 30


 376:gpib.c        **** void gpib_send_bytes(const uint8_t *buf, int len, int last) {
 1276              		.loc 1 376 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 24
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280 0000 80B5     		push	{r7, lr}
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 7, -8
 1283              		.cfi_offset 14, -4
 1284 0002 86B0     		sub	sp, sp, #24
 1285              		.cfi_def_cfa_offset 32
 1286 0004 00AF     		add	r7, sp, #0
 1287              		.cfi_def_cfa_register 7
 1288 0006 F860     		str	r0, [r7, #12]
 1289 0008 B960     		str	r1, [r7, #8]
 1290 000a 7A60     		str	r2, [r7, #4]
 377:gpib.c        ****     int eoipos = (settings.eoi && last ? len-1 : -1);
 1291              		.loc 1 377 0
 1292 000c 134B     		ldr	r3, .L83
 1293 000e 5B89     		ldrh	r3, [r3, #10]
 1294 0010 002B     		cmp	r3, #0
 1295 0012 05D0     		beq	.L79
 1296              		.loc 1 377 0 is_stmt 0 discriminator 1
 1297 0014 7B68     		ldr	r3, [r7, #4]
 1298 0016 002B     		cmp	r3, #0
 1299 0018 02D0     		beq	.L79
 1300              		.loc 1 377 0 discriminator 3
 1301 001a BB68     		ldr	r3, [r7, #8]
 1302 001c 013B     		subs	r3, r3, #1
 1303 001e 01E0     		b	.L80
 1304              	.L79:
 1305              		.loc 1 377 0 discriminator 4
 1306 0020 0123     		movs	r3, #1
 1307 0022 5B42     		rsbs	r3, r3, #0
 1308              	.L80:
 1309              		.loc 1 377 0 discriminator 6
 1310 0024 3B61     		str	r3, [r7, #16]
 1311              	.LBB2:
 378:gpib.c        ****     
 379:gpib.c        ****     for (int i=0; i < len; i++) {
 1312              		.loc 1 379 0 is_stmt 1 discriminator 6
 1313 0026 0023     		movs	r3, #0
 1314 0028 7B61     		str	r3, [r7, #20]
 1315 002a 0FE0     		b	.L81
 1316              	.L82:
 380:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1317              		.loc 1 380 0 discriminator 3
 1318 002c 7B69     		ldr	r3, [r7, #20]
 1319 002e FA68     		ldr	r2, [r7, #12]
 1320 0030 D318     		adds	r3, r2, r3
 1321 0032 1878     		ldrb	r0, [r3]
 1322 0034 7A69     		ldr	r2, [r7, #20]
 1323 0036 3B69     		ldr	r3, [r7, #16]
 1324 0038 D31A     		subs	r3, r2, r3
 1325 003a 5A42     		rsbs	r2, r3, #0
 1326 003c 5341     		adcs	r3, r3, r2
 1327 003e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 31


 1328 0040 1900     		movs	r1, r3
 1329 0042 FFF7FEFF 		bl	gpib_send_byte
 379:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1330              		.loc 1 379 0 discriminator 3
 1331 0046 7B69     		ldr	r3, [r7, #20]
 1332 0048 0133     		adds	r3, r3, #1
 1333 004a 7B61     		str	r3, [r7, #20]
 1334              	.L81:
 379:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1335              		.loc 1 379 0 is_stmt 0 discriminator 1
 1336 004c 7A69     		ldr	r2, [r7, #20]
 1337 004e BB68     		ldr	r3, [r7, #8]
 1338 0050 9A42     		cmp	r2, r3
 1339 0052 EBDB     		blt	.L82
 1340              	.LBE2:
 381:gpib.c        ****     }
 382:gpib.c        **** }
 1341              		.loc 1 382 0 is_stmt 1
 1342 0054 C046     		nop
 1343 0056 BD46     		mov	sp, r7
 1344 0058 06B0     		add	sp, sp, #24
 1345              		@ sp needed
 1346 005a 80BD     		pop	{r7, pc}
 1347              	.L84:
 1348              		.align	2
 1349              	.L83:
 1350 005c 00000000 		.word	settings
 1351              		.cfi_endproc
 1352              	.LFE56:
 1353              		.size	gpib_send_bytes, .-gpib_send_bytes
 1354              		.section	.text.gpib_read_bytes,"ax",%progbits
 1355              		.align	2
 1356              		.global	gpib_read_bytes
 1357              		.code	16
 1358              		.thumb_func
 1359              		.type	gpib_read_bytes, %function
 1360              	gpib_read_bytes:
 1361              	.LFB57:
 383:gpib.c        **** 
 384:gpib.c        **** /**
 385:gpib.c        ****  * Read from the GPIB interface, can use different end states:
 386:gpib.c        ****  *
 387:gpib.c        ****  * until = GPIB_TIMEOUT -- keep going until we get a timeout
 388:gpib.c        ****  * until = GPIB_EOI     -- wait for the EOI indication
 389:gpib.c        ****  * until = <char>       -- wait until we get <char>
 390:gpib.c        ****  *
 391:gpib.c        ****  * end = GPIB_TIMEOUT, or GPIB_ENDED, or GPIB_NOT_ENDED
 392:gpib.c        ****  * return = number of chars
 393:gpib.c        ****  *
 394:gpib.c        ****  */
 395:gpib.c        **** /*
 396:gpib.c        **** int gpib_read(int until, int *end) {
 397:gpib.c        ****     int         i = 0;
 398:gpib.c        ****     int         eoi;
 399:gpib.c        ****     uint8_t     *buf;
 400:gpib.c        ****     
 401:gpib.c        ****     buf = gpib_buffer;
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 32


 402:gpib.c        ****     
 403:gpib.c        ****     while (i < (GPIB_BUF_SIZE-1)) {
 404:gpib.c        ****         // First case is a potential timeout (no errors on read)
 405:gpib.c        ****         if (!gpib_receive_byte(buf, &eoi)) {
 406:gpib.c        ****             *end = GPIB_TIMEOUT;
 407:gpib.c        ****             return i;
 408:gpib.c        ****         }
 409:gpib.c        ****                
 410:gpib.c        ****         // We assume is a valid character...
 411:gpib.c        ****         i++;
 412:gpib.c        **** 
 413:gpib.c        ****         // If we get an EOI then we might need to add an extra char and
 414:gpib.c        ****         // potentially end this read
 415:gpib.c        ****         if (eoi) {
 416:gpib.c        ****             if (settings.eot_enable) {
 417:gpib.c        ****                 *++buf = settings.eot_char;
 418:gpib.c        ****                 i++;
 419:gpib.c        ****             }
 420:gpib.c        ****             if (until == GPIB_EOI) {
 421:gpib.c        ****                 *end = GPIB_ENDED;
 422:gpib.c        ****                 return i;
 423:gpib.c        ****             }
 424:gpib.c        ****         }        
 425:gpib.c        ****         
 426:gpib.c        ****         // If we are only waiting for timeout, then loop...
 427:gpib.c        ****         if (until == GPIB_TIMEOUT) {    
 428:gpib.c        ****             buf++;
 429:gpib.c        ****             continue;
 430:gpib.c        ****         }
 431:gpib.c        ****         
 432:gpib.c        ****         // If we match the given end char
 433:gpib.c        ****         if (until == *buf) {
 434:gpib.c        ****             *end = GPIB_ENDED;
 435:gpib.c        ****             return i;
 436:gpib.c        ****         }     
 437:gpib.c        ****         buf++;
 438:gpib.c        ****     }
 439:gpib.c        ****     *end = GPIB_NOT_ENDED;
 440:gpib.c        ****     return i;
 441:gpib.c        **** }
 442:gpib.c        **** */
 443:gpib.c        **** 
 444:gpib.c        **** /**
 445:gpib.c        ****  * Test routine ... assume EOI for now
 446:gpib.c        ****  */ 
 447:gpib.c        **** int gpib_read_bytes(uint8_t *dest, int maxlen, int *end) {
 1362              		.loc 1 447 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 24
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366 0000 80B5     		push	{r7, lr}
 1367              		.cfi_def_cfa_offset 8
 1368              		.cfi_offset 7, -8
 1369              		.cfi_offset 14, -4
 1370 0002 86B0     		sub	sp, sp, #24
 1371              		.cfi_def_cfa_offset 32
 1372 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 33


 1373              		.cfi_def_cfa_register 7
 1374 0006 F860     		str	r0, [r7, #12]
 1375 0008 B960     		str	r1, [r7, #8]
 1376 000a 7A60     		str	r2, [r7, #4]
 448:gpib.c        ****     int eoi;
 449:gpib.c        ****     int i = 0;
 1377              		.loc 1 449 0
 1378 000c 0023     		movs	r3, #0
 1379 000e 7B61     		str	r3, [r7, #20]
 450:gpib.c        ****     
 451:gpib.c        ****     // Allow for extra eot_char if needed
 452:gpib.c        ****     maxlen -= settings.eot_enable;
 1380              		.loc 1 452 0
 1381 0010 1E4B     		ldr	r3, .L92
 1382 0012 1B8A     		ldrh	r3, [r3, #16]
 1383 0014 1A00     		movs	r2, r3
 1384 0016 BB68     		ldr	r3, [r7, #8]
 1385 0018 9B1A     		subs	r3, r3, r2
 1386 001a BB60     		str	r3, [r7, #8]
 453:gpib.c        ****     
 454:gpib.c        ****     // Keep one byte free just in case we need to add a char...
 455:gpib.c        ****     while (i < maxlen) {
 1387              		.loc 1 455 0
 1388 001c 29E0     		b	.L86
 1389              	.L90:
 456:gpib.c        ****         if (!gpib_receive_byte(dest++, &eoi)) {
 1390              		.loc 1 456 0
 1391 001e FB68     		ldr	r3, [r7, #12]
 1392 0020 5A1C     		adds	r2, r3, #1
 1393 0022 FA60     		str	r2, [r7, #12]
 1394 0024 1022     		movs	r2, #16
 1395 0026 BA18     		adds	r2, r7, r2
 1396 0028 1100     		movs	r1, r2
 1397 002a 1800     		movs	r0, r3
 1398 002c FFF7FEFF 		bl	gpib_receive_byte
 1399 0030 031E     		subs	r3, r0, #0
 1400 0032 05D1     		bne	.L87
 457:gpib.c        ****             *end = GPIB_TIMEOUT;
 1401              		.loc 1 457 0
 1402 0034 7B68     		ldr	r3, [r7, #4]
 1403 0036 0222     		movs	r2, #2
 1404 0038 FF32     		adds	r2, r2, #255
 1405 003a 1A60     		str	r2, [r3]
 458:gpib.c        ****             return i;
 1406              		.loc 1 458 0
 1407 003c 7B69     		ldr	r3, [r7, #20]
 1408 003e 20E0     		b	.L91
 1409              	.L87:
 459:gpib.c        ****         }
 460:gpib.c        ****         i++;
 1410              		.loc 1 460 0
 1411 0040 7B69     		ldr	r3, [r7, #20]
 1412 0042 0133     		adds	r3, r3, #1
 1413 0044 7B61     		str	r3, [r7, #20]
 461:gpib.c        ****         if (eoi) {
 1414              		.loc 1 461 0
 1415 0046 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 34


 1416 0048 002B     		cmp	r3, #0
 1417 004a 12D0     		beq	.L86
 462:gpib.c        ****             if (settings.eot_enable) {
 1418              		.loc 1 462 0
 1419 004c 0F4B     		ldr	r3, .L92
 1420 004e 1B8A     		ldrh	r3, [r3, #16]
 1421 0050 002B     		cmp	r3, #0
 1422 0052 09D0     		beq	.L89
 463:gpib.c        ****                 *dest++ = settings.eot_char;
 1423              		.loc 1 463 0
 1424 0054 FB68     		ldr	r3, [r7, #12]
 1425 0056 5A1C     		adds	r2, r3, #1
 1426 0058 FA60     		str	r2, [r7, #12]
 1427 005a 0C4A     		ldr	r2, .L92
 1428 005c D289     		ldrh	r2, [r2, #14]
 1429 005e D2B2     		uxtb	r2, r2
 1430 0060 1A70     		strb	r2, [r3]
 464:gpib.c        ****                 i++;
 1431              		.loc 1 464 0
 1432 0062 7B69     		ldr	r3, [r7, #20]
 1433 0064 0133     		adds	r3, r3, #1
 1434 0066 7B61     		str	r3, [r7, #20]
 1435              	.L89:
 465:gpib.c        ****             }
 466:gpib.c        ****             *end = GPIB_ENDED;
 1436              		.loc 1 466 0
 1437 0068 7B68     		ldr	r3, [r7, #4]
 1438 006a 0122     		movs	r2, #1
 1439 006c 1A60     		str	r2, [r3]
 467:gpib.c        ****             return i;
 1440              		.loc 1 467 0
 1441 006e 7B69     		ldr	r3, [r7, #20]
 1442 0070 07E0     		b	.L91
 1443              	.L86:
 455:gpib.c        ****         if (!gpib_receive_byte(dest++, &eoi)) {
 1444              		.loc 1 455 0
 1445 0072 7A69     		ldr	r2, [r7, #20]
 1446 0074 BB68     		ldr	r3, [r7, #8]
 1447 0076 9A42     		cmp	r2, r3
 1448 0078 D1DB     		blt	.L90
 468:gpib.c        ****         }
 469:gpib.c        ****     }
 470:gpib.c        ****     *end = GPIB_NOT_ENDED;
 1449              		.loc 1 470 0
 1450 007a 7B68     		ldr	r3, [r7, #4]
 1451 007c 0022     		movs	r2, #0
 1452 007e 1A60     		str	r2, [r3]
 471:gpib.c        ****     return i;
 1453              		.loc 1 471 0
 1454 0080 7B69     		ldr	r3, [r7, #20]
 1455              	.L91:
 472:gpib.c        **** }
 1456              		.loc 1 472 0 discriminator 1
 1457 0082 1800     		movs	r0, r3
 1458 0084 BD46     		mov	sp, r7
 1459 0086 06B0     		add	sp, sp, #24
 1460              		@ sp needed
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 35


 1461 0088 80BD     		pop	{r7, pc}
 1462              	.L93:
 1463 008a C046     		.align	2
 1464              	.L92:
 1465 008c 00000000 		.word	settings
 1466              		.cfi_endproc
 1467              	.LFE57:
 1468              		.size	gpib_read_bytes, .-gpib_read_bytes
 1469              		.text
 1470              	.Letext0:
 1471              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1472              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1473              		.file 4 "Generated_Source\\PSoC4/cytypes.h"
 1474              		.file 5 "settings.h"
 1475              		.section	.debug_info,"",%progbits
 1476              	.Ldebug_info0:
 1477 0000 F9050000 		.4byte	0x5f9
 1478 0004 0400     		.2byte	0x4
 1479 0006 00000000 		.4byte	.Ldebug_abbrev0
 1480 000a 04       		.byte	0x4
 1481 000b 01       		.uleb128 0x1
 1482 000c 53010000 		.4byte	.LASF70
 1483 0010 0C       		.byte	0xc
 1484 0011 20010000 		.4byte	.LASF71
 1485 0015 4B000000 		.4byte	.LASF72
 1486 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1487 001d 00000000 		.4byte	0
 1488 0021 00000000 		.4byte	.Ldebug_line0
 1489 0025 02       		.uleb128 0x2
 1490 0026 01       		.byte	0x1
 1491 0027 06       		.byte	0x6
 1492 0028 1C020000 		.4byte	.LASF0
 1493 002c 03       		.uleb128 0x3
 1494 002d 30010000 		.4byte	.LASF3
 1495 0031 02       		.byte	0x2
 1496 0032 1D       		.byte	0x1d
 1497 0033 37000000 		.4byte	0x37
 1498 0037 02       		.uleb128 0x2
 1499 0038 01       		.byte	0x1
 1500 0039 08       		.byte	0x8
 1501 003a ED010000 		.4byte	.LASF1
 1502 003e 02       		.uleb128 0x2
 1503 003f 02       		.byte	0x2
 1504 0040 05       		.byte	0x5
 1505 0041 38000000 		.4byte	.LASF2
 1506 0045 03       		.uleb128 0x3
 1507 0046 AD000000 		.4byte	.LASF4
 1508 004a 02       		.byte	0x2
 1509 004b 2B       		.byte	0x2b
 1510 004c 50000000 		.4byte	0x50
 1511 0050 02       		.uleb128 0x2
 1512 0051 02       		.byte	0x2
 1513 0052 07       		.byte	0x7
 1514 0053 A3020000 		.4byte	.LASF5
 1515 0057 02       		.uleb128 0x2
 1516 0058 04       		.byte	0x4
 1517 0059 05       		.byte	0x5
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 36


 1518 005a 17010000 		.4byte	.LASF6
 1519 005e 03       		.uleb128 0x3
 1520 005f 7F030000 		.4byte	.LASF7
 1521 0063 02       		.byte	0x2
 1522 0064 41       		.byte	0x41
 1523 0065 69000000 		.4byte	0x69
 1524 0069 02       		.uleb128 0x2
 1525 006a 04       		.byte	0x4
 1526 006b 07       		.byte	0x7
 1527 006c 53030000 		.4byte	.LASF8
 1528 0070 02       		.uleb128 0x2
 1529 0071 08       		.byte	0x8
 1530 0072 05       		.byte	0x5
 1531 0073 EF000000 		.4byte	.LASF9
 1532 0077 02       		.uleb128 0x2
 1533 0078 08       		.byte	0x8
 1534 0079 07       		.byte	0x7
 1535 007a 28020000 		.4byte	.LASF10
 1536 007e 04       		.uleb128 0x4
 1537 007f 04       		.byte	0x4
 1538 0080 05       		.byte	0x5
 1539 0081 696E7400 		.ascii	"int\000"
 1540 0085 02       		.uleb128 0x2
 1541 0086 04       		.byte	0x4
 1542 0087 07       		.byte	0x7
 1543 0088 48020000 		.4byte	.LASF11
 1544 008c 03       		.uleb128 0x3
 1545 008d C2000000 		.4byte	.LASF12
 1546 0091 03       		.byte	0x3
 1547 0092 18       		.byte	0x18
 1548 0093 2C000000 		.4byte	0x2c
 1549 0097 03       		.uleb128 0x3
 1550 0098 55020000 		.4byte	.LASF13
 1551 009c 03       		.byte	0x3
 1552 009d 24       		.byte	0x24
 1553 009e 45000000 		.4byte	0x45
 1554 00a2 03       		.uleb128 0x3
 1555 00a3 3F020000 		.4byte	.LASF14
 1556 00a7 03       		.byte	0x3
 1557 00a8 30       		.byte	0x30
 1558 00a9 5E000000 		.4byte	0x5e
 1559 00ad 05       		.uleb128 0x5
 1560 00ae 4C030000 		.4byte	.LASF15
 1561 00b2 04       		.byte	0x4
 1562 00b3 E601     		.2byte	0x1e6
 1563 00b5 69000000 		.4byte	0x69
 1564 00b9 02       		.uleb128 0x2
 1565 00ba 04       		.byte	0x4
 1566 00bb 04       		.byte	0x4
 1567 00bc 3C030000 		.4byte	.LASF16
 1568 00c0 02       		.uleb128 0x2
 1569 00c1 08       		.byte	0x8
 1570 00c2 04       		.byte	0x4
 1571 00c3 65030000 		.4byte	.LASF17
 1572 00c7 02       		.uleb128 0x2
 1573 00c8 01       		.byte	0x1
 1574 00c9 08       		.byte	0x8
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 37


 1575 00ca E5020000 		.4byte	.LASF18
 1576 00ce 05       		.uleb128 0x5
 1577 00cf 94020000 		.4byte	.LASF19
 1578 00d3 04       		.byte	0x4
 1579 00d4 9002     		.2byte	0x290
 1580 00d6 DA000000 		.4byte	0xda
 1581 00da 06       		.uleb128 0x6
 1582 00db AD000000 		.4byte	0xad
 1583 00df 02       		.uleb128 0x2
 1584 00e0 08       		.byte	0x8
 1585 00e1 04       		.byte	0x4
 1586 00e2 E1010000 		.4byte	.LASF20
 1587 00e6 02       		.uleb128 0x2
 1588 00e7 04       		.byte	0x4
 1589 00e8 07       		.byte	0x7
 1590 00e9 42000000 		.4byte	.LASF21
 1591 00ed 07       		.uleb128 0x7
 1592 00ee E6000000 		.4byte	.LASF65
 1593 00f2 18       		.byte	0x18
 1594 00f3 05       		.byte	0x5
 1595 00f4 0D       		.byte	0xd
 1596 00f5 72010000 		.4byte	0x172
 1597 00f9 08       		.uleb128 0x8
 1598 00fa B9030000 		.4byte	.LASF22
 1599 00fe 05       		.byte	0x5
 1600 00ff 0E       		.byte	0xe
 1601 0100 A2000000 		.4byte	0xa2
 1602 0104 00       		.byte	0
 1603 0105 08       		.uleb128 0x8
 1604 0106 12000000 		.4byte	.LASF23
 1605 010a 05       		.byte	0x5
 1606 010b 0F       		.byte	0xf
 1607 010c 97000000 		.4byte	0x97
 1608 0110 04       		.byte	0x4
 1609 0111 08       		.uleb128 0x8
 1610 0112 30000000 		.4byte	.LASF24
 1611 0116 05       		.byte	0x5
 1612 0117 10       		.byte	0x10
 1613 0118 97000000 		.4byte	0x97
 1614 011c 06       		.byte	0x6
 1615 011d 08       		.uleb128 0x8
 1616 011e CA000000 		.4byte	.LASF25
 1617 0122 05       		.byte	0x5
 1618 0123 11       		.byte	0x11
 1619 0124 97000000 		.4byte	0x97
 1620 0128 08       		.byte	0x8
 1621 0129 09       		.uleb128 0x9
 1622 012a 656F6900 		.ascii	"eoi\000"
 1623 012e 05       		.byte	0x5
 1624 012f 12       		.byte	0x12
 1625 0130 97000000 		.4byte	0x97
 1626 0134 0A       		.byte	0xa
 1627 0135 09       		.uleb128 0x9
 1628 0136 656F7300 		.ascii	"eos\000"
 1629 013a 05       		.byte	0x5
 1630 013b 13       		.byte	0x13
 1631 013c 97000000 		.4byte	0x97
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 38


 1632 0140 0C       		.byte	0xc
 1633 0141 08       		.uleb128 0x8
 1634 0142 9A020000 		.4byte	.LASF26
 1635 0146 05       		.byte	0x5
 1636 0147 14       		.byte	0x14
 1637 0148 97000000 		.4byte	0x97
 1638 014c 0E       		.byte	0xe
 1639 014d 08       		.uleb128 0x8
 1640 014e B6020000 		.4byte	.LASF27
 1641 0152 05       		.byte	0x5
 1642 0153 15       		.byte	0x15
 1643 0154 97000000 		.4byte	0x97
 1644 0158 10       		.byte	0x10
 1645 0159 08       		.uleb128 0x8
 1646 015a 0B010000 		.4byte	.LASF28
 1647 015e 05       		.byte	0x5
 1648 015f 16       		.byte	0x16
 1649 0160 97000000 		.4byte	0x97
 1650 0164 12       		.byte	0x12
 1651 0165 08       		.uleb128 0x8
 1652 0166 C1020000 		.4byte	.LASF29
 1653 016a 05       		.byte	0x5
 1654 016b 19       		.byte	0x19
 1655 016c 97000000 		.4byte	0x97
 1656 0170 14       		.byte	0x14
 1657 0171 00       		.byte	0
 1658 0172 0A       		.uleb128 0xa
 1659 0173 01       		.byte	0x1
 1660 0174 37000000 		.4byte	0x37
 1661 0178 01       		.byte	0x1
 1662 0179 17       		.byte	0x17
 1663 017a AF010000 		.4byte	0x1af
 1664 017e 0B       		.uleb128 0xb
 1665 017f 41544E00 		.ascii	"ATN\000"
 1666 0183 00       		.byte	0
 1667 0184 0B       		.uleb128 0xb
 1668 0185 53525100 		.ascii	"SRQ\000"
 1669 0189 01       		.byte	0x1
 1670 018a 0B       		.uleb128 0xb
 1671 018b 49464300 		.ascii	"IFC\000"
 1672 018f 02       		.byte	0x2
 1673 0190 0C       		.uleb128 0xc
 1674 0191 09040000 		.4byte	.LASF30
 1675 0195 03       		.byte	0x3
 1676 0196 0C       		.uleb128 0xc
 1677 0197 F8020000 		.4byte	.LASF31
 1678 019b 04       		.byte	0x4
 1679 019c 0B       		.uleb128 0xb
 1680 019d 44415600 		.ascii	"DAV\000"
 1681 01a1 05       		.byte	0x5
 1682 01a2 0B       		.uleb128 0xb
 1683 01a3 454F4900 		.ascii	"EOI\000"
 1684 01a7 06       		.byte	0x6
 1685 01a8 0B       		.uleb128 0xb
 1686 01a9 52454E00 		.ascii	"REN\000"
 1687 01ad 07       		.byte	0x7
 1688 01ae 00       		.byte	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 39


 1689 01af 03       		.uleb128 0x3
 1690 01b0 08000000 		.4byte	.LASF32
 1691 01b4 01       		.byte	0x1
 1692 01b5 18       		.byte	0x18
 1693 01b6 72010000 		.4byte	0x172
 1694 01ba 0D       		.uleb128 0xd
 1695 01bb A1000000 		.4byte	.LASF47
 1696 01bf 01       		.byte	0x1
 1697 01c0 2A       		.byte	0x2a
 1698 01c1 00000000 		.4byte	.LFB34
 1699 01c5 10000000 		.4byte	.LFE34-.LFB34
 1700 01c9 01       		.uleb128 0x1
 1701 01ca 9C       		.byte	0x9c
 1702 01cb 0E       		.uleb128 0xe
 1703 01cc 1A030000 		.4byte	.LASF33
 1704 01d0 01       		.byte	0x1
 1705 01d1 3B       		.byte	0x3b
 1706 01d2 00000000 		.4byte	.LFB35
 1707 01d6 28000000 		.4byte	.LFE35-.LFB35
 1708 01da 01       		.uleb128 0x1
 1709 01db 9C       		.byte	0x9c
 1710 01dc EF010000 		.4byte	0x1ef
 1711 01e0 0F       		.uleb128 0xf
 1712 01e1 D3000000 		.4byte	.LASF35
 1713 01e5 01       		.byte	0x1
 1714 01e6 3B       		.byte	0x3b
 1715 01e7 AF010000 		.4byte	0x1af
 1716 01eb 02       		.uleb128 0x2
 1717 01ec 91       		.byte	0x91
 1718 01ed 77       		.sleb128 -9
 1719 01ee 00       		.byte	0
 1720 01ef 0E       		.uleb128 0xe
 1721 01f0 6C030000 		.4byte	.LASF34
 1722 01f4 01       		.byte	0x1
 1723 01f5 42       		.byte	0x42
 1724 01f6 00000000 		.4byte	.LFB36
 1725 01fa 28000000 		.4byte	.LFE36-.LFB36
 1726 01fe 01       		.uleb128 0x1
 1727 01ff 9C       		.byte	0x9c
 1728 0200 13020000 		.4byte	0x213
 1729 0204 0F       		.uleb128 0xf
 1730 0205 D3000000 		.4byte	.LASF35
 1731 0209 01       		.byte	0x1
 1732 020a 42       		.byte	0x42
 1733 020b AF010000 		.4byte	0x1af
 1734 020f 02       		.uleb128 0x2
 1735 0210 91       		.byte	0x91
 1736 0211 77       		.sleb128 -9
 1737 0212 00       		.byte	0
 1738 0213 10       		.uleb128 0x10
 1739 0214 FC030000 		.4byte	.LASF36
 1740 0218 01       		.byte	0x1
 1741 0219 46       		.byte	0x46
 1742 021a 97000000 		.4byte	0x97
 1743 021e 00000000 		.4byte	.LFB37
 1744 0222 40000000 		.4byte	.LFE37-.LFB37
 1745 0226 01       		.uleb128 0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 40


 1746 0227 9C       		.byte	0x9c
 1747 0228 3A020000 		.4byte	0x23a
 1748 022c 11       		.uleb128 0x11
 1749 022d 726300   		.ascii	"rc\000"
 1750 0230 01       		.byte	0x1
 1751 0231 47       		.byte	0x47
 1752 0232 97000000 		.4byte	0x97
 1753 0236 02       		.uleb128 0x2
 1754 0237 91       		.byte	0x91
 1755 0238 76       		.sleb128 -10
 1756 0239 00       		.byte	0
 1757 023a 12       		.uleb128 0x12
 1758 023b E4030000 		.4byte	.LASF40
 1759 023f 01       		.byte	0x1
 1760 0240 4F       		.byte	0x4f
 1761 0241 6E020000 		.4byte	0x26e
 1762 0245 00000000 		.4byte	.LFB38
 1763 0249 34000000 		.4byte	.LFE38-.LFB38
 1764 024d 01       		.uleb128 0x1
 1765 024e 9C       		.byte	0x9c
 1766 024f 6E020000 		.4byte	0x26e
 1767 0253 0F       		.uleb128 0xf
 1768 0254 D3000000 		.4byte	.LASF35
 1769 0258 01       		.byte	0x1
 1770 0259 4F       		.byte	0x4f
 1771 025a AF010000 		.4byte	0x1af
 1772 025e 02       		.uleb128 0x2
 1773 025f 91       		.byte	0x91
 1774 0260 6F       		.sleb128 -17
 1775 0261 11       		.uleb128 0x11
 1776 0262 7600     		.ascii	"v\000"
 1777 0264 01       		.byte	0x1
 1778 0265 50       		.byte	0x50
 1779 0266 7E000000 		.4byte	0x7e
 1780 026a 02       		.uleb128 0x2
 1781 026b 91       		.byte	0x91
 1782 026c 74       		.sleb128 -12
 1783 026d 00       		.byte	0
 1784 026e 02       		.uleb128 0x2
 1785 026f 01       		.byte	0x1
 1786 0270 02       		.byte	0x2
 1787 0271 2B030000 		.4byte	.LASF37
 1788 0275 13       		.uleb128 0x13
 1789 0276 C3030000 		.4byte	.LASF38
 1790 027a 01       		.byte	0x1
 1791 027b 5D       		.byte	0x5d
 1792 027c 7E000000 		.4byte	0x7e
 1793 0280 00000000 		.4byte	.LFB39
 1794 0284 8C000000 		.4byte	.LFE39-.LFB39
 1795 0288 01       		.uleb128 0x1
 1796 0289 9C       		.byte	0x9c
 1797 028a B9020000 		.4byte	0x2b9
 1798 028e 14       		.uleb128 0x14
 1799 028f B8000000 		.4byte	.LASF39
 1800 0293 01       		.byte	0x1
 1801 0294 5F       		.byte	0x5f
 1802 0295 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 41


 1803 0299 02       		.uleb128 0x2
 1804 029a 91       		.byte	0x91
 1805 029b 6C       		.sleb128 -20
 1806 029c 11       		.uleb128 0x11
 1807 029d 61746E00 		.ascii	"atn\000"
 1808 02a1 01       		.byte	0x1
 1809 02a2 61       		.byte	0x61
 1810 02a3 6E020000 		.4byte	0x26e
 1811 02a7 02       		.uleb128 0x2
 1812 02a8 91       		.byte	0x91
 1813 02a9 6B       		.sleb128 -21
 1814 02aa 11       		.uleb128 0x11
 1815 02ab 69666300 		.ascii	"ifc\000"
 1816 02af 01       		.byte	0x1
 1817 02b0 62       		.byte	0x62
 1818 02b1 6E020000 		.4byte	0x26e
 1819 02b5 02       		.uleb128 0x2
 1820 02b6 91       		.byte	0x91
 1821 02b7 6A       		.sleb128 -22
 1822 02b8 00       		.byte	0
 1823 02b9 15       		.uleb128 0x15
 1824 02ba D8000000 		.4byte	.LASF58
 1825 02be 01       		.byte	0x1
 1826 02bf 77       		.byte	0x77
 1827 02c0 7E000000 		.4byte	0x7e
 1828 02c4 00000000 		.4byte	.LFB40
 1829 02c8 14000000 		.4byte	.LFE40-.LFB40
 1830 02cc 01       		.uleb128 0x1
 1831 02cd 9C       		.byte	0x9c
 1832 02ce 16       		.uleb128 0x16
 1833 02cf 8F030000 		.4byte	.LASF41
 1834 02d3 01       		.byte	0x1
 1835 02d4 7E       		.byte	0x7e
 1836 02d5 6E020000 		.4byte	0x26e
 1837 02d9 00000000 		.4byte	.LFB41
 1838 02dd 40000000 		.4byte	.LFE41-.LFB41
 1839 02e1 01       		.uleb128 0x1
 1840 02e2 9C       		.byte	0x9c
 1841 02e3 F6020000 		.4byte	0x2f6
 1842 02e7 0F       		.uleb128 0xf
 1843 02e8 D3000000 		.4byte	.LASF35
 1844 02ec 01       		.byte	0x1
 1845 02ed 7E       		.byte	0x7e
 1846 02ee AF010000 		.4byte	0x1af
 1847 02f2 02       		.uleb128 0x2
 1848 02f3 91       		.byte	0x91
 1849 02f4 77       		.sleb128 -9
 1850 02f5 00       		.byte	0
 1851 02f6 16       		.uleb128 0x16
 1852 02f7 69020000 		.4byte	.LASF42
 1853 02fb 01       		.byte	0x1
 1854 02fc 8F       		.byte	0x8f
 1855 02fd 6E020000 		.4byte	0x26e
 1856 0301 00000000 		.4byte	.LFB42
 1857 0305 4C000000 		.4byte	.LFE42-.LFB42
 1858 0309 01       		.uleb128 0x1
 1859 030a 9C       		.byte	0x9c
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 42


 1860 030b 1E030000 		.4byte	0x31e
 1861 030f 0F       		.uleb128 0xf
 1862 0310 D3000000 		.4byte	.LASF35
 1863 0314 01       		.byte	0x1
 1864 0315 8F       		.byte	0x8f
 1865 0316 AF010000 		.4byte	0x1af
 1866 031a 02       		.uleb128 0x2
 1867 031b 91       		.byte	0x91
 1868 031c 77       		.sleb128 -9
 1869 031d 00       		.byte	0
 1870 031e 16       		.uleb128 0x16
 1871 031f FD020000 		.4byte	.LASF43
 1872 0323 01       		.byte	0x1
 1873 0324 A1       		.byte	0xa1
 1874 0325 6E020000 		.4byte	0x26e
 1875 0329 00000000 		.4byte	.LFB43
 1876 032d 88000000 		.4byte	.LFE43-.LFB43
 1877 0331 01       		.uleb128 0x1
 1878 0332 9C       		.byte	0x9c
 1879 0333 6C030000 		.4byte	0x36c
 1880 0337 0F       		.uleb128 0xf
 1881 0338 8A030000 		.4byte	.LASF44
 1882 033c 01       		.byte	0x1
 1883 033d A1       		.byte	0xa1
 1884 033e 8C000000 		.4byte	0x8c
 1885 0342 02       		.uleb128 0x2
 1886 0343 91       		.byte	0x91
 1887 0344 67       		.sleb128 -25
 1888 0345 0F       		.uleb128 0xf
 1889 0346 8F020000 		.4byte	.LASF45
 1890 034a 01       		.byte	0x1
 1891 034b A1       		.byte	0xa1
 1892 034c 6E020000 		.4byte	0x26e
 1893 0350 02       		.uleb128 0x2
 1894 0351 91       		.byte	0x91
 1895 0352 66       		.sleb128 -26
 1896 0353 11       		.uleb128 0x11
 1897 0354 6F6B00   		.ascii	"ok\000"
 1898 0357 01       		.byte	0x1
 1899 0358 A2       		.byte	0xa2
 1900 0359 6E020000 		.4byte	0x26e
 1901 035d 02       		.uleb128 0x2
 1902 035e 91       		.byte	0x91
 1903 035f 6F       		.sleb128 -17
 1904 0360 17       		.uleb128 0x17
 1905 0361 FB010000 		.4byte	.LASF73
 1906 0365 01       		.byte	0x1
 1907 0366 B8       		.byte	0xb8
 1908 0367 64000000 		.4byte	.L45
 1909 036b 00       		.byte	0
 1910 036c 16       		.uleb128 0x16
 1911 036d CA020000 		.4byte	.LASF46
 1912 0371 01       		.byte	0x1
 1913 0372 C7       		.byte	0xc7
 1914 0373 7E000000 		.4byte	0x7e
 1915 0377 00000000 		.4byte	.LFB44
 1916 037b 90000000 		.4byte	.LFE44-.LFB44
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 43


 1917 037f 01       		.uleb128 0x1
 1918 0380 9C       		.byte	0x9c
 1919 0381 AF030000 		.4byte	0x3af
 1920 0385 0F       		.uleb128 0xf
 1921 0386 8A030000 		.4byte	.LASF44
 1922 038a 01       		.byte	0x1
 1923 038b C7       		.byte	0xc7
 1924 038c AF030000 		.4byte	0x3af
 1925 0390 02       		.uleb128 0x2
 1926 0391 91       		.byte	0x91
 1927 0392 6C       		.sleb128 -20
 1928 0393 18       		.uleb128 0x18
 1929 0394 656F6900 		.ascii	"eoi\000"
 1930 0398 01       		.byte	0x1
 1931 0399 C7       		.byte	0xc7
 1932 039a B5030000 		.4byte	0x3b5
 1933 039e 02       		.uleb128 0x2
 1934 039f 91       		.byte	0x91
 1935 03a0 68       		.sleb128 -24
 1936 03a1 11       		.uleb128 0x11
 1937 03a2 6F6B00   		.ascii	"ok\000"
 1938 03a5 01       		.byte	0x1
 1939 03a6 C8       		.byte	0xc8
 1940 03a7 7E000000 		.4byte	0x7e
 1941 03ab 02       		.uleb128 0x2
 1942 03ac 91       		.byte	0x91
 1943 03ad 74       		.sleb128 -12
 1944 03ae 00       		.byte	0
 1945 03af 19       		.uleb128 0x19
 1946 03b0 04       		.byte	0x4
 1947 03b1 8C000000 		.4byte	0x8c
 1948 03b5 19       		.uleb128 0x19
 1949 03b6 04       		.byte	0x4
 1950 03b7 7E000000 		.4byte	0x7e
 1951 03bb 0D       		.uleb128 0xd
 1952 03bc 8C000000 		.4byte	.LASF48
 1953 03c0 01       		.byte	0x1
 1954 03c1 FB       		.byte	0xfb
 1955 03c2 00000000 		.4byte	.LFB45
 1956 03c6 22000000 		.4byte	.LFE45-.LFB45
 1957 03ca 01       		.uleb128 0x1
 1958 03cb 9C       		.byte	0x9c
 1959 03cc 1A       		.uleb128 0x1a
 1960 03cd 27010000 		.4byte	.LASF49
 1961 03d1 01       		.byte	0x1
 1962 03d2 0201     		.2byte	0x102
 1963 03d4 00000000 		.4byte	.LFB46
 1964 03d8 24000000 		.4byte	.LFE46-.LFB46
 1965 03dc 01       		.uleb128 0x1
 1966 03dd 9C       		.byte	0x9c
 1967 03de F2030000 		.4byte	0x3f2
 1968 03e2 1B       		.uleb128 0x1b
 1969 03e3 30000000 		.4byte	.LASF24
 1970 03e7 01       		.byte	0x1
 1971 03e8 0201     		.2byte	0x102
 1972 03ea 8C000000 		.4byte	0x8c
 1973 03ee 02       		.uleb128 0x2
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 44


 1974 03ef 91       		.byte	0x91
 1975 03f0 77       		.sleb128 -9
 1976 03f1 00       		.byte	0
 1977 03f2 1A       		.uleb128 0x1a
 1978 03f3 13020000 		.4byte	.LASF50
 1979 03f7 01       		.byte	0x1
 1980 03f8 0601     		.2byte	0x106
 1981 03fa 00000000 		.4byte	.LFB47
 1982 03fe 24000000 		.4byte	.LFE47-.LFB47
 1983 0402 01       		.uleb128 0x1
 1984 0403 9C       		.byte	0x9c
 1985 0404 18040000 		.4byte	0x418
 1986 0408 1B       		.uleb128 0x1b
 1987 0409 30000000 		.4byte	.LASF24
 1988 040d 01       		.byte	0x1
 1989 040e 0601     		.2byte	0x106
 1990 0410 8C000000 		.4byte	0x8c
 1991 0414 02       		.uleb128 0x2
 1992 0415 91       		.byte	0x91
 1993 0416 77       		.sleb128 -9
 1994 0417 00       		.byte	0
 1995 0418 1C       		.uleb128 0x1c
 1996 0419 DC020000 		.4byte	.LASF51
 1997 041d 01       		.byte	0x1
 1998 041e 0A01     		.2byte	0x10a
 1999 0420 00000000 		.4byte	.LFB48
 2000 0424 10000000 		.4byte	.LFE48-.LFB48
 2001 0428 01       		.uleb128 0x1
 2002 0429 9C       		.byte	0x9c
 2003 042a 1C       		.uleb128 0x1c
 2004 042b F3030000 		.4byte	.LASF52
 2005 042f 01       		.byte	0x1
 2006 0430 0E01     		.2byte	0x10e
 2007 0432 00000000 		.4byte	.LFB49
 2008 0436 10000000 		.4byte	.LFE49-.LFB49
 2009 043a 01       		.uleb128 0x1
 2010 043b 9C       		.byte	0x9c
 2011 043c 1C       		.uleb128 0x1c
 2012 043d EA020000 		.4byte	.LASF53
 2013 0441 01       		.byte	0x1
 2014 0442 1301     		.2byte	0x113
 2015 0444 00000000 		.4byte	.LFB50
 2016 0448 26000000 		.4byte	.LFE50-.LFB50
 2017 044c 01       		.uleb128 0x1
 2018 044d 9C       		.byte	0x9c
 2019 044e 1C       		.uleb128 0x1c
 2020 044f 0C030000 		.4byte	.LASF54
 2021 0453 01       		.byte	0x1
 2022 0454 1A01     		.2byte	0x11a
 2023 0456 00000000 		.4byte	.LFB51
 2024 045a 26000000 		.4byte	.LFE51-.LFB51
 2025 045e 01       		.uleb128 0x1
 2026 045f 9C       		.byte	0x9c
 2027 0460 1C       		.uleb128 0x1c
 2028 0461 FD000000 		.4byte	.LASF55
 2029 0465 01       		.byte	0x1
 2030 0466 2201     		.2byte	0x122
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 45


 2031 0468 00000000 		.4byte	.LFB52
 2032 046c 2C000000 		.4byte	.LFE52-.LFB52
 2033 0470 01       		.uleb128 0x1
 2034 0471 9C       		.byte	0x9c
 2035 0472 1A       		.uleb128 0x1a
 2036 0473 1A000000 		.4byte	.LASF56
 2037 0477 01       		.byte	0x1
 2038 0478 2B01     		.2byte	0x12b
 2039 047a 00000000 		.4byte	.LFB53
 2040 047e 88000000 		.4byte	.LFE53-.LFB53
 2041 0482 01       		.uleb128 0x1
 2042 0483 9C       		.byte	0x9c
 2043 0484 98040000 		.4byte	0x498
 2044 0488 1B       		.uleb128 0x1b
 2045 0489 30000000 		.4byte	.LASF24
 2046 048d 01       		.byte	0x1
 2047 048e 2B01     		.2byte	0x12b
 2048 0490 8C000000 		.4byte	0x8c
 2049 0494 02       		.uleb128 0x2
 2050 0495 91       		.byte	0x91
 2051 0496 77       		.sleb128 -9
 2052 0497 00       		.byte	0
 2053 0498 1A       		.uleb128 0x1a
 2054 0499 3F010000 		.4byte	.LASF57
 2055 049d 01       		.byte	0x1
 2056 049e 4A01     		.2byte	0x14a
 2057 04a0 00000000 		.4byte	.LFB54
 2058 04a4 90000000 		.4byte	.LFE54-.LFB54
 2059 04a8 01       		.uleb128 0x1
 2060 04a9 9C       		.byte	0x9c
 2061 04aa BE040000 		.4byte	0x4be
 2062 04ae 1B       		.uleb128 0x1b
 2063 04af 30000000 		.4byte	.LASF24
 2064 04b3 01       		.byte	0x1
 2065 04b4 4A01     		.2byte	0x14a
 2066 04b6 8C000000 		.4byte	0x8c
 2067 04ba 02       		.uleb128 0x2
 2068 04bb 91       		.byte	0x91
 2069 04bc 77       		.sleb128 -9
 2070 04bd 00       		.byte	0
 2071 04be 1D       		.uleb128 0x1d
 2072 04bf AC030000 		.4byte	.LASF59
 2073 04c3 01       		.byte	0x1
 2074 04c4 6F01     		.2byte	0x16f
 2075 04c6 6E020000 		.4byte	0x26e
 2076 04ca 00000000 		.4byte	.LFB55
 2077 04ce 12000000 		.4byte	.LFE55-.LFB55
 2078 04d2 01       		.uleb128 0x1
 2079 04d3 9C       		.byte	0x9c
 2080 04d4 1A       		.uleb128 0x1a
 2081 04d5 CD030000 		.4byte	.LASF60
 2082 04d9 01       		.byte	0x1
 2083 04da 7801     		.2byte	0x178
 2084 04dc 00000000 		.4byte	.LFB56
 2085 04e0 60000000 		.4byte	.LFE56-.LFB56
 2086 04e4 01       		.uleb128 0x1
 2087 04e5 9C       		.byte	0x9c
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 46


 2088 04e6 3E050000 		.4byte	0x53e
 2089 04ea 1E       		.uleb128 0x1e
 2090 04eb 62756600 		.ascii	"buf\000"
 2091 04ef 01       		.byte	0x1
 2092 04f0 7801     		.2byte	0x178
 2093 04f2 3E050000 		.4byte	0x53e
 2094 04f6 02       		.uleb128 0x2
 2095 04f7 91       		.byte	0x91
 2096 04f8 6C       		.sleb128 -20
 2097 04f9 1E       		.uleb128 0x1e
 2098 04fa 6C656E00 		.ascii	"len\000"
 2099 04fe 01       		.byte	0x1
 2100 04ff 7801     		.2byte	0x178
 2101 0501 7E000000 		.4byte	0x7e
 2102 0505 02       		.uleb128 0x2
 2103 0506 91       		.byte	0x91
 2104 0507 68       		.sleb128 -24
 2105 0508 1B       		.uleb128 0x1b
 2106 0509 8F020000 		.4byte	.LASF45
 2107 050d 01       		.byte	0x1
 2108 050e 7801     		.2byte	0x178
 2109 0510 7E000000 		.4byte	0x7e
 2110 0514 02       		.uleb128 0x2
 2111 0515 91       		.byte	0x91
 2112 0516 64       		.sleb128 -28
 2113 0517 1F       		.uleb128 0x1f
 2114 0518 DD030000 		.4byte	.LASF61
 2115 051c 01       		.byte	0x1
 2116 051d 7901     		.2byte	0x179
 2117 051f 7E000000 		.4byte	0x7e
 2118 0523 02       		.uleb128 0x2
 2119 0524 91       		.byte	0x91
 2120 0525 70       		.sleb128 -16
 2121 0526 20       		.uleb128 0x20
 2122 0527 26000000 		.4byte	.LBB2
 2123 052b 2E000000 		.4byte	.LBE2-.LBB2
 2124 052f 21       		.uleb128 0x21
 2125 0530 6900     		.ascii	"i\000"
 2126 0532 01       		.byte	0x1
 2127 0533 7B01     		.2byte	0x17b
 2128 0535 7E000000 		.4byte	0x7e
 2129 0539 02       		.uleb128 0x2
 2130 053a 91       		.byte	0x91
 2131 053b 74       		.sleb128 -12
 2132 053c 00       		.byte	0
 2133 053d 00       		.byte	0
 2134 053e 19       		.uleb128 0x19
 2135 053f 04       		.byte	0x4
 2136 0540 44050000 		.4byte	0x544
 2137 0544 22       		.uleb128 0x22
 2138 0545 8C000000 		.4byte	0x8c
 2139 0549 23       		.uleb128 0x23
 2140 054a 03020000 		.4byte	.LASF62
 2141 054e 01       		.byte	0x1
 2142 054f BF01     		.2byte	0x1bf
 2143 0551 7E000000 		.4byte	0x7e
 2144 0555 00000000 		.4byte	.LFB57
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 47


 2145 0559 90000000 		.4byte	.LFE57-.LFB57
 2146 055d 01       		.uleb128 0x1
 2147 055e 9C       		.byte	0x9c
 2148 055f AD050000 		.4byte	0x5ad
 2149 0563 1B       		.uleb128 0x1b
 2150 0564 3A010000 		.4byte	.LASF63
 2151 0568 01       		.byte	0x1
 2152 0569 BF01     		.2byte	0x1bf
 2153 056b AF030000 		.4byte	0x3af
 2154 056f 02       		.uleb128 0x2
 2155 0570 91       		.byte	0x91
 2156 0571 6C       		.sleb128 -20
 2157 0572 1B       		.uleb128 0x1b
 2158 0573 88020000 		.4byte	.LASF64
 2159 0577 01       		.byte	0x1
 2160 0578 BF01     		.2byte	0x1bf
 2161 057a 7E000000 		.4byte	0x7e
 2162 057e 02       		.uleb128 0x2
 2163 057f 91       		.byte	0x91
 2164 0580 68       		.sleb128 -24
 2165 0581 1E       		.uleb128 0x1e
 2166 0582 656E6400 		.ascii	"end\000"
 2167 0586 01       		.byte	0x1
 2168 0587 BF01     		.2byte	0x1bf
 2169 0589 B5030000 		.4byte	0x3b5
 2170 058d 02       		.uleb128 0x2
 2171 058e 91       		.byte	0x91
 2172 058f 64       		.sleb128 -28
 2173 0590 21       		.uleb128 0x21
 2174 0591 656F6900 		.ascii	"eoi\000"
 2175 0595 01       		.byte	0x1
 2176 0596 C001     		.2byte	0x1c0
 2177 0598 7E000000 		.4byte	0x7e
 2178 059c 02       		.uleb128 0x2
 2179 059d 91       		.byte	0x91
 2180 059e 70       		.sleb128 -16
 2181 059f 21       		.uleb128 0x21
 2182 05a0 6900     		.ascii	"i\000"
 2183 05a2 01       		.byte	0x1
 2184 05a3 C101     		.2byte	0x1c1
 2185 05a5 7E000000 		.4byte	0x7e
 2186 05a9 02       		.uleb128 0x2
 2187 05aa 91       		.byte	0x91
 2188 05ab 74       		.sleb128 -12
 2189 05ac 00       		.byte	0
 2190 05ad 24       		.uleb128 0x24
 2191 05ae E6000000 		.4byte	.LASF65
 2192 05b2 05       		.byte	0x5
 2193 05b3 1D       		.byte	0x1d
 2194 05b4 ED000000 		.4byte	0xed
 2195 05b8 25       		.uleb128 0x25
 2196 05b9 5E020000 		.4byte	.LASF66
 2197 05bd 01       		.byte	0x1
 2198 05be 1D       		.byte	0x1d
 2199 05bf 8C000000 		.4byte	0x8c
 2200 05c3 05       		.uleb128 0x5
 2201 05c4 03       		.byte	0x3
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 48


 2202 05c5 00000000 		.4byte	my_address
 2203 05c9 25       		.uleb128 0x25
 2204 05ca 42030000 		.4byte	.LASF67
 2205 05ce 01       		.byte	0x1
 2206 05cf 23       		.byte	0x23
 2207 05d0 7E000000 		.4byte	0x7e
 2208 05d4 05       		.uleb128 0x5
 2209 05d5 03       		.byte	0x3
 2210 05d6 00000000 		.4byte	listening
 2211 05da 25       		.uleb128 0x25
 2212 05db 00000000 		.4byte	.LASF68
 2213 05df 01       		.byte	0x1
 2214 05e0 24       		.byte	0x24
 2215 05e1 7E000000 		.4byte	0x7e
 2216 05e5 05       		.uleb128 0x5
 2217 05e6 03       		.byte	0x3
 2218 05e7 00000000 		.4byte	talking
 2219 05eb 25       		.uleb128 0x25
 2220 05ec 31030000 		.4byte	.LASF69
 2221 05f0 01       		.byte	0x1
 2222 05f1 36       		.byte	0x36
 2223 05f2 7E000000 		.4byte	0x7e
 2224 05f6 05       		.uleb128 0x5
 2225 05f7 03       		.byte	0x3
 2226 05f8 00000000 		.4byte	_gpib_mode
 2227 05fc 00       		.byte	0
 2228              		.section	.debug_abbrev,"",%progbits
 2229              	.Ldebug_abbrev0:
 2230 0000 01       		.uleb128 0x1
 2231 0001 11       		.uleb128 0x11
 2232 0002 01       		.byte	0x1
 2233 0003 25       		.uleb128 0x25
 2234 0004 0E       		.uleb128 0xe
 2235 0005 13       		.uleb128 0x13
 2236 0006 0B       		.uleb128 0xb
 2237 0007 03       		.uleb128 0x3
 2238 0008 0E       		.uleb128 0xe
 2239 0009 1B       		.uleb128 0x1b
 2240 000a 0E       		.uleb128 0xe
 2241 000b 55       		.uleb128 0x55
 2242 000c 17       		.uleb128 0x17
 2243 000d 11       		.uleb128 0x11
 2244 000e 01       		.uleb128 0x1
 2245 000f 10       		.uleb128 0x10
 2246 0010 17       		.uleb128 0x17
 2247 0011 00       		.byte	0
 2248 0012 00       		.byte	0
 2249 0013 02       		.uleb128 0x2
 2250 0014 24       		.uleb128 0x24
 2251 0015 00       		.byte	0
 2252 0016 0B       		.uleb128 0xb
 2253 0017 0B       		.uleb128 0xb
 2254 0018 3E       		.uleb128 0x3e
 2255 0019 0B       		.uleb128 0xb
 2256 001a 03       		.uleb128 0x3
 2257 001b 0E       		.uleb128 0xe
 2258 001c 00       		.byte	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 49


 2259 001d 00       		.byte	0
 2260 001e 03       		.uleb128 0x3
 2261 001f 16       		.uleb128 0x16
 2262 0020 00       		.byte	0
 2263 0021 03       		.uleb128 0x3
 2264 0022 0E       		.uleb128 0xe
 2265 0023 3A       		.uleb128 0x3a
 2266 0024 0B       		.uleb128 0xb
 2267 0025 3B       		.uleb128 0x3b
 2268 0026 0B       		.uleb128 0xb
 2269 0027 49       		.uleb128 0x49
 2270 0028 13       		.uleb128 0x13
 2271 0029 00       		.byte	0
 2272 002a 00       		.byte	0
 2273 002b 04       		.uleb128 0x4
 2274 002c 24       		.uleb128 0x24
 2275 002d 00       		.byte	0
 2276 002e 0B       		.uleb128 0xb
 2277 002f 0B       		.uleb128 0xb
 2278 0030 3E       		.uleb128 0x3e
 2279 0031 0B       		.uleb128 0xb
 2280 0032 03       		.uleb128 0x3
 2281 0033 08       		.uleb128 0x8
 2282 0034 00       		.byte	0
 2283 0035 00       		.byte	0
 2284 0036 05       		.uleb128 0x5
 2285 0037 16       		.uleb128 0x16
 2286 0038 00       		.byte	0
 2287 0039 03       		.uleb128 0x3
 2288 003a 0E       		.uleb128 0xe
 2289 003b 3A       		.uleb128 0x3a
 2290 003c 0B       		.uleb128 0xb
 2291 003d 3B       		.uleb128 0x3b
 2292 003e 05       		.uleb128 0x5
 2293 003f 49       		.uleb128 0x49
 2294 0040 13       		.uleb128 0x13
 2295 0041 00       		.byte	0
 2296 0042 00       		.byte	0
 2297 0043 06       		.uleb128 0x6
 2298 0044 35       		.uleb128 0x35
 2299 0045 00       		.byte	0
 2300 0046 49       		.uleb128 0x49
 2301 0047 13       		.uleb128 0x13
 2302 0048 00       		.byte	0
 2303 0049 00       		.byte	0
 2304 004a 07       		.uleb128 0x7
 2305 004b 13       		.uleb128 0x13
 2306 004c 01       		.byte	0x1
 2307 004d 03       		.uleb128 0x3
 2308 004e 0E       		.uleb128 0xe
 2309 004f 0B       		.uleb128 0xb
 2310 0050 0B       		.uleb128 0xb
 2311 0051 3A       		.uleb128 0x3a
 2312 0052 0B       		.uleb128 0xb
 2313 0053 3B       		.uleb128 0x3b
 2314 0054 0B       		.uleb128 0xb
 2315 0055 01       		.uleb128 0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 50


 2316 0056 13       		.uleb128 0x13
 2317 0057 00       		.byte	0
 2318 0058 00       		.byte	0
 2319 0059 08       		.uleb128 0x8
 2320 005a 0D       		.uleb128 0xd
 2321 005b 00       		.byte	0
 2322 005c 03       		.uleb128 0x3
 2323 005d 0E       		.uleb128 0xe
 2324 005e 3A       		.uleb128 0x3a
 2325 005f 0B       		.uleb128 0xb
 2326 0060 3B       		.uleb128 0x3b
 2327 0061 0B       		.uleb128 0xb
 2328 0062 49       		.uleb128 0x49
 2329 0063 13       		.uleb128 0x13
 2330 0064 38       		.uleb128 0x38
 2331 0065 0B       		.uleb128 0xb
 2332 0066 00       		.byte	0
 2333 0067 00       		.byte	0
 2334 0068 09       		.uleb128 0x9
 2335 0069 0D       		.uleb128 0xd
 2336 006a 00       		.byte	0
 2337 006b 03       		.uleb128 0x3
 2338 006c 08       		.uleb128 0x8
 2339 006d 3A       		.uleb128 0x3a
 2340 006e 0B       		.uleb128 0xb
 2341 006f 3B       		.uleb128 0x3b
 2342 0070 0B       		.uleb128 0xb
 2343 0071 49       		.uleb128 0x49
 2344 0072 13       		.uleb128 0x13
 2345 0073 38       		.uleb128 0x38
 2346 0074 0B       		.uleb128 0xb
 2347 0075 00       		.byte	0
 2348 0076 00       		.byte	0
 2349 0077 0A       		.uleb128 0xa
 2350 0078 04       		.uleb128 0x4
 2351 0079 01       		.byte	0x1
 2352 007a 0B       		.uleb128 0xb
 2353 007b 0B       		.uleb128 0xb
 2354 007c 49       		.uleb128 0x49
 2355 007d 13       		.uleb128 0x13
 2356 007e 3A       		.uleb128 0x3a
 2357 007f 0B       		.uleb128 0xb
 2358 0080 3B       		.uleb128 0x3b
 2359 0081 0B       		.uleb128 0xb
 2360 0082 01       		.uleb128 0x1
 2361 0083 13       		.uleb128 0x13
 2362 0084 00       		.byte	0
 2363 0085 00       		.byte	0
 2364 0086 0B       		.uleb128 0xb
 2365 0087 28       		.uleb128 0x28
 2366 0088 00       		.byte	0
 2367 0089 03       		.uleb128 0x3
 2368 008a 08       		.uleb128 0x8
 2369 008b 1C       		.uleb128 0x1c
 2370 008c 0B       		.uleb128 0xb
 2371 008d 00       		.byte	0
 2372 008e 00       		.byte	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 51


 2373 008f 0C       		.uleb128 0xc
 2374 0090 28       		.uleb128 0x28
 2375 0091 00       		.byte	0
 2376 0092 03       		.uleb128 0x3
 2377 0093 0E       		.uleb128 0xe
 2378 0094 1C       		.uleb128 0x1c
 2379 0095 0B       		.uleb128 0xb
 2380 0096 00       		.byte	0
 2381 0097 00       		.byte	0
 2382 0098 0D       		.uleb128 0xd
 2383 0099 2E       		.uleb128 0x2e
 2384 009a 00       		.byte	0
 2385 009b 3F       		.uleb128 0x3f
 2386 009c 19       		.uleb128 0x19
 2387 009d 03       		.uleb128 0x3
 2388 009e 0E       		.uleb128 0xe
 2389 009f 3A       		.uleb128 0x3a
 2390 00a0 0B       		.uleb128 0xb
 2391 00a1 3B       		.uleb128 0x3b
 2392 00a2 0B       		.uleb128 0xb
 2393 00a3 11       		.uleb128 0x11
 2394 00a4 01       		.uleb128 0x1
 2395 00a5 12       		.uleb128 0x12
 2396 00a6 06       		.uleb128 0x6
 2397 00a7 40       		.uleb128 0x40
 2398 00a8 18       		.uleb128 0x18
 2399 00a9 9642     		.uleb128 0x2116
 2400 00ab 19       		.uleb128 0x19
 2401 00ac 00       		.byte	0
 2402 00ad 00       		.byte	0
 2403 00ae 0E       		.uleb128 0xe
 2404 00af 2E       		.uleb128 0x2e
 2405 00b0 01       		.byte	0x1
 2406 00b1 3F       		.uleb128 0x3f
 2407 00b2 19       		.uleb128 0x19
 2408 00b3 03       		.uleb128 0x3
 2409 00b4 0E       		.uleb128 0xe
 2410 00b5 3A       		.uleb128 0x3a
 2411 00b6 0B       		.uleb128 0xb
 2412 00b7 3B       		.uleb128 0x3b
 2413 00b8 0B       		.uleb128 0xb
 2414 00b9 27       		.uleb128 0x27
 2415 00ba 19       		.uleb128 0x19
 2416 00bb 11       		.uleb128 0x11
 2417 00bc 01       		.uleb128 0x1
 2418 00bd 12       		.uleb128 0x12
 2419 00be 06       		.uleb128 0x6
 2420 00bf 40       		.uleb128 0x40
 2421 00c0 18       		.uleb128 0x18
 2422 00c1 9742     		.uleb128 0x2117
 2423 00c3 19       		.uleb128 0x19
 2424 00c4 01       		.uleb128 0x1
 2425 00c5 13       		.uleb128 0x13
 2426 00c6 00       		.byte	0
 2427 00c7 00       		.byte	0
 2428 00c8 0F       		.uleb128 0xf
 2429 00c9 05       		.uleb128 0x5
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 52


 2430 00ca 00       		.byte	0
 2431 00cb 03       		.uleb128 0x3
 2432 00cc 0E       		.uleb128 0xe
 2433 00cd 3A       		.uleb128 0x3a
 2434 00ce 0B       		.uleb128 0xb
 2435 00cf 3B       		.uleb128 0x3b
 2436 00d0 0B       		.uleb128 0xb
 2437 00d1 49       		.uleb128 0x49
 2438 00d2 13       		.uleb128 0x13
 2439 00d3 02       		.uleb128 0x2
 2440 00d4 18       		.uleb128 0x18
 2441 00d5 00       		.byte	0
 2442 00d6 00       		.byte	0
 2443 00d7 10       		.uleb128 0x10
 2444 00d8 2E       		.uleb128 0x2e
 2445 00d9 01       		.byte	0x1
 2446 00da 3F       		.uleb128 0x3f
 2447 00db 19       		.uleb128 0x19
 2448 00dc 03       		.uleb128 0x3
 2449 00dd 0E       		.uleb128 0xe
 2450 00de 3A       		.uleb128 0x3a
 2451 00df 0B       		.uleb128 0xb
 2452 00e0 3B       		.uleb128 0x3b
 2453 00e1 0B       		.uleb128 0xb
 2454 00e2 49       		.uleb128 0x49
 2455 00e3 13       		.uleb128 0x13
 2456 00e4 11       		.uleb128 0x11
 2457 00e5 01       		.uleb128 0x1
 2458 00e6 12       		.uleb128 0x12
 2459 00e7 06       		.uleb128 0x6
 2460 00e8 40       		.uleb128 0x40
 2461 00e9 18       		.uleb128 0x18
 2462 00ea 9742     		.uleb128 0x2117
 2463 00ec 19       		.uleb128 0x19
 2464 00ed 01       		.uleb128 0x1
 2465 00ee 13       		.uleb128 0x13
 2466 00ef 00       		.byte	0
 2467 00f0 00       		.byte	0
 2468 00f1 11       		.uleb128 0x11
 2469 00f2 34       		.uleb128 0x34
 2470 00f3 00       		.byte	0
 2471 00f4 03       		.uleb128 0x3
 2472 00f5 08       		.uleb128 0x8
 2473 00f6 3A       		.uleb128 0x3a
 2474 00f7 0B       		.uleb128 0xb
 2475 00f8 3B       		.uleb128 0x3b
 2476 00f9 0B       		.uleb128 0xb
 2477 00fa 49       		.uleb128 0x49
 2478 00fb 13       		.uleb128 0x13
 2479 00fc 02       		.uleb128 0x2
 2480 00fd 18       		.uleb128 0x18
 2481 00fe 00       		.byte	0
 2482 00ff 00       		.byte	0
 2483 0100 12       		.uleb128 0x12
 2484 0101 2E       		.uleb128 0x2e
 2485 0102 01       		.byte	0x1
 2486 0103 3F       		.uleb128 0x3f
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 53


 2487 0104 19       		.uleb128 0x19
 2488 0105 03       		.uleb128 0x3
 2489 0106 0E       		.uleb128 0xe
 2490 0107 3A       		.uleb128 0x3a
 2491 0108 0B       		.uleb128 0xb
 2492 0109 3B       		.uleb128 0x3b
 2493 010a 0B       		.uleb128 0xb
 2494 010b 27       		.uleb128 0x27
 2495 010c 19       		.uleb128 0x19
 2496 010d 49       		.uleb128 0x49
 2497 010e 13       		.uleb128 0x13
 2498 010f 11       		.uleb128 0x11
 2499 0110 01       		.uleb128 0x1
 2500 0111 12       		.uleb128 0x12
 2501 0112 06       		.uleb128 0x6
 2502 0113 40       		.uleb128 0x40
 2503 0114 18       		.uleb128 0x18
 2504 0115 9742     		.uleb128 0x2117
 2505 0117 19       		.uleb128 0x19
 2506 0118 01       		.uleb128 0x1
 2507 0119 13       		.uleb128 0x13
 2508 011a 00       		.byte	0
 2509 011b 00       		.byte	0
 2510 011c 13       		.uleb128 0x13
 2511 011d 2E       		.uleb128 0x2e
 2512 011e 01       		.byte	0x1
 2513 011f 3F       		.uleb128 0x3f
 2514 0120 19       		.uleb128 0x19
 2515 0121 03       		.uleb128 0x3
 2516 0122 0E       		.uleb128 0xe
 2517 0123 3A       		.uleb128 0x3a
 2518 0124 0B       		.uleb128 0xb
 2519 0125 3B       		.uleb128 0x3b
 2520 0126 0B       		.uleb128 0xb
 2521 0127 49       		.uleb128 0x49
 2522 0128 13       		.uleb128 0x13
 2523 0129 11       		.uleb128 0x11
 2524 012a 01       		.uleb128 0x1
 2525 012b 12       		.uleb128 0x12
 2526 012c 06       		.uleb128 0x6
 2527 012d 40       		.uleb128 0x40
 2528 012e 18       		.uleb128 0x18
 2529 012f 9642     		.uleb128 0x2116
 2530 0131 19       		.uleb128 0x19
 2531 0132 01       		.uleb128 0x1
 2532 0133 13       		.uleb128 0x13
 2533 0134 00       		.byte	0
 2534 0135 00       		.byte	0
 2535 0136 14       		.uleb128 0x14
 2536 0137 34       		.uleb128 0x34
 2537 0138 00       		.byte	0
 2538 0139 03       		.uleb128 0x3
 2539 013a 0E       		.uleb128 0xe
 2540 013b 3A       		.uleb128 0x3a
 2541 013c 0B       		.uleb128 0xb
 2542 013d 3B       		.uleb128 0x3b
 2543 013e 0B       		.uleb128 0xb
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 54


 2544 013f 49       		.uleb128 0x49
 2545 0140 13       		.uleb128 0x13
 2546 0141 02       		.uleb128 0x2
 2547 0142 18       		.uleb128 0x18
 2548 0143 00       		.byte	0
 2549 0144 00       		.byte	0
 2550 0145 15       		.uleb128 0x15
 2551 0146 2E       		.uleb128 0x2e
 2552 0147 00       		.byte	0
 2553 0148 3F       		.uleb128 0x3f
 2554 0149 19       		.uleb128 0x19
 2555 014a 03       		.uleb128 0x3
 2556 014b 0E       		.uleb128 0xe
 2557 014c 3A       		.uleb128 0x3a
 2558 014d 0B       		.uleb128 0xb
 2559 014e 3B       		.uleb128 0x3b
 2560 014f 0B       		.uleb128 0xb
 2561 0150 49       		.uleb128 0x49
 2562 0151 13       		.uleb128 0x13
 2563 0152 11       		.uleb128 0x11
 2564 0153 01       		.uleb128 0x1
 2565 0154 12       		.uleb128 0x12
 2566 0155 06       		.uleb128 0x6
 2567 0156 40       		.uleb128 0x40
 2568 0157 18       		.uleb128 0x18
 2569 0158 9742     		.uleb128 0x2117
 2570 015a 19       		.uleb128 0x19
 2571 015b 00       		.byte	0
 2572 015c 00       		.byte	0
 2573 015d 16       		.uleb128 0x16
 2574 015e 2E       		.uleb128 0x2e
 2575 015f 01       		.byte	0x1
 2576 0160 3F       		.uleb128 0x3f
 2577 0161 19       		.uleb128 0x19
 2578 0162 03       		.uleb128 0x3
 2579 0163 0E       		.uleb128 0xe
 2580 0164 3A       		.uleb128 0x3a
 2581 0165 0B       		.uleb128 0xb
 2582 0166 3B       		.uleb128 0x3b
 2583 0167 0B       		.uleb128 0xb
 2584 0168 27       		.uleb128 0x27
 2585 0169 19       		.uleb128 0x19
 2586 016a 49       		.uleb128 0x49
 2587 016b 13       		.uleb128 0x13
 2588 016c 11       		.uleb128 0x11
 2589 016d 01       		.uleb128 0x1
 2590 016e 12       		.uleb128 0x12
 2591 016f 06       		.uleb128 0x6
 2592 0170 40       		.uleb128 0x40
 2593 0171 18       		.uleb128 0x18
 2594 0172 9642     		.uleb128 0x2116
 2595 0174 19       		.uleb128 0x19
 2596 0175 01       		.uleb128 0x1
 2597 0176 13       		.uleb128 0x13
 2598 0177 00       		.byte	0
 2599 0178 00       		.byte	0
 2600 0179 17       		.uleb128 0x17
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 55


 2601 017a 0A       		.uleb128 0xa
 2602 017b 00       		.byte	0
 2603 017c 03       		.uleb128 0x3
 2604 017d 0E       		.uleb128 0xe
 2605 017e 3A       		.uleb128 0x3a
 2606 017f 0B       		.uleb128 0xb
 2607 0180 3B       		.uleb128 0x3b
 2608 0181 0B       		.uleb128 0xb
 2609 0182 11       		.uleb128 0x11
 2610 0183 01       		.uleb128 0x1
 2611 0184 00       		.byte	0
 2612 0185 00       		.byte	0
 2613 0186 18       		.uleb128 0x18
 2614 0187 05       		.uleb128 0x5
 2615 0188 00       		.byte	0
 2616 0189 03       		.uleb128 0x3
 2617 018a 08       		.uleb128 0x8
 2618 018b 3A       		.uleb128 0x3a
 2619 018c 0B       		.uleb128 0xb
 2620 018d 3B       		.uleb128 0x3b
 2621 018e 0B       		.uleb128 0xb
 2622 018f 49       		.uleb128 0x49
 2623 0190 13       		.uleb128 0x13
 2624 0191 02       		.uleb128 0x2
 2625 0192 18       		.uleb128 0x18
 2626 0193 00       		.byte	0
 2627 0194 00       		.byte	0
 2628 0195 19       		.uleb128 0x19
 2629 0196 0F       		.uleb128 0xf
 2630 0197 00       		.byte	0
 2631 0198 0B       		.uleb128 0xb
 2632 0199 0B       		.uleb128 0xb
 2633 019a 49       		.uleb128 0x49
 2634 019b 13       		.uleb128 0x13
 2635 019c 00       		.byte	0
 2636 019d 00       		.byte	0
 2637 019e 1A       		.uleb128 0x1a
 2638 019f 2E       		.uleb128 0x2e
 2639 01a0 01       		.byte	0x1
 2640 01a1 3F       		.uleb128 0x3f
 2641 01a2 19       		.uleb128 0x19
 2642 01a3 03       		.uleb128 0x3
 2643 01a4 0E       		.uleb128 0xe
 2644 01a5 3A       		.uleb128 0x3a
 2645 01a6 0B       		.uleb128 0xb
 2646 01a7 3B       		.uleb128 0x3b
 2647 01a8 05       		.uleb128 0x5
 2648 01a9 27       		.uleb128 0x27
 2649 01aa 19       		.uleb128 0x19
 2650 01ab 11       		.uleb128 0x11
 2651 01ac 01       		.uleb128 0x1
 2652 01ad 12       		.uleb128 0x12
 2653 01ae 06       		.uleb128 0x6
 2654 01af 40       		.uleb128 0x40
 2655 01b0 18       		.uleb128 0x18
 2656 01b1 9642     		.uleb128 0x2116
 2657 01b3 19       		.uleb128 0x19
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 56


 2658 01b4 01       		.uleb128 0x1
 2659 01b5 13       		.uleb128 0x13
 2660 01b6 00       		.byte	0
 2661 01b7 00       		.byte	0
 2662 01b8 1B       		.uleb128 0x1b
 2663 01b9 05       		.uleb128 0x5
 2664 01ba 00       		.byte	0
 2665 01bb 03       		.uleb128 0x3
 2666 01bc 0E       		.uleb128 0xe
 2667 01bd 3A       		.uleb128 0x3a
 2668 01be 0B       		.uleb128 0xb
 2669 01bf 3B       		.uleb128 0x3b
 2670 01c0 05       		.uleb128 0x5
 2671 01c1 49       		.uleb128 0x49
 2672 01c2 13       		.uleb128 0x13
 2673 01c3 02       		.uleb128 0x2
 2674 01c4 18       		.uleb128 0x18
 2675 01c5 00       		.byte	0
 2676 01c6 00       		.byte	0
 2677 01c7 1C       		.uleb128 0x1c
 2678 01c8 2E       		.uleb128 0x2e
 2679 01c9 00       		.byte	0
 2680 01ca 3F       		.uleb128 0x3f
 2681 01cb 19       		.uleb128 0x19
 2682 01cc 03       		.uleb128 0x3
 2683 01cd 0E       		.uleb128 0xe
 2684 01ce 3A       		.uleb128 0x3a
 2685 01cf 0B       		.uleb128 0xb
 2686 01d0 3B       		.uleb128 0x3b
 2687 01d1 05       		.uleb128 0x5
 2688 01d2 11       		.uleb128 0x11
 2689 01d3 01       		.uleb128 0x1
 2690 01d4 12       		.uleb128 0x12
 2691 01d5 06       		.uleb128 0x6
 2692 01d6 40       		.uleb128 0x40
 2693 01d7 18       		.uleb128 0x18
 2694 01d8 9642     		.uleb128 0x2116
 2695 01da 19       		.uleb128 0x19
 2696 01db 00       		.byte	0
 2697 01dc 00       		.byte	0
 2698 01dd 1D       		.uleb128 0x1d
 2699 01de 2E       		.uleb128 0x2e
 2700 01df 00       		.byte	0
 2701 01e0 3F       		.uleb128 0x3f
 2702 01e1 19       		.uleb128 0x19
 2703 01e2 03       		.uleb128 0x3
 2704 01e3 0E       		.uleb128 0xe
 2705 01e4 3A       		.uleb128 0x3a
 2706 01e5 0B       		.uleb128 0xb
 2707 01e6 3B       		.uleb128 0x3b
 2708 01e7 05       		.uleb128 0x5
 2709 01e8 49       		.uleb128 0x49
 2710 01e9 13       		.uleb128 0x13
 2711 01ea 11       		.uleb128 0x11
 2712 01eb 01       		.uleb128 0x1
 2713 01ec 12       		.uleb128 0x12
 2714 01ed 06       		.uleb128 0x6
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 57


 2715 01ee 40       		.uleb128 0x40
 2716 01ef 18       		.uleb128 0x18
 2717 01f0 9642     		.uleb128 0x2116
 2718 01f2 19       		.uleb128 0x19
 2719 01f3 00       		.byte	0
 2720 01f4 00       		.byte	0
 2721 01f5 1E       		.uleb128 0x1e
 2722 01f6 05       		.uleb128 0x5
 2723 01f7 00       		.byte	0
 2724 01f8 03       		.uleb128 0x3
 2725 01f9 08       		.uleb128 0x8
 2726 01fa 3A       		.uleb128 0x3a
 2727 01fb 0B       		.uleb128 0xb
 2728 01fc 3B       		.uleb128 0x3b
 2729 01fd 05       		.uleb128 0x5
 2730 01fe 49       		.uleb128 0x49
 2731 01ff 13       		.uleb128 0x13
 2732 0200 02       		.uleb128 0x2
 2733 0201 18       		.uleb128 0x18
 2734 0202 00       		.byte	0
 2735 0203 00       		.byte	0
 2736 0204 1F       		.uleb128 0x1f
 2737 0205 34       		.uleb128 0x34
 2738 0206 00       		.byte	0
 2739 0207 03       		.uleb128 0x3
 2740 0208 0E       		.uleb128 0xe
 2741 0209 3A       		.uleb128 0x3a
 2742 020a 0B       		.uleb128 0xb
 2743 020b 3B       		.uleb128 0x3b
 2744 020c 05       		.uleb128 0x5
 2745 020d 49       		.uleb128 0x49
 2746 020e 13       		.uleb128 0x13
 2747 020f 02       		.uleb128 0x2
 2748 0210 18       		.uleb128 0x18
 2749 0211 00       		.byte	0
 2750 0212 00       		.byte	0
 2751 0213 20       		.uleb128 0x20
 2752 0214 0B       		.uleb128 0xb
 2753 0215 01       		.byte	0x1
 2754 0216 11       		.uleb128 0x11
 2755 0217 01       		.uleb128 0x1
 2756 0218 12       		.uleb128 0x12
 2757 0219 06       		.uleb128 0x6
 2758 021a 00       		.byte	0
 2759 021b 00       		.byte	0
 2760 021c 21       		.uleb128 0x21
 2761 021d 34       		.uleb128 0x34
 2762 021e 00       		.byte	0
 2763 021f 03       		.uleb128 0x3
 2764 0220 08       		.uleb128 0x8
 2765 0221 3A       		.uleb128 0x3a
 2766 0222 0B       		.uleb128 0xb
 2767 0223 3B       		.uleb128 0x3b
 2768 0224 05       		.uleb128 0x5
 2769 0225 49       		.uleb128 0x49
 2770 0226 13       		.uleb128 0x13
 2771 0227 02       		.uleb128 0x2
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 58


 2772 0228 18       		.uleb128 0x18
 2773 0229 00       		.byte	0
 2774 022a 00       		.byte	0
 2775 022b 22       		.uleb128 0x22
 2776 022c 26       		.uleb128 0x26
 2777 022d 00       		.byte	0
 2778 022e 49       		.uleb128 0x49
 2779 022f 13       		.uleb128 0x13
 2780 0230 00       		.byte	0
 2781 0231 00       		.byte	0
 2782 0232 23       		.uleb128 0x23
 2783 0233 2E       		.uleb128 0x2e
 2784 0234 01       		.byte	0x1
 2785 0235 3F       		.uleb128 0x3f
 2786 0236 19       		.uleb128 0x19
 2787 0237 03       		.uleb128 0x3
 2788 0238 0E       		.uleb128 0xe
 2789 0239 3A       		.uleb128 0x3a
 2790 023a 0B       		.uleb128 0xb
 2791 023b 3B       		.uleb128 0x3b
 2792 023c 05       		.uleb128 0x5
 2793 023d 27       		.uleb128 0x27
 2794 023e 19       		.uleb128 0x19
 2795 023f 49       		.uleb128 0x49
 2796 0240 13       		.uleb128 0x13
 2797 0241 11       		.uleb128 0x11
 2798 0242 01       		.uleb128 0x1
 2799 0243 12       		.uleb128 0x12
 2800 0244 06       		.uleb128 0x6
 2801 0245 40       		.uleb128 0x40
 2802 0246 18       		.uleb128 0x18
 2803 0247 9642     		.uleb128 0x2116
 2804 0249 19       		.uleb128 0x19
 2805 024a 01       		.uleb128 0x1
 2806 024b 13       		.uleb128 0x13
 2807 024c 00       		.byte	0
 2808 024d 00       		.byte	0
 2809 024e 24       		.uleb128 0x24
 2810 024f 34       		.uleb128 0x34
 2811 0250 00       		.byte	0
 2812 0251 03       		.uleb128 0x3
 2813 0252 0E       		.uleb128 0xe
 2814 0253 3A       		.uleb128 0x3a
 2815 0254 0B       		.uleb128 0xb
 2816 0255 3B       		.uleb128 0x3b
 2817 0256 0B       		.uleb128 0xb
 2818 0257 49       		.uleb128 0x49
 2819 0258 13       		.uleb128 0x13
 2820 0259 3F       		.uleb128 0x3f
 2821 025a 19       		.uleb128 0x19
 2822 025b 3C       		.uleb128 0x3c
 2823 025c 19       		.uleb128 0x19
 2824 025d 00       		.byte	0
 2825 025e 00       		.byte	0
 2826 025f 25       		.uleb128 0x25
 2827 0260 34       		.uleb128 0x34
 2828 0261 00       		.byte	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 59


 2829 0262 03       		.uleb128 0x3
 2830 0263 0E       		.uleb128 0xe
 2831 0264 3A       		.uleb128 0x3a
 2832 0265 0B       		.uleb128 0xb
 2833 0266 3B       		.uleb128 0x3b
 2834 0267 0B       		.uleb128 0xb
 2835 0268 49       		.uleb128 0x49
 2836 0269 13       		.uleb128 0x13
 2837 026a 3F       		.uleb128 0x3f
 2838 026b 19       		.uleb128 0x19
 2839 026c 02       		.uleb128 0x2
 2840 026d 18       		.uleb128 0x18
 2841 026e 00       		.byte	0
 2842 026f 00       		.byte	0
 2843 0270 00       		.byte	0
 2844              		.section	.debug_aranges,"",%progbits
 2845 0000 D4000000 		.4byte	0xd4
 2846 0004 0200     		.2byte	0x2
 2847 0006 00000000 		.4byte	.Ldebug_info0
 2848 000a 04       		.byte	0x4
 2849 000b 00       		.byte	0
 2850 000c 0000     		.2byte	0
 2851 000e 0000     		.2byte	0
 2852 0010 00000000 		.4byte	.LFB34
 2853 0014 10000000 		.4byte	.LFE34-.LFB34
 2854 0018 00000000 		.4byte	.LFB35
 2855 001c 28000000 		.4byte	.LFE35-.LFB35
 2856 0020 00000000 		.4byte	.LFB36
 2857 0024 28000000 		.4byte	.LFE36-.LFB36
 2858 0028 00000000 		.4byte	.LFB37
 2859 002c 40000000 		.4byte	.LFE37-.LFB37
 2860 0030 00000000 		.4byte	.LFB38
 2861 0034 34000000 		.4byte	.LFE38-.LFB38
 2862 0038 00000000 		.4byte	.LFB39
 2863 003c 8C000000 		.4byte	.LFE39-.LFB39
 2864 0040 00000000 		.4byte	.LFB40
 2865 0044 14000000 		.4byte	.LFE40-.LFB40
 2866 0048 00000000 		.4byte	.LFB41
 2867 004c 40000000 		.4byte	.LFE41-.LFB41
 2868 0050 00000000 		.4byte	.LFB42
 2869 0054 4C000000 		.4byte	.LFE42-.LFB42
 2870 0058 00000000 		.4byte	.LFB43
 2871 005c 88000000 		.4byte	.LFE43-.LFB43
 2872 0060 00000000 		.4byte	.LFB44
 2873 0064 90000000 		.4byte	.LFE44-.LFB44
 2874 0068 00000000 		.4byte	.LFB45
 2875 006c 22000000 		.4byte	.LFE45-.LFB45
 2876 0070 00000000 		.4byte	.LFB46
 2877 0074 24000000 		.4byte	.LFE46-.LFB46
 2878 0078 00000000 		.4byte	.LFB47
 2879 007c 24000000 		.4byte	.LFE47-.LFB47
 2880 0080 00000000 		.4byte	.LFB48
 2881 0084 10000000 		.4byte	.LFE48-.LFB48
 2882 0088 00000000 		.4byte	.LFB49
 2883 008c 10000000 		.4byte	.LFE49-.LFB49
 2884 0090 00000000 		.4byte	.LFB50
 2885 0094 26000000 		.4byte	.LFE50-.LFB50
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 60


 2886 0098 00000000 		.4byte	.LFB51
 2887 009c 26000000 		.4byte	.LFE51-.LFB51
 2888 00a0 00000000 		.4byte	.LFB52
 2889 00a4 2C000000 		.4byte	.LFE52-.LFB52
 2890 00a8 00000000 		.4byte	.LFB53
 2891 00ac 88000000 		.4byte	.LFE53-.LFB53
 2892 00b0 00000000 		.4byte	.LFB54
 2893 00b4 90000000 		.4byte	.LFE54-.LFB54
 2894 00b8 00000000 		.4byte	.LFB55
 2895 00bc 12000000 		.4byte	.LFE55-.LFB55
 2896 00c0 00000000 		.4byte	.LFB56
 2897 00c4 60000000 		.4byte	.LFE56-.LFB56
 2898 00c8 00000000 		.4byte	.LFB57
 2899 00cc 90000000 		.4byte	.LFE57-.LFB57
 2900 00d0 00000000 		.4byte	0
 2901 00d4 00000000 		.4byte	0
 2902              		.section	.debug_ranges,"",%progbits
 2903              	.Ldebug_ranges0:
 2904 0000 00000000 		.4byte	.LFB34
 2905 0004 10000000 		.4byte	.LFE34
 2906 0008 00000000 		.4byte	.LFB35
 2907 000c 28000000 		.4byte	.LFE35
 2908 0010 00000000 		.4byte	.LFB36
 2909 0014 28000000 		.4byte	.LFE36
 2910 0018 00000000 		.4byte	.LFB37
 2911 001c 40000000 		.4byte	.LFE37
 2912 0020 00000000 		.4byte	.LFB38
 2913 0024 34000000 		.4byte	.LFE38
 2914 0028 00000000 		.4byte	.LFB39
 2915 002c 8C000000 		.4byte	.LFE39
 2916 0030 00000000 		.4byte	.LFB40
 2917 0034 14000000 		.4byte	.LFE40
 2918 0038 00000000 		.4byte	.LFB41
 2919 003c 40000000 		.4byte	.LFE41
 2920 0040 00000000 		.4byte	.LFB42
 2921 0044 4C000000 		.4byte	.LFE42
 2922 0048 00000000 		.4byte	.LFB43
 2923 004c 88000000 		.4byte	.LFE43
 2924 0050 00000000 		.4byte	.LFB44
 2925 0054 90000000 		.4byte	.LFE44
 2926 0058 00000000 		.4byte	.LFB45
 2927 005c 22000000 		.4byte	.LFE45
 2928 0060 00000000 		.4byte	.LFB46
 2929 0064 24000000 		.4byte	.LFE46
 2930 0068 00000000 		.4byte	.LFB47
 2931 006c 24000000 		.4byte	.LFE47
 2932 0070 00000000 		.4byte	.LFB48
 2933 0074 10000000 		.4byte	.LFE48
 2934 0078 00000000 		.4byte	.LFB49
 2935 007c 10000000 		.4byte	.LFE49
 2936 0080 00000000 		.4byte	.LFB50
 2937 0084 26000000 		.4byte	.LFE50
 2938 0088 00000000 		.4byte	.LFB51
 2939 008c 26000000 		.4byte	.LFE51
 2940 0090 00000000 		.4byte	.LFB52
 2941 0094 2C000000 		.4byte	.LFE52
 2942 0098 00000000 		.4byte	.LFB53
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 61


 2943 009c 88000000 		.4byte	.LFE53
 2944 00a0 00000000 		.4byte	.LFB54
 2945 00a4 90000000 		.4byte	.LFE54
 2946 00a8 00000000 		.4byte	.LFB55
 2947 00ac 12000000 		.4byte	.LFE55
 2948 00b0 00000000 		.4byte	.LFB56
 2949 00b4 60000000 		.4byte	.LFE56
 2950 00b8 00000000 		.4byte	.LFB57
 2951 00bc 90000000 		.4byte	.LFE57
 2952 00c0 00000000 		.4byte	0
 2953 00c4 00000000 		.4byte	0
 2954              		.section	.debug_line,"",%progbits
 2955              	.Ldebug_line0:
 2956 0000 B9030000 		.section	.debug_str,"MS",%progbits,1
 2956      02004C01 
 2956      00000201 
 2956      FB0E0D00 
 2956      01010101 
 2957              	.LASF68:
 2958 0000 74616C6B 		.ascii	"talking\000"
 2958      696E6700 
 2959              	.LASF32:
 2960 0008 67706962 		.ascii	"gpib_line\000"
 2960      5F6C696E 
 2960      6500
 2961              	.LASF23:
 2962 0012 76657273 		.ascii	"version\000"
 2962      696F6E00 
 2963              	.LASF56:
 2964 001a 67706962 		.ascii	"gpib_address_listener\000"
 2964      5F616464 
 2964      72657373 
 2964      5F6C6973 
 2964      74656E65 
 2965              	.LASF24:
 2966 0030 61646472 		.ascii	"address\000"
 2966      65737300 
 2967              	.LASF2:
 2968 0038 73686F72 		.ascii	"short int\000"
 2968      7420696E 
 2968      7400
 2969              	.LASF21:
 2970 0042 73697A65 		.ascii	"sizetype\000"
 2970      74797065 
 2970      00
 2971              	.LASF72:
 2972 004b 5C5C4D61 		.ascii	"\\\\Mac\\Home\\Documents\\dev\\yaugi\\GPIB USB Adap"
 2972      635C486F 
 2972      6D655C44 
 2972      6F63756D 
 2972      656E7473 
 2973 0077 7465725C 		.ascii	"ter\\GPIB USB 1.cydsn\000"
 2973      47504942 
 2973      20555342 
 2973      20312E63 
 2973      7964736E 
 2974              	.LASF48:
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 62


 2975 008c 67706962 		.ascii	"gpib_interface_clear\000"
 2975      5F696E74 
 2975      65726661 
 2975      63655F63 
 2975      6C656172 
 2976              	.LASF47:
 2977 00a1 67706962 		.ascii	"gpib_settle\000"
 2977      5F736574 
 2977      746C6500 
 2978              	.LASF4:
 2979 00ad 5F5F7569 		.ascii	"__uint16_t\000"
 2979      6E743136 
 2979      5F7400
 2980              	.LASF39:
 2981 00b8 6F6C645F 		.ascii	"old_state\000"
 2981      73746174 
 2981      6500
 2982              	.LASF12:
 2983 00c2 75696E74 		.ascii	"uint8_t\000"
 2983      385F7400 
 2984              	.LASF25:
 2985 00ca 6175746F 		.ascii	"autoread\000"
 2985      72656164 
 2985      00
 2986              	.LASF35:
 2987 00d3 6C696E65 		.ascii	"line\000"
 2987      00
 2988              	.LASF58:
 2989 00d8 67706962 		.ascii	"gpib_get_mode\000"
 2989      5F676574 
 2989      5F6D6F64 
 2989      6500
 2990              	.LASF65:
 2991 00e6 73657474 		.ascii	"settings\000"
 2991      696E6773 
 2991      00
 2992              	.LASF9:
 2993 00ef 6C6F6E67 		.ascii	"long long int\000"
 2993      206C6F6E 
 2993      6720696E 
 2993      7400
 2994              	.LASF55:
 2995 00fd 67706962 		.ascii	"gpib_send_GTL\000"
 2995      5F73656E 
 2995      645F4754 
 2995      4C00
 2996              	.LASF28:
 2997 010b 72656164 		.ascii	"read_tmo_ms\000"
 2997      5F746D6F 
 2997      5F6D7300 
 2998              	.LASF6:
 2999 0117 6C6F6E67 		.ascii	"long int\000"
 2999      20696E74 
 2999      00
 3000              	.LASF71:
 3001 0120 67706962 		.ascii	"gpib.c\000"
 3001      2E6300
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 63


 3002              	.LASF49:
 3003 0127 67706962 		.ascii	"gpib_LAD\000"
 3003      5F4C4144 
 3003      00
 3004              	.LASF3:
 3005 0130 5F5F7569 		.ascii	"__uint8_t\000"
 3005      6E74385F 
 3005      7400
 3006              	.LASF63:
 3007 013a 64657374 		.ascii	"dest\000"
 3007      00
 3008              	.LASF57:
 3009 013f 67706962 		.ascii	"gpib_address_talker\000"
 3009      5F616464 
 3009      72657373 
 3009      5F74616C 
 3009      6B657200 
 3010              	.LASF70:
 3011 0153 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3011      43313120 
 3011      352E342E 
 3011      31203230 
 3011      31363036 
 3012 0186 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 3012      20726576 
 3012      6973696F 
 3012      6E203233 
 3012      37373135 
 3013 01b9 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3013      66756E63 
 3013      74696F6E 
 3013      2D736563 
 3013      74696F6E 
 3014              	.LASF20:
 3015 01e1 6C6F6E67 		.ascii	"long double\000"
 3015      20646F75 
 3015      626C6500 
 3016              	.LASF1:
 3017 01ed 756E7369 		.ascii	"unsigned char\000"
 3017      676E6564 
 3017      20636861 
 3017      7200
 3018              	.LASF73:
 3019 01fb 636C6561 		.ascii	"cleanup\000"
 3019      6E757000 
 3020              	.LASF62:
 3021 0203 67706962 		.ascii	"gpib_read_bytes\000"
 3021      5F726561 
 3021      645F6279 
 3021      74657300 
 3022              	.LASF50:
 3023 0213 67706962 		.ascii	"gpib_TAD\000"
 3023      5F544144 
 3023      00
 3024              	.LASF0:
 3025 021c 7369676E 		.ascii	"signed char\000"
 3025      65642063 
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 64


 3025      68617200 
 3026              	.LASF10:
 3027 0228 6C6F6E67 		.ascii	"long long unsigned int\000"
 3027      206C6F6E 
 3027      6720756E 
 3027      7369676E 
 3027      65642069 
 3028              	.LASF14:
 3029 023f 75696E74 		.ascii	"uint32_t\000"
 3029      33325F74 
 3029      00
 3030              	.LASF11:
 3031 0248 756E7369 		.ascii	"unsigned int\000"
 3031      676E6564 
 3031      20696E74 
 3031      00
 3032              	.LASF13:
 3033 0255 75696E74 		.ascii	"uint16_t\000"
 3033      31365F74 
 3033      00
 3034              	.LASF66:
 3035 025e 6D795F61 		.ascii	"my_address\000"
 3035      64647265 
 3035      737300
 3036              	.LASF42:
 3037 0269 67706962 		.ascii	"gpib_wait_for_line_to_unassert\000"
 3037      5F776169 
 3037      745F666F 
 3037      725F6C69 
 3037      6E655F74 
 3038              	.LASF64:
 3039 0288 6D61786C 		.ascii	"maxlen\000"
 3039      656E00
 3040              	.LASF45:
 3041 028f 6C617374 		.ascii	"last\000"
 3041      00
 3042              	.LASF19:
 3043 0294 72656733 		.ascii	"reg32\000"
 3043      3200
 3044              	.LASF26:
 3045 029a 656F745F 		.ascii	"eot_char\000"
 3045      63686172 
 3045      00
 3046              	.LASF5:
 3047 02a3 73686F72 		.ascii	"short unsigned int\000"
 3047      7420756E 
 3047      7369676E 
 3047      65642069 
 3047      6E7400
 3048              	.LASF27:
 3049 02b6 656F745F 		.ascii	"eot_enable\000"
 3049      656E6162 
 3049      6C6500
 3050              	.LASF29:
 3051 02c1 696E7465 		.ascii	"interact\000"
 3051      72616374 
 3051      00
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 65


 3052              	.LASF46:
 3053 02ca 67706962 		.ascii	"gpib_receive_byte\000"
 3053      5F726563 
 3053      65697665 
 3053      5F627974 
 3053      6500
 3054              	.LASF51:
 3055 02dc 67706962 		.ascii	"gpib_UNL\000"
 3055      5F554E4C 
 3055      00
 3056              	.LASF18:
 3057 02e5 63686172 		.ascii	"char\000"
 3057      00
 3058              	.LASF53:
 3059 02ea 67706962 		.ascii	"gpib_send_SDC\000"
 3059      5F73656E 
 3059      645F5344 
 3059      4300
 3060              	.LASF31:
 3061 02f8 4E524644 		.ascii	"NRFD\000"
 3061      00
 3062              	.LASF43:
 3063 02fd 67706962 		.ascii	"gpib_send_byte\000"
 3063      5F73656E 
 3063      645F6279 
 3063      746500
 3064              	.LASF54:
 3065 030c 67706962 		.ascii	"gpib_send_LLO\000"
 3065      5F73656E 
 3065      645F4C4C 
 3065      4F00
 3066              	.LASF33:
 3067 031a 67706962 		.ascii	"gpib_assert_line\000"
 3067      5F617373 
 3067      6572745F 
 3067      6C696E65 
 3067      00
 3068              	.LASF37:
 3069 032b 5F426F6F 		.ascii	"_Bool\000"
 3069      6C00
 3070              	.LASF69:
 3071 0331 5F677069 		.ascii	"_gpib_mode\000"
 3071      625F6D6F 
 3071      646500
 3072              	.LASF16:
 3073 033c 666C6F61 		.ascii	"float\000"
 3073      7400
 3074              	.LASF67:
 3075 0342 6C697374 		.ascii	"listening\000"
 3075      656E696E 
 3075      6700
 3076              	.LASF15:
 3077 034c 75696E74 		.ascii	"uint32\000"
 3077      333200
 3078              	.LASF8:
 3079 0353 6C6F6E67 		.ascii	"long unsigned int\000"
 3079      20756E73 
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 66


 3079      69676E65 
 3079      6420696E 
 3079      7400
 3080              	.LASF17:
 3081 0365 646F7562 		.ascii	"double\000"
 3081      6C6500
 3082              	.LASF34:
 3083 036c 67706962 		.ascii	"gpib_unassert_line\000"
 3083      5F756E61 
 3083      73736572 
 3083      745F6C69 
 3083      6E6500
 3084              	.LASF7:
 3085 037f 5F5F7569 		.ascii	"__uint32_t\000"
 3085      6E743332 
 3085      5F7400
 3086              	.LASF44:
 3087 038a 62797465 		.ascii	"byte\000"
 3087      00
 3088              	.LASF41:
 3089 038f 67706962 		.ascii	"gpib_wait_for_line_to_assert\000"
 3089      5F776169 
 3089      745F666F 
 3089      725F6C69 
 3089      6E655F74 
 3090              	.LASF59:
 3091 03ac 67706962 		.ascii	"gpib_talking\000"
 3091      5F74616C 
 3091      6B696E67 
 3091      00
 3092              	.LASF22:
 3093 03b9 7369676E 		.ascii	"signature\000"
 3093      61747572 
 3093      6500
 3094              	.LASF38:
 3095 03c3 67706962 		.ascii	"gpib_poll\000"
 3095      5F706F6C 
 3095      6C00
 3096              	.LASF60:
 3097 03cd 67706962 		.ascii	"gpib_send_bytes\000"
 3097      5F73656E 
 3097      645F6279 
 3097      74657300 
 3098              	.LASF61:
 3099 03dd 656F6970 		.ascii	"eoipos\000"
 3099      6F7300
 3100              	.LASF40:
 3101 03e4 67706962 		.ascii	"gpib_read_line\000"
 3101      5F726561 
 3101      645F6C69 
 3101      6E6500
 3102              	.LASF52:
 3103 03f3 67706962 		.ascii	"gpib_UNT\000"
 3103      5F554E54 
 3103      00
 3104              	.LASF36:
 3105 03fc 67706962 		.ascii	"gpib_readall\000"
ARM GAS  C:\Users\essele\AppData\Local\Temp\ccntruGu.s 			page 67


 3105      5F726561 
 3105      64616C6C 
 3105      00
 3106              	.LASF30:
 3107 0409 4E444143 		.ascii	"NDAC\000"
 3107      00
 3108              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
