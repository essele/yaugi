ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"gpib.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	gpib_buffer,256,4
  20              		.section	.text.gpib_get_buffer,"ax",%progbits
  21              		.align	2
  22              		.global	gpib_get_buffer
  23              		.code	16
  24              		.thumb_func
  25              		.type	gpib_get_buffer, %function
  26              	gpib_get_buffer:
  27              	.LFB34:
  28              		.file 1 "gpib.c"
   1:gpib.c        **** /****
   2:gpib.c        ****  * YAUGI -- Yet Another USB GPIB Interface
   3:gpib.c        ****  * 
   4:gpib.c        ****  * Lee Essen, 2019
   5:gpib.c        ****  *
   6:gpib.c        ****  * This work is licensed under a Creative Commons 
   7:gpib.c        ****  * Attribution-NonCommercial-ShareAlike 4.0 International License.
   8:gpib.c        ****  *
   9:gpib.c        ****  */
  10:gpib.c        **** 
  11:gpib.c        **** #include "gpib.h"
  12:gpib.c        **** #include "settings.h"
  13:gpib.c        **** 
  14:gpib.c        **** /**
  15:gpib.c        ****  * How long after we start to see a device do we consider it ok to talk to
  16:gpib.c        ****  * (in ms)
  17:gpib.c        ****  */
  18:gpib.c        **** #define GPIB_INIT_TIME      3000
  19:gpib.c        **** 
  20:gpib.c        **** /**
  21:gpib.c        ****  * The internal gpib buffer
  22:gpib.c        ****  */
  23:gpib.c        **** #define GPIB_BUF_SIZE       256
  24:gpib.c        **** uint8_t gpib_buffer[GPIB_BUF_SIZE];
  25:gpib.c        **** 
  26:gpib.c        **** uint8_t *gpib_get_buffer() {
  29              		.loc 1 26 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 2


  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  27:gpib.c        ****     return gpib_buffer;
  39              		.loc 1 27 0
  40 0004 014B     		ldr	r3, .L3
  28:gpib.c        **** }
  41              		.loc 1 28 0
  42 0006 1800     		movs	r0, r3
  43 0008 BD46     		mov	sp, r7
  44              		@ sp needed
  45 000a 80BD     		pop	{r7, pc}
  46              	.L4:
  47              		.align	2
  48              	.L3:
  49 000c 00000000 		.word	gpib_buffer
  50              		.cfi_endproc
  51              	.LFE34:
  52              		.size	gpib_get_buffer, .-gpib_get_buffer
  53              		.global	my_address
  54              		.data
  55              		.type	my_address, %object
  56              		.size	my_address, 1
  57              	my_address:
  58 0000 15       		.byte	21
  59              		.global	listening
  60 0001 000000   		.align	2
  61              		.type	listening, %object
  62              		.size	listening, 4
  63              	listening:
  64 0004 FFFFFFFF 		.word	-1
  65              		.global	talking
  66              		.align	2
  67              		.type	talking, %object
  68              		.size	talking, 4
  69              	talking:
  70 0008 FFFFFFFF 		.word	-1
  71              		.section	.text.gpib_init_pins,"ax",%progbits
  72              		.align	2
  73              		.global	gpib_init_pins
  74              		.code	16
  75              		.thumb_func
  76              		.type	gpib_init_pins, %function
  77              	gpib_init_pins:
  78              	.LFB35:
  29:gpib.c        **** 
  30:gpib.c        **** 
  31:gpib.c        **** /**
  32:gpib.c        ****  * Definitions of the various lines (for bitbanging)
  33:gpib.c        ****  */
  34:gpib.c        **** typedef enum {
  35:gpib.c        ****     ATN=0, SRQ, IFC, NDAC, NRFD, DAV, EOI, REN } gpib_line;
  36:gpib.c        **** 
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 3


  37:gpib.c        **** /**
  38:gpib.c        ****  * My internal GPIB address (default controller = 21)
  39:gpib.c        ****  */
  40:gpib.c        **** uint8_t my_address = 21;
  41:gpib.c        **** 
  42:gpib.c        **** /**
  43:gpib.c        ****  * Track who is listening and who is talking so we only send commands
  44:gpib.c        ****  * when we need to
  45:gpib.c        ****  */
  46:gpib.c        **** int listening = -1;
  47:gpib.c        **** int talking = -1;
  48:gpib.c        **** 
  49:gpib.c        **** /**
  50:gpib.c        ****  * Ensure the pin settings are correct for all of the pins. This should be
  51:gpib.c        ****  * open drain, with a drive low. (This will be done by the design)
  52:gpib.c        ****  *
  53:gpib.c        ****  */
  54:gpib.c        **** void gpib_init_pins() {
  79              		.loc 1 54 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 1, uses_anonymous_args = 0
  83 0000 80B5     		push	{r7, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  55:gpib.c        ****     
  56:gpib.c        **** }
  89              		.loc 1 56 0
  90 0004 C046     		nop
  91 0006 BD46     		mov	sp, r7
  92              		@ sp needed
  93 0008 80BD     		pop	{r7, pc}
  94              		.cfi_endproc
  95              	.LFE35:
  96              		.size	gpib_init_pins, .-gpib_init_pins
  97              		.section	.text.gpib_settle,"ax",%progbits
  98              		.align	2
  99              		.global	gpib_settle
 100              		.code	16
 101              		.thumb_func
 102              		.type	gpib_settle, %function
 103              	gpib_settle:
 104              	.LFB36:
  57:gpib.c        **** 
  58:gpib.c        **** void gpib_settle() {
 105              		.loc 1 58 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109 0000 80B5     		push	{r7, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 4


 114              		.cfi_def_cfa_register 7
  59:gpib.c        ****     CyDelayUs(2);
 115              		.loc 1 59 0
 116 0004 0220     		movs	r0, #2
 117 0006 FFF7FEFF 		bl	CyDelayUs
  60:gpib.c        **** }
 118              		.loc 1 60 0
 119 000a C046     		nop
 120 000c BD46     		mov	sp, r7
 121              		@ sp needed
 122 000e 80BD     		pop	{r7, pc}
 123              		.cfi_endproc
 124              	.LFE36:
 125              		.size	gpib_settle, .-gpib_settle
 126              		.global	_gpib_mode
 127              		.bss
 128              		.align	2
 129              		.type	_gpib_mode, %object
 130              		.size	_gpib_mode, 4
 131              	_gpib_mode:
 132 0000 00000000 		.space	4
 133              		.section	.text.gpib_assert_line,"ax",%progbits
 134              		.align	2
 135              		.global	gpib_assert_line
 136              		.code	16
 137              		.thumb_func
 138              		.type	gpib_assert_line, %function
 139              	gpib_assert_line:
 140              	.LFB37:
  61:gpib.c        **** 
  62:gpib.c        **** /**
  63:gpib.c        ****  * We can detect if a device is not present since all the pins will be low, if
  64:gpib.c        ****  * that is the case then we don't want to proceed. We'll just check the SIG pins
  65:gpib.c        ****  * since all shouldn't be low in normal operation.
  66:gpib.c        ****  *
  67:gpib.c        ****  * TODO: we should only really do this check when we are not driving anything, otherwise
  68:gpib.c        ****  * we might get strange results.
  69:gpib.c        ****  */
  70:gpib.c        **** 
  71:gpib.c        **** int _gpib_mode = GPIB_NODEVICE;
  72:gpib.c        **** 
  73:gpib.c        **** 
  74:gpib.c        **** 
  75:gpib.c        **** 
  76:gpib.c        **** 
  77:gpib.c        **** /**
  78:gpib.c        ****  * Assert means pulling a line low
  79:gpib.c        ****  */
  80:gpib.c        **** void gpib_assert_line(gpib_line line) {
 141              		.loc 1 80 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 8
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145 0000 80B5     		push	{r7, lr}
 146              		.cfi_def_cfa_offset 8
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 5


 149 0002 82B0     		sub	sp, sp, #8
 150              		.cfi_def_cfa_offset 16
 151 0004 00AF     		add	r7, sp, #0
 152              		.cfi_def_cfa_register 7
 153 0006 0200     		movs	r2, r0
 154 0008 FB1D     		adds	r3, r7, #7
 155 000a 1A70     		strb	r2, [r3]
  81:gpib.c        ****     (*(reg32 *)SIG__DR_CLR) = (1 << line);
 156              		.loc 1 81 0
 157 000c 054B     		ldr	r3, .L8
 158 000e FA1D     		adds	r2, r7, #7
 159 0010 1278     		ldrb	r2, [r2]
 160 0012 0121     		movs	r1, #1
 161 0014 9140     		lsls	r1, r1, r2
 162 0016 0A00     		movs	r2, r1
 163 0018 1A60     		str	r2, [r3]
  82:gpib.c        **** }
 164              		.loc 1 82 0
 165 001a C046     		nop
 166 001c BD46     		mov	sp, r7
 167 001e 02B0     		add	sp, sp, #8
 168              		@ sp needed
 169 0020 80BD     		pop	{r7, pc}
 170              	.L9:
 171 0022 C046     		.align	2
 172              	.L8:
 173 0024 44010440 		.word	1074004292
 174              		.cfi_endproc
 175              	.LFE37:
 176              		.size	gpib_assert_line, .-gpib_assert_line
 177              		.section	.text.gpib_unassert_line,"ax",%progbits
 178              		.align	2
 179              		.global	gpib_unassert_line
 180              		.code	16
 181              		.thumb_func
 182              		.type	gpib_unassert_line, %function
 183              	gpib_unassert_line:
 184              	.LFB38:
  83:gpib.c        **** 
  84:gpib.c        **** /**
  85:gpib.c        ****  * Unasserting means letting it float high
  86:gpib.c        ****  */
  87:gpib.c        **** void gpib_unassert_line(gpib_line line) {
 185              		.loc 1 87 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 8
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 80B5     		push	{r7, lr}
 190              		.cfi_def_cfa_offset 8
 191              		.cfi_offset 7, -8
 192              		.cfi_offset 14, -4
 193 0002 82B0     		sub	sp, sp, #8
 194              		.cfi_def_cfa_offset 16
 195 0004 00AF     		add	r7, sp, #0
 196              		.cfi_def_cfa_register 7
 197 0006 0200     		movs	r2, r0
 198 0008 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 6


 199 000a 1A70     		strb	r2, [r3]
  88:gpib.c        ****     (*(reg32 *)SIG__DR_SET) = (1 << line);
 200              		.loc 1 88 0
 201 000c 054B     		ldr	r3, .L11
 202 000e FA1D     		adds	r2, r7, #7
 203 0010 1278     		ldrb	r2, [r2]
 204 0012 0121     		movs	r1, #1
 205 0014 9140     		lsls	r1, r1, r2
 206 0016 0A00     		movs	r2, r1
 207 0018 1A60     		str	r2, [r3]
  89:gpib.c        **** }
 208              		.loc 1 89 0
 209 001a C046     		nop
 210 001c BD46     		mov	sp, r7
 211 001e 02B0     		add	sp, sp, #8
 212              		@ sp needed
 213 0020 80BD     		pop	{r7, pc}
 214              	.L12:
 215 0022 C046     		.align	2
 216              	.L11:
 217 0024 40010440 		.word	1074004288
 218              		.cfi_endproc
 219              	.LFE38:
 220              		.size	gpib_unassert_line, .-gpib_unassert_line
 221              		.section	.text.gpib_readall,"ax",%progbits
 222              		.align	2
 223              		.global	gpib_readall
 224              		.code	16
 225              		.thumb_func
 226              		.type	gpib_readall, %function
 227              	gpib_readall:
 228              	.LFB39:
  90:gpib.c        **** 
  91:gpib.c        **** uint16_t gpib_readall() {
 229              		.loc 1 91 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 8
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233 0000 80B5     		push	{r7, lr}
 234              		.cfi_def_cfa_offset 8
 235              		.cfi_offset 7, -8
 236              		.cfi_offset 14, -4
 237 0002 82B0     		sub	sp, sp, #8
 238              		.cfi_def_cfa_offset 16
 239 0004 00AF     		add	r7, sp, #0
 240              		.cfi_def_cfa_register 7
  92:gpib.c        ****     uint16_t rc = ((*(reg32 *)SIG__PS) & 0xff) << 8;
 241              		.loc 1 92 0
 242 0006 0C4B     		ldr	r3, .L15
 243 0008 1B68     		ldr	r3, [r3]
 244 000a 9BB2     		uxth	r3, r3
 245 000c FF22     		movs	r2, #255
 246 000e 1340     		ands	r3, r2
 247 0010 9AB2     		uxth	r2, r3
 248 0012 BB1D     		adds	r3, r7, #6
 249 0014 1202     		lsls	r2, r2, #8
 250 0016 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 7


  93:gpib.c        ****     rc |= ((*(reg32 *)DIO__PS) & 0xff);
 251              		.loc 1 93 0
 252 0018 084B     		ldr	r3, .L15+4
 253 001a 1B68     		ldr	r3, [r3]
 254 001c FF22     		movs	r2, #255
 255 001e 1340     		ands	r3, r2
 256 0020 99B2     		uxth	r1, r3
 257 0022 BB1D     		adds	r3, r7, #6
 258 0024 BA1D     		adds	r2, r7, #6
 259 0026 1288     		ldrh	r2, [r2]
 260 0028 0A43     		orrs	r2, r1
 261 002a 1A80     		strh	r2, [r3]
  94:gpib.c        ****     return rc;
 262              		.loc 1 94 0
 263 002c BB1D     		adds	r3, r7, #6
 264 002e 1B88     		ldrh	r3, [r3]
  95:gpib.c        **** }
 265              		.loc 1 95 0
 266 0030 1800     		movs	r0, r3
 267 0032 BD46     		mov	sp, r7
 268 0034 02B0     		add	sp, sp, #8
 269              		@ sp needed
 270 0036 80BD     		pop	{r7, pc}
 271              	.L16:
 272              		.align	2
 273              	.L15:
 274 0038 04010440 		.word	1074004228
 275 003c 04020440 		.word	1074004484
 276              		.cfi_endproc
 277              	.LFE39:
 278              		.size	gpib_readall, .-gpib_readall
 279              		.section	.text.gpib_read_line,"ax",%progbits
 280              		.align	2
 281              		.global	gpib_read_line
 282              		.code	16
 283              		.thumb_func
 284              		.type	gpib_read_line, %function
 285              	gpib_read_line:
 286              	.LFB40:
  96:gpib.c        **** 
  97:gpib.c        **** 
  98:gpib.c        **** /**
  99:gpib.c        ****  * Read the status of a line ... true is low! false is high!
 100:gpib.c        ****  */
 101:gpib.c        **** bool gpib_read_line(gpib_line line) {
 287              		.loc 1 101 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 16
 290              		@ frame_needed = 1, uses_anonymous_args = 0
 291 0000 80B5     		push	{r7, lr}
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 7, -8
 294              		.cfi_offset 14, -4
 295 0002 84B0     		sub	sp, sp, #16
 296              		.cfi_def_cfa_offset 24
 297 0004 00AF     		add	r7, sp, #0
 298              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 8


 299 0006 0200     		movs	r2, r0
 300 0008 FB1D     		adds	r3, r7, #7
 301 000a 1A70     		strb	r2, [r3]
 102:gpib.c        ****     int v = ((*(reg32 *)SIG__PS) >> line) & 0x0001;
 302              		.loc 1 102 0
 303 000c 084B     		ldr	r3, .L19
 304 000e 1A68     		ldr	r2, [r3]
 305 0010 FB1D     		adds	r3, r7, #7
 306 0012 1B78     		ldrb	r3, [r3]
 307 0014 DA40     		lsrs	r2, r2, r3
 308 0016 1300     		movs	r3, r2
 309 0018 1A00     		movs	r2, r3
 310 001a 0123     		movs	r3, #1
 311 001c 1340     		ands	r3, r2
 312 001e FB60     		str	r3, [r7, #12]
 103:gpib.c        ****     return v == 0 ? true : false;
 313              		.loc 1 103 0
 314 0020 FB68     		ldr	r3, [r7, #12]
 315 0022 5A42     		rsbs	r2, r3, #0
 316 0024 5341     		adcs	r3, r3, r2
 317 0026 DBB2     		uxtb	r3, r3
 104:gpib.c        **** }
 318              		.loc 1 104 0
 319 0028 1800     		movs	r0, r3
 320 002a BD46     		mov	sp, r7
 321 002c 04B0     		add	sp, sp, #16
 322              		@ sp needed
 323 002e 80BD     		pop	{r7, pc}
 324              	.L20:
 325              		.align	2
 326              	.L19:
 327 0030 04010440 		.word	1074004228
 328              		.cfi_endproc
 329              	.LFE40:
 330              		.size	gpib_read_line, .-gpib_read_line
 331              		.section	.text.gpib_poll,"ax",%progbits
 332              		.align	2
 333              		.global	gpib_poll
 334              		.code	16
 335              		.thumb_func
 336              		.type	gpib_poll, %function
 337              	gpib_poll:
 338              	.LFB41:
 105:gpib.c        **** 
 106:gpib.c        **** 
 107:gpib.c        **** /**
 108:gpib.c        ****  * Called periodically, will announce state changes, return value of 1 indicates we have
 109:gpib.c        ****  * had a state change.
 110:gpib.c        ****  *
 111:gpib.c        ****  * We'll just keep an eye on IFC and ATN ... if either are low then (since we are the controller) t
 112:gpib.c        ****  * must be a power fail/missing device.
 113:gpib.c        ****  *
 114:gpib.c        ****  * Once a device looks like it's back, we start a timer so we don't jump the gun
 115:gpib.c        ****  */
 116:gpib.c        **** int gpib_poll() {
 339              		.loc 1 116 0
 340              		.cfi_startproc
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 9


 341              		@ args = 0, pretend = 0, frame = 8
 342              		@ frame_needed = 1, uses_anonymous_args = 0
 343 0000 90B5     		push	{r4, r7, lr}
 344              		.cfi_def_cfa_offset 12
 345              		.cfi_offset 4, -12
 346              		.cfi_offset 7, -8
 347              		.cfi_offset 14, -4
 348 0002 83B0     		sub	sp, sp, #12
 349              		.cfi_def_cfa_offset 24
 350 0004 00AF     		add	r7, sp, #0
 351              		.cfi_def_cfa_register 7
 117:gpib.c        ****     //uint8_t sig = (*(reg32 *)SIG__PS & 0xff);
 118:gpib.c        ****     int old_state = _gpib_mode;
 352              		.loc 1 118 0
 353 0006 1F4B     		ldr	r3, .L27
 354 0008 1B68     		ldr	r3, [r3]
 355 000a 7B60     		str	r3, [r7, #4]
 119:gpib.c        ****    
 120:gpib.c        ****     bool atn = gpib_read_line(ATN);
 356              		.loc 1 120 0
 357 000c FC1C     		adds	r4, r7, #3
 358 000e 0020     		movs	r0, #0
 359 0010 FFF7FEFF 		bl	gpib_read_line
 360 0014 0300     		movs	r3, r0
 361 0016 2370     		strb	r3, [r4]
 121:gpib.c        ****     bool ifc = gpib_read_line(IFC);
 362              		.loc 1 121 0
 363 0018 BC1C     		adds	r4, r7, #2
 364 001a 0220     		movs	r0, #2
 365 001c FFF7FEFF 		bl	gpib_read_line
 366 0020 0300     		movs	r3, r0
 367 0022 2370     		strb	r3, [r4]
 122:gpib.c        ****     
 123:gpib.c        ****     // Used to disable state checking (if a scope is on the lines!)
 124:gpib.c        ****     //    atn = ifc = false;
 125:gpib.c        ****     
 126:gpib.c        ****     // If either ATN or IFC are zero, then we must be missing a device ;-)
 127:gpib.c        ****     if (atn || ifc) {
 368              		.loc 1 127 0
 369 0024 FB1C     		adds	r3, r7, #3
 370 0026 1B78     		ldrb	r3, [r3]
 371 0028 002B     		cmp	r3, #0
 372 002a 03D1     		bne	.L22
 373              		.loc 1 127 0 is_stmt 0 discriminator 1
 374 002c BB1C     		adds	r3, r7, #2
 375 002e 1B78     		ldrb	r3, [r3]
 376 0030 002B     		cmp	r3, #0
 377 0032 03D0     		beq	.L23
 378              	.L22:
 128:gpib.c        ****         _gpib_mode = GPIB_NODEVICE;
 379              		.loc 1 128 0 is_stmt 1
 380 0034 134B     		ldr	r3, .L27
 381 0036 0022     		movs	r2, #0
 382 0038 1A60     		str	r2, [r3]
 383 003a 17E0     		b	.L24
 384              	.L23:
 129:gpib.c        ****     } else if (_gpib_mode == GPIB_NODEVICE) {
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 10


 385              		.loc 1 129 0
 386 003c 114B     		ldr	r3, .L27
 387 003e 1B68     		ldr	r3, [r3]
 388 0040 002B     		cmp	r3, #0
 389 0042 06D1     		bne	.L25
 130:gpib.c        ****         // device has potentially come back ... zero the timer..
 131:gpib.c        ****         Timer1_WriteCounter(0);
 390              		.loc 1 131 0
 391 0044 0020     		movs	r0, #0
 392 0046 FFF7FEFF 		bl	Timer1_WriteCounter
 132:gpib.c        ****         _gpib_mode = GPIB_INIT;
 393              		.loc 1 132 0
 394 004a 0E4B     		ldr	r3, .L27
 395 004c 0122     		movs	r2, #1
 396 004e 1A60     		str	r2, [r3]
 397 0050 0CE0     		b	.L24
 398              	.L25:
 133:gpib.c        ****     } else if (_gpib_mode == GPIB_INIT) {
 399              		.loc 1 133 0
 400 0052 0C4B     		ldr	r3, .L27
 401 0054 1B68     		ldr	r3, [r3]
 402 0056 012B     		cmp	r3, #1
 403 0058 08D1     		bne	.L24
 134:gpib.c        ****         // after a period we need to switch
 135:gpib.c        ****         if (Timer1_ReadCounter() > GPIB_INIT_TIME) {
 404              		.loc 1 135 0
 405 005a FFF7FEFF 		bl	Timer1_ReadCounter
 406 005e 0200     		movs	r2, r0
 407 0060 094B     		ldr	r3, .L27+4
 408 0062 9A42     		cmp	r2, r3
 409 0064 02D9     		bls	.L24
 136:gpib.c        ****             _gpib_mode = GPIB_RUNNING;
 410              		.loc 1 136 0
 411 0066 074B     		ldr	r3, .L27
 412 0068 0222     		movs	r2, #2
 413 006a 1A60     		str	r2, [r3]
 414              	.L24:
 137:gpib.c        ****         }
 138:gpib.c        ****     }    
 139:gpib.c        ****     return (_gpib_mode != old_state ? 1 : 0);
 415              		.loc 1 139 0
 416 006c 054B     		ldr	r3, .L27
 417 006e 1A68     		ldr	r2, [r3]
 418 0070 7B68     		ldr	r3, [r7, #4]
 419 0072 D31A     		subs	r3, r2, r3
 420 0074 5A1E     		subs	r2, r3, #1
 421 0076 9341     		sbcs	r3, r3, r2
 422 0078 DBB2     		uxtb	r3, r3
 140:gpib.c        **** }
 423              		.loc 1 140 0
 424 007a 1800     		movs	r0, r3
 425 007c BD46     		mov	sp, r7
 426 007e 03B0     		add	sp, sp, #12
 427              		@ sp needed
 428 0080 90BD     		pop	{r4, r7, pc}
 429              	.L28:
 430 0082 C046     		.align	2
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 11


 431              	.L27:
 432 0084 00000000 		.word	_gpib_mode
 433 0088 B80B0000 		.word	3000
 434              		.cfi_endproc
 435              	.LFE41:
 436              		.size	gpib_poll, .-gpib_poll
 437              		.section	.text.gpib_get_mode,"ax",%progbits
 438              		.align	2
 439              		.global	gpib_get_mode
 440              		.code	16
 441              		.thumb_func
 442              		.type	gpib_get_mode, %function
 443              	gpib_get_mode:
 444              	.LFB42:
 141:gpib.c        **** 
 142:gpib.c        **** int gpib_get_mode() {
 445              		.loc 1 142 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 80B5     		push	{r7, lr}
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 7, -8
 452              		.cfi_offset 14, -4
 453 0002 00AF     		add	r7, sp, #0
 454              		.cfi_def_cfa_register 7
 143:gpib.c        ****     return _gpib_mode;
 455              		.loc 1 143 0
 456 0004 024B     		ldr	r3, .L31
 457 0006 1B68     		ldr	r3, [r3]
 144:gpib.c        **** }
 458              		.loc 1 144 0
 459 0008 1800     		movs	r0, r3
 460 000a BD46     		mov	sp, r7
 461              		@ sp needed
 462 000c 80BD     		pop	{r7, pc}
 463              	.L32:
 464 000e C046     		.align	2
 465              	.L31:
 466 0010 00000000 		.word	_gpib_mode
 467              		.cfi_endproc
 468              	.LFE42:
 469              		.size	gpib_get_mode, .-gpib_get_mode
 470              		.section	.text.gpib_wait_for_line_to_assert,"ax",%progbits
 471              		.align	2
 472              		.global	gpib_wait_for_line_to_assert
 473              		.code	16
 474              		.thumb_func
 475              		.type	gpib_wait_for_line_to_assert, %function
 476              	gpib_wait_for_line_to_assert:
 477              	.LFB43:
 145:gpib.c        **** 
 146:gpib.c        **** /**
 147:gpib.c        ****  * Wait for a line to go low, if it doesn't within read_tmo_ms then timeout
 148:gpib.c        ****  */
 149:gpib.c        **** bool gpib_wait_for_line_to_assert(gpib_line line) {
 478              		.loc 1 149 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 12


 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 8
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482 0000 80B5     		push	{r7, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 82B0     		sub	sp, sp, #8
 487              		.cfi_def_cfa_offset 16
 488 0004 00AF     		add	r7, sp, #0
 489              		.cfi_def_cfa_register 7
 490 0006 0200     		movs	r2, r0
 491 0008 FB1D     		adds	r3, r7, #7
 492 000a 1A70     		strb	r2, [r3]
 150:gpib.c        ****     // Prepare the counter...
 151:gpib.c        ****     Timer1_WriteCounter(0);
 493              		.loc 1 151 0
 494 000c 0020     		movs	r0, #0
 495 000e FFF7FEFF 		bl	Timer1_WriteCounter
 496              	.L37:
 152:gpib.c        ****     
 153:gpib.c        ****     while (1) {
 154:gpib.c        ****         if (gpib_read_line(line) == true) {
 497              		.loc 1 154 0
 498 0012 FB1D     		adds	r3, r7, #7
 499 0014 1B78     		ldrb	r3, [r3]
 500 0016 1800     		movs	r0, r3
 501 0018 FFF7FEFF 		bl	gpib_read_line
 502 001c 031E     		subs	r3, r0, #0
 503 001e 01D0     		beq	.L34
 155:gpib.c        ****             return true;
 504              		.loc 1 155 0
 505 0020 0123     		movs	r3, #1
 506 0022 07E0     		b	.L35
 507              	.L34:
 156:gpib.c        ****         }
 157:gpib.c        ****         if (Timer1_ReadCounter() > settings.read_tmo_ms) {
 508              		.loc 1 157 0
 509 0024 FFF7FEFF 		bl	Timer1_ReadCounter
 510 0028 0200     		movs	r2, r0
 511 002a 044B     		ldr	r3, .L38
 512 002c 5B8A     		ldrh	r3, [r3, #18]
 513 002e 9A42     		cmp	r2, r3
 514 0030 EFD9     		bls	.L37
 158:gpib.c        ****             return false;
 515              		.loc 1 158 0
 516 0032 0023     		movs	r3, #0
 517              	.L35:
 159:gpib.c        ****         }
 160:gpib.c        ****     }
 161:gpib.c        **** }
 518              		.loc 1 161 0
 519 0034 1800     		movs	r0, r3
 520 0036 BD46     		mov	sp, r7
 521 0038 02B0     		add	sp, sp, #8
 522              		@ sp needed
 523 003a 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 13


 524              	.L39:
 525              		.align	2
 526              	.L38:
 527 003c 00000000 		.word	settings
 528              		.cfi_endproc
 529              	.LFE43:
 530              		.size	gpib_wait_for_line_to_assert, .-gpib_wait_for_line_to_assert
 531              		.section	.text.gpib_wait_for_line_to_unassert,"ax",%progbits
 532              		.align	2
 533              		.global	gpib_wait_for_line_to_unassert
 534              		.code	16
 535              		.thumb_func
 536              		.type	gpib_wait_for_line_to_unassert, %function
 537              	gpib_wait_for_line_to_unassert:
 538              	.LFB44:
 162:gpib.c        **** 
 163:gpib.c        **** /**
 164:gpib.c        ****  * Wait for a line to go high, if it doesn't within read_tmo_ms then timeout
 165:gpib.c        ****  */
 166:gpib.c        **** bool gpib_wait_for_line_to_unassert(gpib_line line) {
 539              		.loc 1 166 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 8
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543 0000 80B5     		push	{r7, lr}
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 7, -8
 546              		.cfi_offset 14, -4
 547 0002 82B0     		sub	sp, sp, #8
 548              		.cfi_def_cfa_offset 16
 549 0004 00AF     		add	r7, sp, #0
 550              		.cfi_def_cfa_register 7
 551 0006 0200     		movs	r2, r0
 552 0008 FB1D     		adds	r3, r7, #7
 553 000a 1A70     		strb	r2, [r3]
 167:gpib.c        ****     // Prepare the counter...
 168:gpib.c        ****     Timer1_WriteCounter(0);
 554              		.loc 1 168 0
 555 000c 0020     		movs	r0, #0
 556 000e FFF7FEFF 		bl	Timer1_WriteCounter
 557              	.L44:
 169:gpib.c        ****  
 170:gpib.c        ****     while (1) {
 171:gpib.c        ****         if (gpib_read_line(line) == false) {
 558              		.loc 1 171 0
 559 0012 FB1D     		adds	r3, r7, #7
 560 0014 1B78     		ldrb	r3, [r3]
 561 0016 1800     		movs	r0, r3
 562 0018 FFF7FEFF 		bl	gpib_read_line
 563 001c 0300     		movs	r3, r0
 564 001e 1A00     		movs	r2, r3
 565 0020 0123     		movs	r3, #1
 566 0022 5340     		eors	r3, r2
 567 0024 DBB2     		uxtb	r3, r3
 568 0026 002B     		cmp	r3, #0
 569 0028 01D0     		beq	.L41
 172:gpib.c        ****             return true;
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 14


 570              		.loc 1 172 0
 571 002a 0123     		movs	r3, #1
 572 002c 07E0     		b	.L42
 573              	.L41:
 173:gpib.c        ****         }
 174:gpib.c        ****         if (Timer1_ReadCounter() > settings.read_tmo_ms) {
 574              		.loc 1 174 0
 575 002e FFF7FEFF 		bl	Timer1_ReadCounter
 576 0032 0200     		movs	r2, r0
 577 0034 044B     		ldr	r3, .L45
 578 0036 5B8A     		ldrh	r3, [r3, #18]
 579 0038 9A42     		cmp	r2, r3
 580 003a EAD9     		bls	.L44
 175:gpib.c        ****             return false;
 581              		.loc 1 175 0
 582 003c 0023     		movs	r3, #0
 583              	.L42:
 176:gpib.c        ****         }
 177:gpib.c        ****     }
 178:gpib.c        **** }
 584              		.loc 1 178 0
 585 003e 1800     		movs	r0, r3
 586 0040 BD46     		mov	sp, r7
 587 0042 02B0     		add	sp, sp, #8
 588              		@ sp needed
 589 0044 80BD     		pop	{r7, pc}
 590              	.L46:
 591 0046 C046     		.align	2
 592              	.L45:
 593 0048 00000000 		.word	settings
 594              		.cfi_endproc
 595              	.LFE44:
 596              		.size	gpib_wait_for_line_to_unassert, .-gpib_wait_for_line_to_unassert
 597              		.section	.text.gpib_send_byte,"ax",%progbits
 598              		.align	2
 599              		.global	gpib_send_byte
 600              		.code	16
 601              		.thumb_func
 602              		.type	gpib_send_byte, %function
 603              	gpib_send_byte:
 604              	.LFB45:
 179:gpib.c        **** 
 180:gpib.c        **** /**
 181:gpib.c        ****  * Transmit a byte of data on the bus, post this call nothing should be
 182:gpib.c        ****  * asserted. An error returns false.
 183:gpib.c        ****  */
 184:gpib.c        **** bool gpib_send_byte(uint8_t byte, bool last) {
 605              		.loc 1 184 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 16
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609 0000 90B5     		push	{r4, r7, lr}
 610              		.cfi_def_cfa_offset 12
 611              		.cfi_offset 4, -12
 612              		.cfi_offset 7, -8
 613              		.cfi_offset 14, -4
 614 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 15


 615              		.cfi_def_cfa_offset 32
 616 0004 00AF     		add	r7, sp, #0
 617              		.cfi_def_cfa_register 7
 618 0006 0200     		movs	r2, r0
 619 0008 FB1D     		adds	r3, r7, #7
 620 000a 1A70     		strb	r2, [r3]
 621 000c BB1D     		adds	r3, r7, #6
 622 000e 0A1C     		adds	r2, r1, #0
 623 0010 1A70     		strb	r2, [r3]
 185:gpib.c        ****     bool ok;
 186:gpib.c        ****     
 187:gpib.c        ****     if (last) {
 624              		.loc 1 187 0
 625 0012 BB1D     		adds	r3, r7, #6
 626 0014 1B78     		ldrb	r3, [r3]
 627 0016 002B     		cmp	r3, #0
 628 0018 02D0     		beq	.L48
 188:gpib.c        ****        gpib_assert_line(EOI);
 629              		.loc 1 188 0
 630 001a 0620     		movs	r0, #6
 631 001c FFF7FEFF 		bl	gpib_assert_line
 632              	.L48:
 189:gpib.c        ****     }
 190:gpib.c        ****     
 191:gpib.c        ****     // Wait for NRFD to be high...
 192:gpib.c        ****     ok = gpib_wait_for_line_to_unassert(NRFD);
 633              		.loc 1 192 0
 634 0020 0F23     		movs	r3, #15
 635 0022 FC18     		adds	r4, r7, r3
 636 0024 0420     		movs	r0, #4
 637 0026 FFF7FEFF 		bl	gpib_wait_for_line_to_unassert
 638 002a 0300     		movs	r3, r0
 639 002c 2370     		strb	r3, [r4]
 193:gpib.c        ****     if (!ok) goto cleanup;
 640              		.loc 1 193 0
 641 002e 0F23     		movs	r3, #15
 642 0030 FB18     		adds	r3, r7, r3
 643 0032 1B78     		ldrb	r3, [r3]
 644 0034 0122     		movs	r2, #1
 645 0036 5340     		eors	r3, r2
 646 0038 DBB2     		uxtb	r3, r3
 647 003a 002B     		cmp	r3, #0
 648 003c 11D1     		bne	.L52
 194:gpib.c        ****     
 195:gpib.c        ****     // Write data onto the bus... (reverse logic!)
 196:gpib.c        ****     (*(reg32 *)DIO__DR) = ~byte;
 649              		.loc 1 196 0
 650 003e 114B     		ldr	r3, .L53
 651 0040 FA1D     		adds	r2, r7, #7
 652 0042 1278     		ldrb	r2, [r2]
 653 0044 D243     		mvns	r2, r2
 654 0046 1A60     		str	r2, [r3]
 197:gpib.c        ****     
 198:gpib.c        ****     // Allow settling time...
 199:gpib.c        ****     gpib_settle();     // we may need to adjust this later
 655              		.loc 1 199 0
 656 0048 FFF7FEFF 		bl	gpib_settle
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 16


 200:gpib.c        ****     
 201:gpib.c        ****     // Signal data is valie...
 202:gpib.c        ****     gpib_assert_line(DAV);
 657              		.loc 1 202 0
 658 004c 0520     		movs	r0, #5
 659 004e FFF7FEFF 		bl	gpib_assert_line
 203:gpib.c        ****     
 204:gpib.c        ****     // Wait until everyone has received it...
 205:gpib.c        ****     ok = gpib_wait_for_line_to_unassert(NDAC);
 660              		.loc 1 205 0
 661 0052 0F23     		movs	r3, #15
 662 0054 FC18     		adds	r4, r7, r3
 663 0056 0320     		movs	r0, #3
 664 0058 FFF7FEFF 		bl	gpib_wait_for_line_to_unassert
 665 005c 0300     		movs	r3, r0
 666 005e 2370     		strb	r3, [r4]
 667 0060 00E0     		b	.L50
 668              	.L52:
 193:gpib.c        ****     
 669              		.loc 1 193 0
 670 0062 C046     		nop
 671              	.L50:
 206:gpib.c        **** 
 207:gpib.c        **** cleanup:    
 208:gpib.c        ****     // Stop transmitting and clear the data
 209:gpib.c        ****     gpib_unassert_line(DAV);
 672              		.loc 1 209 0
 673 0064 0520     		movs	r0, #5
 674 0066 FFF7FEFF 		bl	gpib_unassert_line
 210:gpib.c        ****     (*(reg32 *)DIO__DR) = 0xff;
 675              		.loc 1 210 0
 676 006a 064B     		ldr	r3, .L53
 677 006c FF22     		movs	r2, #255
 678 006e 1A60     		str	r2, [r3]
 211:gpib.c        **** 
 212:gpib.c        ****     // Unassert anyway...
 213:gpib.c        ****     gpib_unassert_line(EOI);
 679              		.loc 1 213 0
 680 0070 0620     		movs	r0, #6
 681 0072 FFF7FEFF 		bl	gpib_unassert_line
 214:gpib.c        ****     
 215:gpib.c        ****     return ok;
 682              		.loc 1 215 0
 683 0076 0F23     		movs	r3, #15
 684 0078 FB18     		adds	r3, r7, r3
 685 007a 1B78     		ldrb	r3, [r3]
 216:gpib.c        ****  }
 686              		.loc 1 216 0
 687 007c 1800     		movs	r0, r3
 688 007e BD46     		mov	sp, r7
 689 0080 05B0     		add	sp, sp, #20
 690              		@ sp needed
 691 0082 90BD     		pop	{r4, r7, pc}
 692              	.L54:
 693              		.align	2
 694              	.L53:
 695 0084 00020440 		.word	1074004480
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 17


 696              		.cfi_endproc
 697              	.LFE45:
 698              		.size	gpib_send_byte, .-gpib_send_byte
 699              		.section	.text.gpib_receive_byte,"ax",%progbits
 700              		.align	2
 701              		.global	gpib_receive_byte
 702              		.code	16
 703              		.thumb_func
 704              		.type	gpib_receive_byte, %function
 705              	gpib_receive_byte:
 706              	.LFB46:
 217:gpib.c        **** 
 218:gpib.c        **** /**
 219:gpib.c        ****  * Read a character from the GPIB bus, return 0 if we got a timeout
 220:gpib.c        ****  * or 1 on success.
 221:gpib.c        ****  */
 222:gpib.c        **** int gpib_receive_byte(uint8_t *byte, int *eoi) {
 707              		.loc 1 222 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 16
 710              		@ frame_needed = 1, uses_anonymous_args = 0
 711 0000 80B5     		push	{r7, lr}
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 7, -8
 714              		.cfi_offset 14, -4
 715 0002 84B0     		sub	sp, sp, #16
 716              		.cfi_def_cfa_offset 24
 717 0004 00AF     		add	r7, sp, #0
 718              		.cfi_def_cfa_register 7
 719 0006 7860     		str	r0, [r7, #4]
 720 0008 3960     		str	r1, [r7]
 223:gpib.c        ****     int ok;
 224:gpib.c        ****     
 225:gpib.c        ****     gpib_assert_line(NDAC);
 721              		.loc 1 225 0
 722 000a 0320     		movs	r0, #3
 723 000c FFF7FEFF 		bl	gpib_assert_line
 226:gpib.c        ****     
 227:gpib.c        ****     /*
 228:gpib.c        ****     // Prepare to receive...
 229:gpib.c        ****     gpib_assert_line(NRFD);
 230:gpib.c        ****     
 231:gpib.c        ****     // Why do they unassert ATN if it's set??
 232:gpib.c        ****     */
 233:gpib.c        ****     
 234:gpib.c        ****     // Signal our readiness... (should alreadt be done)
 235:gpib.c        ****     gpib_unassert_line(NRFD);
 724              		.loc 1 235 0
 725 0010 0420     		movs	r0, #4
 726 0012 FFF7FEFF 		bl	gpib_unassert_line
 236:gpib.c        ****     
 237:gpib.c        ****     
 238:gpib.c        ****     // Wait for data to be available...
 239:gpib.c        ****     ok = gpib_wait_for_line_to_assert(DAV);
 727              		.loc 1 239 0
 728 0016 0520     		movs	r0, #5
 729 0018 FFF7FEFF 		bl	gpib_wait_for_line_to_assert
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 18


 730 001c 0300     		movs	r3, r0
 731 001e FB60     		str	r3, [r7, #12]
 240:gpib.c        ****     if (!ok) {
 732              		.loc 1 240 0
 733 0020 FB68     		ldr	r3, [r7, #12]
 734 0022 002B     		cmp	r3, #0
 735 0024 07D1     		bne	.L56
 241:gpib.c        ****         gpib_unassert_line(NRFD);
 736              		.loc 1 241 0
 737 0026 0420     		movs	r0, #4
 738 0028 FFF7FEFF 		bl	gpib_unassert_line
 242:gpib.c        ****         gpib_unassert_line(NDAC);
 739              		.loc 1 242 0
 740 002c 0320     		movs	r0, #3
 741 002e FFF7FEFF 		bl	gpib_unassert_line
 243:gpib.c        ****         return 0;
 742              		.loc 1 243 0
 743 0032 0023     		movs	r3, #0
 744 0034 26E0     		b	.L57
 745              	.L56:
 244:gpib.c        ****     }
 245:gpib.c        ****     // Not ready for more data at this point
 246:gpib.c        ****     gpib_assert_line(NRFD);
 746              		.loc 1 246 0
 747 0036 0420     		movs	r0, #4
 748 0038 FFF7FEFF 		bl	gpib_assert_line
 247:gpib.c        ****     
 248:gpib.c        ****     // Read the data...
 249:gpib.c        ****     *byte = ~(*(reg32 *)DIO__PS);
 749              		.loc 1 249 0
 750 003c 134B     		ldr	r3, .L59
 751 003e 1B68     		ldr	r3, [r3]
 752 0040 DBB2     		uxtb	r3, r3
 753 0042 DB43     		mvns	r3, r3
 754 0044 DAB2     		uxtb	r2, r3
 755 0046 7B68     		ldr	r3, [r7, #4]
 756 0048 1A70     		strb	r2, [r3]
 250:gpib.c        ****     *eoi = gpib_read_line(EOI);
 757              		.loc 1 250 0
 758 004a 0620     		movs	r0, #6
 759 004c FFF7FEFF 		bl	gpib_read_line
 760 0050 0300     		movs	r3, r0
 761 0052 1A00     		movs	r2, r3
 762 0054 3B68     		ldr	r3, [r7]
 763 0056 1A60     		str	r2, [r3]
 251:gpib.c        ****     
 252:gpib.c        ****     // If byte is NL (10 decimal) then it's the same as EOI
 253:gpib.c        ****     if (*byte == 10) {
 764              		.loc 1 253 0
 765 0058 7B68     		ldr	r3, [r7, #4]
 766 005a 1B78     		ldrb	r3, [r3]
 767 005c 0A2B     		cmp	r3, #10
 768 005e 02D1     		bne	.L58
 254:gpib.c        ****         *eoi = true;    // TODO
 769              		.loc 1 254 0
 770 0060 3B68     		ldr	r3, [r7]
 771 0062 0122     		movs	r2, #1
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 19


 772 0064 1A60     		str	r2, [r3]
 773              	.L58:
 255:gpib.c        ****     }
 256:gpib.c        ****     
 257:gpib.c        ****     
 258:gpib.c        ****     // We've read it...
 259:gpib.c        ****     gpib_unassert_line(NDAC);
 774              		.loc 1 259 0
 775 0066 0320     		movs	r0, #3
 776 0068 FFF7FEFF 		bl	gpib_unassert_line
 260:gpib.c        ****  //   gpib_settle();                  // why would we do this?
 261:gpib.c        ****     
 262:gpib.c        ****     // Wait for the talker to finish this byte
 263:gpib.c        ****     ok = gpib_wait_for_line_to_unassert(DAV);    
 777              		.loc 1 263 0
 778 006c 0520     		movs	r0, #5
 779 006e FFF7FEFF 		bl	gpib_wait_for_line_to_unassert
 780 0072 0300     		movs	r3, r0
 781 0074 FB60     		str	r3, [r7, #12]
 264:gpib.c        **** 
 265:gpib.c        **** //cleanup:
 266:gpib.c        ****     gpib_assert_line(NDAC);
 782              		.loc 1 266 0
 783 0076 0320     		movs	r0, #3
 784 0078 FFF7FEFF 		bl	gpib_assert_line
 267:gpib.c        ****     gpib_unassert_line(NRFD);   // we are still ready for data
 785              		.loc 1 267 0
 786 007c 0420     		movs	r0, #4
 787 007e FFF7FEFF 		bl	gpib_unassert_line
 268:gpib.c        ****  
 269:gpib.c        ****     //gpib_settle();
 270:gpib.c        ****     
 271:gpib.c        ****     return ok;
 788              		.loc 1 271 0
 789 0082 FB68     		ldr	r3, [r7, #12]
 790              	.L57:
 272:gpib.c        **** }
 791              		.loc 1 272 0
 792 0084 1800     		movs	r0, r3
 793 0086 BD46     		mov	sp, r7
 794 0088 04B0     		add	sp, sp, #16
 795              		@ sp needed
 796 008a 80BD     		pop	{r7, pc}
 797              	.L60:
 798              		.align	2
 799              	.L59:
 800 008c 04020440 		.word	1074004484
 801              		.cfi_endproc
 802              	.LFE46:
 803              		.size	gpib_receive_byte, .-gpib_receive_byte
 804              		.section	.text.gpib_interface_clear,"ax",%progbits
 805              		.align	2
 806              		.global	gpib_interface_clear
 807              		.code	16
 808              		.thumb_func
 809              		.type	gpib_interface_clear, %function
 810              	gpib_interface_clear:
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 20


 811              	.LFB47:
 273:gpib.c        **** 
 274:gpib.c        **** void gpib_interface_clear() {
 812              		.loc 1 274 0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 0
 815              		@ frame_needed = 1, uses_anonymous_args = 0
 816 0000 80B5     		push	{r7, lr}
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 7, -8
 819              		.cfi_offset 14, -4
 820 0002 00AF     		add	r7, sp, #0
 821              		.cfi_def_cfa_register 7
 275:gpib.c        ****     gpib_assert_line(IFC);
 822              		.loc 1 275 0
 823 0004 0220     		movs	r0, #2
 824 0006 FFF7FEFF 		bl	gpib_assert_line
 276:gpib.c        ****     CyDelayUs(150);
 825              		.loc 1 276 0
 826 000a 9620     		movs	r0, #150
 827 000c FFF7FEFF 		bl	CyDelayUs
 277:gpib.c        ****     gpib_unassert_line(IFC);
 828              		.loc 1 277 0
 829 0010 0220     		movs	r0, #2
 830 0012 FFF7FEFF 		bl	gpib_unassert_line
 278:gpib.c        ****     CyDelayUs(150);                 // do we need to delay afterwards?
 831              		.loc 1 278 0
 832 0016 9620     		movs	r0, #150
 833 0018 FFF7FEFF 		bl	CyDelayUs
 279:gpib.c        **** }
 834              		.loc 1 279 0
 835 001c C046     		nop
 836 001e BD46     		mov	sp, r7
 837              		@ sp needed
 838 0020 80BD     		pop	{r7, pc}
 839              		.cfi_endproc
 840              	.LFE47:
 841              		.size	gpib_interface_clear, .-gpib_interface_clear
 842 0022 C046     		.section	.text.gpib_LAD,"ax",%progbits
 843              		.align	2
 844              		.global	gpib_LAD
 845              		.code	16
 846              		.thumb_func
 847              		.type	gpib_LAD, %function
 848              	gpib_LAD:
 849              	.LFB48:
 280:gpib.c        **** 
 281:gpib.c        **** void gpib_LAD(uint8_t address) {
 850              		.loc 1 281 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 8
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854 0000 80B5     		push	{r7, lr}
 855              		.cfi_def_cfa_offset 8
 856              		.cfi_offset 7, -8
 857              		.cfi_offset 14, -4
 858 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 21


 859              		.cfi_def_cfa_offset 16
 860 0004 00AF     		add	r7, sp, #0
 861              		.cfi_def_cfa_register 7
 862 0006 0200     		movs	r2, r0
 863 0008 FB1D     		adds	r3, r7, #7
 864 000a 1A70     		strb	r2, [r3]
 282:gpib.c        ****     gpib_send_byte(0x20 + address, false);
 865              		.loc 1 282 0
 866 000c FB1D     		adds	r3, r7, #7
 867 000e 1B78     		ldrb	r3, [r3]
 868 0010 2033     		adds	r3, r3, #32
 869 0012 DBB2     		uxtb	r3, r3
 870 0014 0021     		movs	r1, #0
 871 0016 1800     		movs	r0, r3
 872 0018 FFF7FEFF 		bl	gpib_send_byte
 283:gpib.c        **** }
 873              		.loc 1 283 0
 874 001c C046     		nop
 875 001e BD46     		mov	sp, r7
 876 0020 02B0     		add	sp, sp, #8
 877              		@ sp needed
 878 0022 80BD     		pop	{r7, pc}
 879              		.cfi_endproc
 880              	.LFE48:
 881              		.size	gpib_LAD, .-gpib_LAD
 882              		.section	.text.gpib_TAD,"ax",%progbits
 883              		.align	2
 884              		.global	gpib_TAD
 885              		.code	16
 886              		.thumb_func
 887              		.type	gpib_TAD, %function
 888              	gpib_TAD:
 889              	.LFB49:
 284:gpib.c        **** 
 285:gpib.c        **** void gpib_TAD(uint8_t address) {
 890              		.loc 1 285 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 8
 893              		@ frame_needed = 1, uses_anonymous_args = 0
 894 0000 80B5     		push	{r7, lr}
 895              		.cfi_def_cfa_offset 8
 896              		.cfi_offset 7, -8
 897              		.cfi_offset 14, -4
 898 0002 82B0     		sub	sp, sp, #8
 899              		.cfi_def_cfa_offset 16
 900 0004 00AF     		add	r7, sp, #0
 901              		.cfi_def_cfa_register 7
 902 0006 0200     		movs	r2, r0
 903 0008 FB1D     		adds	r3, r7, #7
 904 000a 1A70     		strb	r2, [r3]
 286:gpib.c        ****     gpib_send_byte(0x40 + address, false);
 905              		.loc 1 286 0
 906 000c FB1D     		adds	r3, r7, #7
 907 000e 1B78     		ldrb	r3, [r3]
 908 0010 4033     		adds	r3, r3, #64
 909 0012 DBB2     		uxtb	r3, r3
 910 0014 0021     		movs	r1, #0
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 22


 911 0016 1800     		movs	r0, r3
 912 0018 FFF7FEFF 		bl	gpib_send_byte
 287:gpib.c        **** }
 913              		.loc 1 287 0
 914 001c C046     		nop
 915 001e BD46     		mov	sp, r7
 916 0020 02B0     		add	sp, sp, #8
 917              		@ sp needed
 918 0022 80BD     		pop	{r7, pc}
 919              		.cfi_endproc
 920              	.LFE49:
 921              		.size	gpib_TAD, .-gpib_TAD
 922              		.section	.text.gpib_UNL,"ax",%progbits
 923              		.align	2
 924              		.global	gpib_UNL
 925              		.code	16
 926              		.thumb_func
 927              		.type	gpib_UNL, %function
 928              	gpib_UNL:
 929              	.LFB50:
 288:gpib.c        **** 
 289:gpib.c        **** void gpib_UNL() {
 930              		.loc 1 289 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 1, uses_anonymous_args = 0
 934 0000 80B5     		push	{r7, lr}
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 7, -8
 937              		.cfi_offset 14, -4
 938 0002 00AF     		add	r7, sp, #0
 939              		.cfi_def_cfa_register 7
 290:gpib.c        ****     gpib_LAD(31);
 940              		.loc 1 290 0
 941 0004 1F20     		movs	r0, #31
 942 0006 FFF7FEFF 		bl	gpib_LAD
 291:gpib.c        **** }
 943              		.loc 1 291 0
 944 000a C046     		nop
 945 000c BD46     		mov	sp, r7
 946              		@ sp needed
 947 000e 80BD     		pop	{r7, pc}
 948              		.cfi_endproc
 949              	.LFE50:
 950              		.size	gpib_UNL, .-gpib_UNL
 951              		.section	.text.gpib_UNT,"ax",%progbits
 952              		.align	2
 953              		.global	gpib_UNT
 954              		.code	16
 955              		.thumb_func
 956              		.type	gpib_UNT, %function
 957              	gpib_UNT:
 958              	.LFB51:
 292:gpib.c        **** 
 293:gpib.c        **** void gpib_UNT() {
 959              		.loc 1 293 0
 960              		.cfi_startproc
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 23


 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 1, uses_anonymous_args = 0
 963 0000 80B5     		push	{r7, lr}
 964              		.cfi_def_cfa_offset 8
 965              		.cfi_offset 7, -8
 966              		.cfi_offset 14, -4
 967 0002 00AF     		add	r7, sp, #0
 968              		.cfi_def_cfa_register 7
 294:gpib.c        ****     gpib_TAD(31);
 969              		.loc 1 294 0
 970 0004 1F20     		movs	r0, #31
 971 0006 FFF7FEFF 		bl	gpib_TAD
 295:gpib.c        **** }
 972              		.loc 1 295 0
 973 000a C046     		nop
 974 000c BD46     		mov	sp, r7
 975              		@ sp needed
 976 000e 80BD     		pop	{r7, pc}
 977              		.cfi_endproc
 978              	.LFE51:
 979              		.size	gpib_UNT, .-gpib_UNT
 980              		.section	.text.gpib_send_SDC,"ax",%progbits
 981              		.align	2
 982              		.global	gpib_send_SDC
 983              		.code	16
 984              		.thumb_func
 985              		.type	gpib_send_SDC, %function
 986              	gpib_send_SDC:
 987              	.LFB52:
 296:gpib.c        **** 
 297:gpib.c        **** // TODO: this all needs to be tidied and parameterised ... horrible!
 298:gpib.c        **** void gpib_send_SDC() {
 988              		.loc 1 298 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992 0000 80B5     		push	{r7, lr}
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 7, -8
 995              		.cfi_offset 14, -4
 996 0002 00AF     		add	r7, sp, #0
 997              		.cfi_def_cfa_register 7
 299:gpib.c        ****     gpib_assert_line(ATN);
 998              		.loc 1 299 0
 999 0004 0020     		movs	r0, #0
 1000 0006 FFF7FEFF 		bl	gpib_assert_line
 300:gpib.c        ****     gpib_settle();                  // do we need this?
 1001              		.loc 1 300 0
 1002 000a FFF7FEFF 		bl	gpib_settle
 301:gpib.c        ****     gpib_send_byte(0x04, false);
 1003              		.loc 1 301 0
 1004 000e 0021     		movs	r1, #0
 1005 0010 0420     		movs	r0, #4
 1006 0012 FFF7FEFF 		bl	gpib_send_byte
 302:gpib.c        ****     gpib_unassert_line(ATN);
 1007              		.loc 1 302 0
 1008 0016 0020     		movs	r0, #0
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 24


 1009 0018 FFF7FEFF 		bl	gpib_unassert_line
 303:gpib.c        ****     gpib_settle();                  // do we need this?
 1010              		.loc 1 303 0
 1011 001c FFF7FEFF 		bl	gpib_settle
 304:gpib.c        **** }
 1012              		.loc 1 304 0
 1013 0020 C046     		nop
 1014 0022 BD46     		mov	sp, r7
 1015              		@ sp needed
 1016 0024 80BD     		pop	{r7, pc}
 1017              		.cfi_endproc
 1018              	.LFE52:
 1019              		.size	gpib_send_SDC, .-gpib_send_SDC
 1020 0026 C046     		.section	.text.gpib_send_LLO,"ax",%progbits
 1021              		.align	2
 1022              		.global	gpib_send_LLO
 1023              		.code	16
 1024              		.thumb_func
 1025              		.type	gpib_send_LLO, %function
 1026              	gpib_send_LLO:
 1027              	.LFB53:
 305:gpib.c        **** void gpib_send_LLO() {
 1028              		.loc 1 305 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 1, uses_anonymous_args = 0
 1032 0000 80B5     		push	{r7, lr}
 1033              		.cfi_def_cfa_offset 8
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 00AF     		add	r7, sp, #0
 1037              		.cfi_def_cfa_register 7
 306:gpib.c        ****     gpib_assert_line(ATN);
 1038              		.loc 1 306 0
 1039 0004 0020     		movs	r0, #0
 1040 0006 FFF7FEFF 		bl	gpib_assert_line
 307:gpib.c        ****     gpib_settle();                  // do we need this?
 1041              		.loc 1 307 0
 1042 000a FFF7FEFF 		bl	gpib_settle
 308:gpib.c        ****     gpib_send_byte(0x11, false);
 1043              		.loc 1 308 0
 1044 000e 0021     		movs	r1, #0
 1045 0010 1120     		movs	r0, #17
 1046 0012 FFF7FEFF 		bl	gpib_send_byte
 309:gpib.c        ****     gpib_unassert_line(ATN);
 1047              		.loc 1 309 0
 1048 0016 0020     		movs	r0, #0
 1049 0018 FFF7FEFF 		bl	gpib_unassert_line
 310:gpib.c        ****     gpib_settle();                  // do we need this?
 1050              		.loc 1 310 0
 1051 001c FFF7FEFF 		bl	gpib_settle
 311:gpib.c        **** }
 1052              		.loc 1 311 0
 1053 0020 C046     		nop
 1054 0022 BD46     		mov	sp, r7
 1055              		@ sp needed
 1056 0024 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 25


 1057              		.cfi_endproc
 1058              	.LFE53:
 1059              		.size	gpib_send_LLO, .-gpib_send_LLO
 1060 0026 C046     		.section	.text.gpib_send_GTL,"ax",%progbits
 1061              		.align	2
 1062              		.global	gpib_send_GTL
 1063              		.code	16
 1064              		.thumb_func
 1065              		.type	gpib_send_GTL, %function
 1066              	gpib_send_GTL:
 1067              	.LFB54:
 312:gpib.c        **** // need REN unasserted for this one...
 313:gpib.c        **** void gpib_send_GTL() {
 1068              		.loc 1 313 0
 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 0
 1071              		@ frame_needed = 1, uses_anonymous_args = 0
 1072 0000 80B5     		push	{r7, lr}
 1073              		.cfi_def_cfa_offset 8
 1074              		.cfi_offset 7, -8
 1075              		.cfi_offset 14, -4
 1076 0002 00AF     		add	r7, sp, #0
 1077              		.cfi_def_cfa_register 7
 314:gpib.c        ****     gpib_unassert_line(REN);
 1078              		.loc 1 314 0
 1079 0004 0720     		movs	r0, #7
 1080 0006 FFF7FEFF 		bl	gpib_unassert_line
 315:gpib.c        ****     gpib_assert_line(ATN);
 1081              		.loc 1 315 0
 1082 000a 0020     		movs	r0, #0
 1083 000c FFF7FEFF 		bl	gpib_assert_line
 316:gpib.c        ****     gpib_settle();                  // do we need this?
 1084              		.loc 1 316 0
 1085 0010 FFF7FEFF 		bl	gpib_settle
 317:gpib.c        ****     gpib_send_byte(0x01, false);
 1086              		.loc 1 317 0
 1087 0014 0021     		movs	r1, #0
 1088 0016 0120     		movs	r0, #1
 1089 0018 FFF7FEFF 		bl	gpib_send_byte
 318:gpib.c        ****     gpib_unassert_line(ATN);
 1090              		.loc 1 318 0
 1091 001c 0020     		movs	r0, #0
 1092 001e FFF7FEFF 		bl	gpib_unassert_line
 319:gpib.c        ****     gpib_settle();                  // do we need this?
 1093              		.loc 1 319 0
 1094 0022 FFF7FEFF 		bl	gpib_settle
 320:gpib.c        **** }
 1095              		.loc 1 320 0
 1096 0026 C046     		nop
 1097 0028 BD46     		mov	sp, r7
 1098              		@ sp needed
 1099 002a 80BD     		pop	{r7, pc}
 1100              		.cfi_endproc
 1101              	.LFE54:
 1102              		.size	gpib_send_GTL, .-gpib_send_GTL
 1103              		.section	.text.gpib_address_listener,"ax",%progbits
 1104              		.align	2
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 26


 1105              		.global	gpib_address_listener
 1106              		.code	16
 1107              		.thumb_func
 1108              		.type	gpib_address_listener, %function
 1109              	gpib_address_listener:
 1110              	.LFB55:
 321:gpib.c        **** 
 322:gpib.c        **** void gpib_address_listener(uint8_t address) {
 1111              		.loc 1 322 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 8
 1114              		@ frame_needed = 1, uses_anonymous_args = 0
 1115 0000 80B5     		push	{r7, lr}
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 7, -8
 1118              		.cfi_offset 14, -4
 1119 0002 82B0     		sub	sp, sp, #8
 1120              		.cfi_def_cfa_offset 16
 1121 0004 00AF     		add	r7, sp, #0
 1122              		.cfi_def_cfa_register 7
 1123 0006 0200     		movs	r2, r0
 1124 0008 FB1D     		adds	r3, r7, #7
 1125 000a 1A70     		strb	r2, [r3]
 323:gpib.c        ****     
 324:gpib.c        ****     if (listening == address) {
 1126              		.loc 1 324 0
 1127 000c FB1D     		adds	r3, r7, #7
 1128 000e 1A78     		ldrb	r2, [r3]
 1129 0010 1A4B     		ldr	r3, .L73
 1130 0012 1B68     		ldr	r3, [r3]
 1131 0014 9A42     		cmp	r2, r3
 1132 0016 2CD0     		beq	.L72
 325:gpib.c        ****         return;
 326:gpib.c        ****     }
 327:gpib.c        ****     
 328:gpib.c        ****     // Need to enable "REMOTE" so devices will enter remote mode
 329:gpib.c        ****     // TODO: this should probably be an option??
 330:gpib.c        ****     // TODO: do we need to undo this for a talker??
 331:gpib.c        ****     
 332:gpib.c        ****     gpib_unassert_line(NRFD);
 1133              		.loc 1 332 0
 1134 0018 0420     		movs	r0, #4
 1135 001a FFF7FEFF 		bl	gpib_unassert_line
 333:gpib.c        ****     gpib_unassert_line(NDAC);
 1136              		.loc 1 333 0
 1137 001e 0320     		movs	r0, #3
 1138 0020 FFF7FEFF 		bl	gpib_unassert_line
 334:gpib.c        ****     
 335:gpib.c        ****     gpib_assert_line(REN);
 1139              		.loc 1 335 0
 1140 0024 0720     		movs	r0, #7
 1141 0026 FFF7FEFF 		bl	gpib_assert_line
 336:gpib.c        ****     gpib_settle();                  // do we need this?
 1142              		.loc 1 336 0
 1143 002a FFF7FEFF 		bl	gpib_settle
 337:gpib.c        **** 
 338:gpib.c        ****     gpib_assert_line(ATN);
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 27


 1144              		.loc 1 338 0
 1145 002e 0020     		movs	r0, #0
 1146 0030 FFF7FEFF 		bl	gpib_assert_line
 339:gpib.c        ****     gpib_settle();                  // do we need this?
 1147              		.loc 1 339 0
 1148 0034 FFF7FEFF 		bl	gpib_settle
 340:gpib.c        ****     
 341:gpib.c        ****     gpib_UNL();     // stop everyone listening
 1149              		.loc 1 341 0
 1150 0038 FFF7FEFF 		bl	gpib_UNL
 342:gpib.c        ****     gpib_UNT();     // stop everyone talking
 1151              		.loc 1 342 0
 1152 003c FFF7FEFF 		bl	gpib_UNT
 343:gpib.c        ****     gpib_LAD(address);
 1153              		.loc 1 343 0
 1154 0040 FB1D     		adds	r3, r7, #7
 1155 0042 1B78     		ldrb	r3, [r3]
 1156 0044 1800     		movs	r0, r3
 1157 0046 FFF7FEFF 		bl	gpib_LAD
 344:gpib.c        ****     gpib_TAD(my_address);
 1158              		.loc 1 344 0
 1159 004a 0D4B     		ldr	r3, .L73+4
 1160 004c 1B78     		ldrb	r3, [r3]
 1161 004e 1800     		movs	r0, r3
 1162 0050 FFF7FEFF 		bl	gpib_TAD
 345:gpib.c        ****     
 346:gpib.c        ****     gpib_unassert_line(ATN);
 1163              		.loc 1 346 0
 1164 0054 0020     		movs	r0, #0
 1165 0056 FFF7FEFF 		bl	gpib_unassert_line
 347:gpib.c        ****     gpib_settle();              // do we need this?
 1166              		.loc 1 347 0
 1167 005a FFF7FEFF 		bl	gpib_settle
 348:gpib.c        ****     
 349:gpib.c        ****     listening = address;
 1168              		.loc 1 349 0
 1169 005e FB1D     		adds	r3, r7, #7
 1170 0060 1A78     		ldrb	r2, [r3]
 1171 0062 064B     		ldr	r3, .L73
 1172 0064 1A60     		str	r2, [r3]
 350:gpib.c        ****     talking = my_address;
 1173              		.loc 1 350 0
 1174 0066 064B     		ldr	r3, .L73+4
 1175 0068 1B78     		ldrb	r3, [r3]
 1176 006a 1A00     		movs	r2, r3
 1177 006c 054B     		ldr	r3, .L73+8
 1178 006e 1A60     		str	r2, [r3]
 1179 0070 00E0     		b	.L69
 1180              	.L72:
 325:gpib.c        ****     }
 1181              		.loc 1 325 0
 1182 0072 C046     		nop
 1183              	.L69:
 351:gpib.c        **** }
 1184              		.loc 1 351 0
 1185 0074 BD46     		mov	sp, r7
 1186 0076 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 28


 1187              		@ sp needed
 1188 0078 80BD     		pop	{r7, pc}
 1189              	.L74:
 1190 007a C046     		.align	2
 1191              	.L73:
 1192 007c 00000000 		.word	listening
 1193 0080 00000000 		.word	my_address
 1194 0084 00000000 		.word	talking
 1195              		.cfi_endproc
 1196              	.LFE55:
 1197              		.size	gpib_address_listener, .-gpib_address_listener
 1198              		.section	.text.gpib_address_talker,"ax",%progbits
 1199              		.align	2
 1200              		.global	gpib_address_talker
 1201              		.code	16
 1202              		.thumb_func
 1203              		.type	gpib_address_talker, %function
 1204              	gpib_address_talker:
 1205              	.LFB56:
 352:gpib.c        **** 
 353:gpib.c        **** void gpib_address_talker(uint8_t address) {
 1206              		.loc 1 353 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 8
 1209              		@ frame_needed = 1, uses_anonymous_args = 0
 1210 0000 80B5     		push	{r7, lr}
 1211              		.cfi_def_cfa_offset 8
 1212              		.cfi_offset 7, -8
 1213              		.cfi_offset 14, -4
 1214 0002 82B0     		sub	sp, sp, #8
 1215              		.cfi_def_cfa_offset 16
 1216 0004 00AF     		add	r7, sp, #0
 1217              		.cfi_def_cfa_register 7
 1218 0006 0200     		movs	r2, r0
 1219 0008 FB1D     		adds	r3, r7, #7
 1220 000a 1A70     		strb	r2, [r3]
 354:gpib.c        **** 
 355:gpib.c        ****     if (talking == address) {
 1221              		.loc 1 355 0
 1222 000c FB1D     		adds	r3, r7, #7
 1223 000e 1A78     		ldrb	r2, [r3]
 1224 0010 1C4B     		ldr	r3, .L79
 1225 0012 1B68     		ldr	r3, [r3]
 1226 0014 9A42     		cmp	r2, r3
 1227 0016 30D0     		beq	.L78
 356:gpib.c        ****         return;
 357:gpib.c        ****     }
 358:gpib.c        ****     
 359:gpib.c        ****     // Make sure we are not asserting any handshake stuff...
 360:gpib.c        ****     gpib_unassert_line(NRFD);
 1228              		.loc 1 360 0
 1229 0018 0420     		movs	r0, #4
 1230 001a FFF7FEFF 		bl	gpib_unassert_line
 361:gpib.c        ****     gpib_unassert_line(NDAC);
 1231              		.loc 1 361 0
 1232 001e 0320     		movs	r0, #3
 1233 0020 FFF7FEFF 		bl	gpib_unassert_line
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 29


 362:gpib.c        ****  
 363:gpib.c        ****     // 
 364:gpib.c        ****     gpib_assert_line(ATN);
 1234              		.loc 1 364 0
 1235 0024 0020     		movs	r0, #0
 1236 0026 FFF7FEFF 		bl	gpib_assert_line
 365:gpib.c        ****     gpib_settle();                  // do we need this?
 1237              		.loc 1 365 0
 1238 002a FFF7FEFF 		bl	gpib_settle
 366:gpib.c        ****     
 367:gpib.c        ****     gpib_UNL();     // stop everyone listening
 1239              		.loc 1 367 0
 1240 002e FFF7FEFF 		bl	gpib_UNL
 368:gpib.c        ****     gpib_UNT();     // stop everyone talking
 1241              		.loc 1 368 0
 1242 0032 FFF7FEFF 		bl	gpib_UNT
 369:gpib.c        ****     gpib_LAD(my_address);
 1243              		.loc 1 369 0
 1244 0036 144B     		ldr	r3, .L79+4
 1245 0038 1B78     		ldrb	r3, [r3]
 1246 003a 1800     		movs	r0, r3
 1247 003c FFF7FEFF 		bl	gpib_LAD
 370:gpib.c        ****     gpib_TAD(address);
 1248              		.loc 1 370 0
 1249 0040 FB1D     		adds	r3, r7, #7
 1250 0042 1B78     		ldrb	r3, [r3]
 1251 0044 1800     		movs	r0, r3
 1252 0046 FFF7FEFF 		bl	gpib_TAD
 371:gpib.c        ****     
 372:gpib.c        ****     gpib_unassert_line(ATN);
 1253              		.loc 1 372 0
 1254 004a 0020     		movs	r0, #0
 1255 004c FFF7FEFF 		bl	gpib_unassert_line
 373:gpib.c        ****     gpib_settle();              // do we need this?
 1256              		.loc 1 373 0
 1257 0050 FFF7FEFF 		bl	gpib_settle
 374:gpib.c        ****     
 375:gpib.c        ****     // Prepare to receive... should NDAC be earlier to avoid both high errors
 376:gpib.c        ****     gpib_assert_line(NRFD);
 1258              		.loc 1 376 0
 1259 0054 0420     		movs	r0, #4
 1260 0056 FFF7FEFF 		bl	gpib_assert_line
 377:gpib.c        ****     gpib_assert_line(NDAC);
 1261              		.loc 1 377 0
 1262 005a 0320     		movs	r0, #3
 1263 005c FFF7FEFF 		bl	gpib_assert_line
 378:gpib.c        ****     
 379:gpib.c        ****     // Signal our readiness...
 380:gpib.c        ****     gpib_unassert_line(NRFD);
 1264              		.loc 1 380 0
 1265 0060 0420     		movs	r0, #4
 1266 0062 FFF7FEFF 		bl	gpib_unassert_line
 381:gpib.c        ****     
 382:gpib.c        ****     talking = address;
 1267              		.loc 1 382 0
 1268 0066 FB1D     		adds	r3, r7, #7
 1269 0068 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 30


 1270 006a 064B     		ldr	r3, .L79
 1271 006c 1A60     		str	r2, [r3]
 383:gpib.c        ****     listening = my_address;
 1272              		.loc 1 383 0
 1273 006e 064B     		ldr	r3, .L79+4
 1274 0070 1B78     		ldrb	r3, [r3]
 1275 0072 1A00     		movs	r2, r3
 1276 0074 054B     		ldr	r3, .L79+8
 1277 0076 1A60     		str	r2, [r3]
 1278 0078 00E0     		b	.L75
 1279              	.L78:
 356:gpib.c        ****     }
 1280              		.loc 1 356 0
 1281 007a C046     		nop
 1282              	.L75:
 384:gpib.c        **** }
 1283              		.loc 1 384 0
 1284 007c BD46     		mov	sp, r7
 1285 007e 02B0     		add	sp, sp, #8
 1286              		@ sp needed
 1287 0080 80BD     		pop	{r7, pc}
 1288              	.L80:
 1289 0082 C046     		.align	2
 1290              	.L79:
 1291 0084 00000000 		.word	talking
 1292 0088 00000000 		.word	my_address
 1293 008c 00000000 		.word	listening
 1294              		.cfi_endproc
 1295              	.LFE56:
 1296              		.size	gpib_address_talker, .-gpib_address_talker
 1297              		.section	.text.gpib_talking,"ax",%progbits
 1298              		.align	2
 1299              		.global	gpib_talking
 1300              		.code	16
 1301              		.thumb_func
 1302              		.type	gpib_talking, %function
 1303              	gpib_talking:
 1304              	.LFB57:
 385:gpib.c        **** 
 386:gpib.c        **** /**
 387:gpib.c        ****  * See if the talker has put some data on the bus...
 388:gpib.c        ****  */
 389:gpib.c        **** // TODO: get rid of bool
 390:gpib.c        **** bool gpib_talking() {
 1305              		.loc 1 390 0
 1306              		.cfi_startproc
 1307              		@ args = 0, pretend = 0, frame = 0
 1308              		@ frame_needed = 1, uses_anonymous_args = 0
 1309 0000 80B5     		push	{r7, lr}
 1310              		.cfi_def_cfa_offset 8
 1311              		.cfi_offset 7, -8
 1312              		.cfi_offset 14, -4
 1313 0002 00AF     		add	r7, sp, #0
 1314              		.cfi_def_cfa_register 7
 391:gpib.c        ****     return gpib_read_line(DAV);
 1315              		.loc 1 391 0
 1316 0004 0520     		movs	r0, #5
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 31


 1317 0006 FFF7FEFF 		bl	gpib_read_line
 1318 000a 0300     		movs	r3, r0
 392:gpib.c        **** }
 1319              		.loc 1 392 0
 1320 000c 1800     		movs	r0, r3
 1321 000e BD46     		mov	sp, r7
 1322              		@ sp needed
 1323 0010 80BD     		pop	{r7, pc}
 1324              		.cfi_endproc
 1325              	.LFE57:
 1326              		.size	gpib_talking, .-gpib_talking
 1327 0012 C046     		.section	.text.gpib_send,"ax",%progbits
 1328              		.align	2
 1329              		.global	gpib_send
 1330              		.code	16
 1331              		.thumb_func
 1332              		.type	gpib_send, %function
 1333              	gpib_send:
 1334              	.LFB58:
 393:gpib.c        **** 
 394:gpib.c        **** /**
 395:gpib.c        ****  * Send a buffer over the GPIB interface, do the right thing with EO
 396:gpib.c        ****  * unless we have it disabled.
 397:gpib.c        ****  */
 398:gpib.c        **** // TODO: error checking and return
 399:gpib.c        **** // TODO: should separate the address listener and the send, so we can send
 400:gpib.c        **** //       multiple chunks??
 401:gpib.c        **** void gpib_send(uint8_t address, const uint8_t *buf, int len) {
 1335              		.loc 1 401 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 32
 1338              		@ frame_needed = 1, uses_anonymous_args = 0
 1339 0000 80B5     		push	{r7, lr}
 1340              		.cfi_def_cfa_offset 8
 1341              		.cfi_offset 7, -8
 1342              		.cfi_offset 14, -4
 1343 0002 88B0     		sub	sp, sp, #32
 1344              		.cfi_def_cfa_offset 40
 1345 0004 00AF     		add	r7, sp, #0
 1346              		.cfi_def_cfa_register 7
 1347 0006 B960     		str	r1, [r7, #8]
 1348 0008 7A60     		str	r2, [r7, #4]
 1349 000a 0F23     		movs	r3, #15
 1350 000c FB18     		adds	r3, r7, r3
 1351 000e 021C     		adds	r2, r0, #0
 1352 0010 1A70     		strb	r2, [r3]
 402:gpib.c        ****     char *p = (char *)buf;
 1353              		.loc 1 402 0
 1354 0012 BB68     		ldr	r3, [r7, #8]
 1355 0014 BB61     		str	r3, [r7, #24]
 403:gpib.c        ****     
 404:gpib.c        ****     int eoipos = (settings.eoi ? len-1 : -1);
 1356              		.loc 1 404 0
 1357 0016 154B     		ldr	r3, .L88
 1358 0018 5B89     		ldrh	r3, [r3, #10]
 1359 001a 002B     		cmp	r3, #0
 1360 001c 02D0     		beq	.L84
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 32


 1361              		.loc 1 404 0 is_stmt 0 discriminator 1
 1362 001e 7B68     		ldr	r3, [r7, #4]
 1363 0020 013B     		subs	r3, r3, #1
 1364 0022 01E0     		b	.L85
 1365              	.L84:
 1366              		.loc 1 404 0 discriminator 2
 1367 0024 0123     		movs	r3, #1
 1368 0026 5B42     		rsbs	r3, r3, #0
 1369              	.L85:
 1370              		.loc 1 404 0 discriminator 4
 1371 0028 7B61     		str	r3, [r7, #20]
 405:gpib.c        ****     
 406:gpib.c        ****     gpib_address_listener(address);
 1372              		.loc 1 406 0 is_stmt 1 discriminator 4
 1373 002a 0F23     		movs	r3, #15
 1374 002c FB18     		adds	r3, r7, r3
 1375 002e 1B78     		ldrb	r3, [r3]
 1376 0030 1800     		movs	r0, r3
 1377 0032 FFF7FEFF 		bl	gpib_address_listener
 1378              	.LBB2:
 407:gpib.c        ****     
 408:gpib.c        ****     for (int i=0; i < len; i++) {
 1379              		.loc 1 408 0 discriminator 4
 1380 0036 0023     		movs	r3, #0
 1381 0038 FB61     		str	r3, [r7, #28]
 1382 003a 0FE0     		b	.L86
 1383              	.L87:
 409:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1384              		.loc 1 409 0 discriminator 3
 1385 003c FB69     		ldr	r3, [r7, #28]
 1386 003e BA68     		ldr	r2, [r7, #8]
 1387 0040 D318     		adds	r3, r2, r3
 1388 0042 1878     		ldrb	r0, [r3]
 1389 0044 FA69     		ldr	r2, [r7, #28]
 1390 0046 7B69     		ldr	r3, [r7, #20]
 1391 0048 D31A     		subs	r3, r2, r3
 1392 004a 5A42     		rsbs	r2, r3, #0
 1393 004c 5341     		adcs	r3, r3, r2
 1394 004e DBB2     		uxtb	r3, r3
 1395 0050 1900     		movs	r1, r3
 1396 0052 FFF7FEFF 		bl	gpib_send_byte
 408:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1397              		.loc 1 408 0 discriminator 3
 1398 0056 FB69     		ldr	r3, [r7, #28]
 1399 0058 0133     		adds	r3, r3, #1
 1400 005a FB61     		str	r3, [r7, #28]
 1401              	.L86:
 408:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1402              		.loc 1 408 0 is_stmt 0 discriminator 1
 1403 005c FA69     		ldr	r2, [r7, #28]
 1404 005e 7B68     		ldr	r3, [r7, #4]
 1405 0060 9A42     		cmp	r2, r3
 1406 0062 EBDB     		blt	.L87
 1407              	.LBE2:
 410:gpib.c        ****     }
 411:gpib.c        **** }
 1408              		.loc 1 411 0 is_stmt 1
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 33


 1409 0064 C046     		nop
 1410 0066 BD46     		mov	sp, r7
 1411 0068 08B0     		add	sp, sp, #32
 1412              		@ sp needed
 1413 006a 80BD     		pop	{r7, pc}
 1414              	.L89:
 1415              		.align	2
 1416              	.L88:
 1417 006c 00000000 		.word	settings
 1418              		.cfi_endproc
 1419              	.LFE58:
 1420              		.size	gpib_send, .-gpib_send
 1421              		.section	.text.gpib_send_bytes,"ax",%progbits
 1422              		.align	2
 1423              		.global	gpib_send_bytes
 1424              		.code	16
 1425              		.thumb_func
 1426              		.type	gpib_send_bytes, %function
 1427              	gpib_send_bytes:
 1428              	.LFB59:
 412:gpib.c        **** void gpib_send_bytes(const uint8_t *buf, int len, int last) {
 1429              		.loc 1 412 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 24
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433 0000 80B5     		push	{r7, lr}
 1434              		.cfi_def_cfa_offset 8
 1435              		.cfi_offset 7, -8
 1436              		.cfi_offset 14, -4
 1437 0002 86B0     		sub	sp, sp, #24
 1438              		.cfi_def_cfa_offset 32
 1439 0004 00AF     		add	r7, sp, #0
 1440              		.cfi_def_cfa_register 7
 1441 0006 F860     		str	r0, [r7, #12]
 1442 0008 B960     		str	r1, [r7, #8]
 1443 000a 7A60     		str	r2, [r7, #4]
 413:gpib.c        ****     int eoipos = (settings.eoi && last ? len-1 : -1);
 1444              		.loc 1 413 0
 1445 000c 134B     		ldr	r3, .L95
 1446 000e 5B89     		ldrh	r3, [r3, #10]
 1447 0010 002B     		cmp	r3, #0
 1448 0012 05D0     		beq	.L91
 1449              		.loc 1 413 0 is_stmt 0 discriminator 1
 1450 0014 7B68     		ldr	r3, [r7, #4]
 1451 0016 002B     		cmp	r3, #0
 1452 0018 02D0     		beq	.L91
 1453              		.loc 1 413 0 discriminator 3
 1454 001a BB68     		ldr	r3, [r7, #8]
 1455 001c 013B     		subs	r3, r3, #1
 1456 001e 01E0     		b	.L92
 1457              	.L91:
 1458              		.loc 1 413 0 discriminator 4
 1459 0020 0123     		movs	r3, #1
 1460 0022 5B42     		rsbs	r3, r3, #0
 1461              	.L92:
 1462              		.loc 1 413 0 discriminator 6
 1463 0024 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 34


 1464              	.LBB3:
 414:gpib.c        ****     
 415:gpib.c        ****     for (int i=0; i < len; i++) {
 1465              		.loc 1 415 0 is_stmt 1 discriminator 6
 1466 0026 0023     		movs	r3, #0
 1467 0028 7B61     		str	r3, [r7, #20]
 1468 002a 0FE0     		b	.L93
 1469              	.L94:
 416:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1470              		.loc 1 416 0 discriminator 3
 1471 002c 7B69     		ldr	r3, [r7, #20]
 1472 002e FA68     		ldr	r2, [r7, #12]
 1473 0030 D318     		adds	r3, r2, r3
 1474 0032 1878     		ldrb	r0, [r3]
 1475 0034 7A69     		ldr	r2, [r7, #20]
 1476 0036 3B69     		ldr	r3, [r7, #16]
 1477 0038 D31A     		subs	r3, r2, r3
 1478 003a 5A42     		rsbs	r2, r3, #0
 1479 003c 5341     		adcs	r3, r3, r2
 1480 003e DBB2     		uxtb	r3, r3
 1481 0040 1900     		movs	r1, r3
 1482 0042 FFF7FEFF 		bl	gpib_send_byte
 415:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1483              		.loc 1 415 0 discriminator 3
 1484 0046 7B69     		ldr	r3, [r7, #20]
 1485 0048 0133     		adds	r3, r3, #1
 1486 004a 7B61     		str	r3, [r7, #20]
 1487              	.L93:
 415:gpib.c        ****         gpib_send_byte(buf[i], (i == eoipos));
 1488              		.loc 1 415 0 is_stmt 0 discriminator 1
 1489 004c 7A69     		ldr	r2, [r7, #20]
 1490 004e BB68     		ldr	r3, [r7, #8]
 1491 0050 9A42     		cmp	r2, r3
 1492 0052 EBDB     		blt	.L94
 1493              	.LBE3:
 417:gpib.c        ****     }
 418:gpib.c        **** }
 1494              		.loc 1 418 0 is_stmt 1
 1495 0054 C046     		nop
 1496 0056 BD46     		mov	sp, r7
 1497 0058 06B0     		add	sp, sp, #24
 1498              		@ sp needed
 1499 005a 80BD     		pop	{r7, pc}
 1500              	.L96:
 1501              		.align	2
 1502              	.L95:
 1503 005c 00000000 		.word	settings
 1504              		.cfi_endproc
 1505              	.LFE59:
 1506              		.size	gpib_send_bytes, .-gpib_send_bytes
 1507              		.section	.text.gpib_read,"ax",%progbits
 1508              		.align	2
 1509              		.global	gpib_read
 1510              		.code	16
 1511              		.thumb_func
 1512              		.type	gpib_read, %function
 1513              	gpib_read:
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 35


 1514              	.LFB60:
 419:gpib.c        **** 
 420:gpib.c        **** /**
 421:gpib.c        ****  * Read from the GPIB interface, can use different end states:
 422:gpib.c        ****  *
 423:gpib.c        ****  * until = GPIB_TIMEOUT -- keep going until we get a timeout
 424:gpib.c        ****  * until = GPIB_EOI     -- wait for the EOI indication
 425:gpib.c        ****  * until = <char>       -- wait until we get <char>
 426:gpib.c        ****  *
 427:gpib.c        ****  * end = GPIB_TIMEOUT, or GPIB_ENDED, or GPIB_NOT_ENDED
 428:gpib.c        ****  * return = number of chars
 429:gpib.c        ****  *
 430:gpib.c        ****  */
 431:gpib.c        **** int gpib_read(int until, int *end) {
 1515              		.loc 1 431 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 24
 1518              		@ frame_needed = 1, uses_anonymous_args = 0
 1519 0000 80B5     		push	{r7, lr}
 1520              		.cfi_def_cfa_offset 8
 1521              		.cfi_offset 7, -8
 1522              		.cfi_offset 14, -4
 1523 0002 86B0     		sub	sp, sp, #24
 1524              		.cfi_def_cfa_offset 32
 1525 0004 00AF     		add	r7, sp, #0
 1526              		.cfi_def_cfa_register 7
 1527 0006 7860     		str	r0, [r7, #4]
 1528 0008 3960     		str	r1, [r7]
 432:gpib.c        ****     int         i = 0;
 1529              		.loc 1 432 0
 1530 000a 0023     		movs	r3, #0
 1531 000c 7B61     		str	r3, [r7, #20]
 433:gpib.c        ****     int         ok;
 434:gpib.c        ****     int         eoi;
 435:gpib.c        ****     uint8_t     *buf;
 436:gpib.c        ****     
 437:gpib.c        ****     buf = gpib_buffer;
 1532              		.loc 1 437 0
 1533 000e 294B     		ldr	r3, .L107
 1534 0010 3B61     		str	r3, [r7, #16]
 438:gpib.c        ****     
 439:gpib.c        ****     while (i < (GPIB_BUF_SIZE-1)) {
 1535              		.loc 1 439 0
 1536 0012 44E0     		b	.L98
 1537              	.L105:
 440:gpib.c        ****         // First case is a potential timeout (no errors on read)
 441:gpib.c        ****         if (!gpib_receive_byte(buf, &eoi)) {
 1538              		.loc 1 441 0
 1539 0014 0C23     		movs	r3, #12
 1540 0016 FA18     		adds	r2, r7, r3
 1541 0018 3B69     		ldr	r3, [r7, #16]
 1542 001a 1100     		movs	r1, r2
 1543 001c 1800     		movs	r0, r3
 1544 001e FFF7FEFF 		bl	gpib_receive_byte
 1545 0022 031E     		subs	r3, r0, #0
 1546 0024 05D1     		bne	.L99
 442:gpib.c        ****             *end = GPIB_TIMEOUT;
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 36


 1547              		.loc 1 442 0
 1548 0026 3B68     		ldr	r3, [r7]
 1549 0028 0222     		movs	r2, #2
 1550 002a FF32     		adds	r2, r2, #255
 1551 002c 1A60     		str	r2, [r3]
 443:gpib.c        ****             return i;
 1552              		.loc 1 443 0
 1553 002e 7B69     		ldr	r3, [r7, #20]
 1554 0030 3CE0     		b	.L106
 1555              	.L99:
 444:gpib.c        ****         }
 445:gpib.c        ****                
 446:gpib.c        ****         // We assume is a valid character...
 447:gpib.c        ****         i++;
 1556              		.loc 1 447 0
 1557 0032 7B69     		ldr	r3, [r7, #20]
 1558 0034 0133     		adds	r3, r3, #1
 1559 0036 7B61     		str	r3, [r7, #20]
 448:gpib.c        **** 
 449:gpib.c        ****         // If we get an EOI then we might need to add an extra char and
 450:gpib.c        ****         // potentially end this read
 451:gpib.c        ****         if (eoi) {
 1560              		.loc 1 451 0
 1561 0038 FB68     		ldr	r3, [r7, #12]
 1562 003a 002B     		cmp	r3, #0
 1563 003c 18D0     		beq	.L101
 452:gpib.c        ****             if (settings.eot_enable) {
 1564              		.loc 1 452 0
 1565 003e 1E4B     		ldr	r3, .L107+4
 1566 0040 1B8A     		ldrh	r3, [r3, #16]
 1567 0042 002B     		cmp	r3, #0
 1568 0044 0AD0     		beq	.L102
 453:gpib.c        ****                 *++buf = settings.eot_char;
 1569              		.loc 1 453 0
 1570 0046 3B69     		ldr	r3, [r7, #16]
 1571 0048 0133     		adds	r3, r3, #1
 1572 004a 3B61     		str	r3, [r7, #16]
 1573 004c 1A4B     		ldr	r3, .L107+4
 1574 004e DB89     		ldrh	r3, [r3, #14]
 1575 0050 DAB2     		uxtb	r2, r3
 1576 0052 3B69     		ldr	r3, [r7, #16]
 1577 0054 1A70     		strb	r2, [r3]
 454:gpib.c        ****                 i++;
 1578              		.loc 1 454 0
 1579 0056 7B69     		ldr	r3, [r7, #20]
 1580 0058 0133     		adds	r3, r3, #1
 1581 005a 7B61     		str	r3, [r7, #20]
 1582              	.L102:
 455:gpib.c        ****             }
 456:gpib.c        ****             if (until == GPIB_EOI) {
 1583              		.loc 1 456 0
 1584 005c 7A68     		ldr	r2, [r7, #4]
 1585 005e 8023     		movs	r3, #128
 1586 0060 5B00     		lsls	r3, r3, #1
 1587 0062 9A42     		cmp	r2, r3
 1588 0064 04D1     		bne	.L101
 457:gpib.c        ****                 *end = GPIB_ENDED;
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 37


 1589              		.loc 1 457 0
 1590 0066 3B68     		ldr	r3, [r7]
 1591 0068 0122     		movs	r2, #1
 1592 006a 1A60     		str	r2, [r3]
 458:gpib.c        ****                 return i;
 1593              		.loc 1 458 0
 1594 006c 7B69     		ldr	r3, [r7, #20]
 1595 006e 1DE0     		b	.L106
 1596              	.L101:
 459:gpib.c        ****             }
 460:gpib.c        ****         }        
 461:gpib.c        ****         
 462:gpib.c        ****         // If we are only waiting for timeout, then loop...
 463:gpib.c        ****         if (until == GPIB_TIMEOUT) {    
 1597              		.loc 1 463 0
 1598 0070 7A68     		ldr	r2, [r7, #4]
 1599 0072 0223     		movs	r3, #2
 1600 0074 FF33     		adds	r3, r3, #255
 1601 0076 9A42     		cmp	r2, r3
 1602 0078 03D1     		bne	.L103
 464:gpib.c        ****             buf++;
 1603              		.loc 1 464 0
 1604 007a 3B69     		ldr	r3, [r7, #16]
 1605 007c 0133     		adds	r3, r3, #1
 1606 007e 3B61     		str	r3, [r7, #16]
 465:gpib.c        ****             continue;
 1607              		.loc 1 465 0
 1608 0080 0DE0     		b	.L98
 1609              	.L103:
 466:gpib.c        ****         }
 467:gpib.c        ****         
 468:gpib.c        ****         // If we match the given end char
 469:gpib.c        ****         if (until == *buf) {
 1610              		.loc 1 469 0
 1611 0082 3B69     		ldr	r3, [r7, #16]
 1612 0084 1B78     		ldrb	r3, [r3]
 1613 0086 1A00     		movs	r2, r3
 1614 0088 7B68     		ldr	r3, [r7, #4]
 1615 008a 9A42     		cmp	r2, r3
 1616 008c 04D1     		bne	.L104
 470:gpib.c        ****             *end = GPIB_ENDED;
 1617              		.loc 1 470 0
 1618 008e 3B68     		ldr	r3, [r7]
 1619 0090 0122     		movs	r2, #1
 1620 0092 1A60     		str	r2, [r3]
 471:gpib.c        ****             return i;
 1621              		.loc 1 471 0
 1622 0094 7B69     		ldr	r3, [r7, #20]
 1623 0096 09E0     		b	.L106
 1624              	.L104:
 472:gpib.c        ****         }     
 473:gpib.c        ****         buf++;
 1625              		.loc 1 473 0
 1626 0098 3B69     		ldr	r3, [r7, #16]
 1627 009a 0133     		adds	r3, r3, #1
 1628 009c 3B61     		str	r3, [r7, #16]
 1629              	.L98:
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 38


 439:gpib.c        ****         // First case is a potential timeout (no errors on read)
 1630              		.loc 1 439 0
 1631 009e 7B69     		ldr	r3, [r7, #20]
 1632 00a0 FE2B     		cmp	r3, #254
 1633 00a2 B7DD     		ble	.L105
 474:gpib.c        ****     }
 475:gpib.c        ****     *end = GPIB_NOT_ENDED;
 1634              		.loc 1 475 0
 1635 00a4 3B68     		ldr	r3, [r7]
 1636 00a6 0022     		movs	r2, #0
 1637 00a8 1A60     		str	r2, [r3]
 476:gpib.c        ****     return i;
 1638              		.loc 1 476 0
 1639 00aa 7B69     		ldr	r3, [r7, #20]
 1640              	.L106:
 477:gpib.c        **** }
 1641              		.loc 1 477 0 discriminator 1
 1642 00ac 1800     		movs	r0, r3
 1643 00ae BD46     		mov	sp, r7
 1644 00b0 06B0     		add	sp, sp, #24
 1645              		@ sp needed
 1646 00b2 80BD     		pop	{r7, pc}
 1647              	.L108:
 1648              		.align	2
 1649              	.L107:
 1650 00b4 00000000 		.word	gpib_buffer
 1651 00b8 00000000 		.word	settings
 1652              		.cfi_endproc
 1653              	.LFE60:
 1654              		.size	gpib_read, .-gpib_read
 1655              		.section	.text.gpib_read_bytes,"ax",%progbits
 1656              		.align	2
 1657              		.global	gpib_read_bytes
 1658              		.code	16
 1659              		.thumb_func
 1660              		.type	gpib_read_bytes, %function
 1661              	gpib_read_bytes:
 1662              	.LFB61:
 478:gpib.c        **** 
 479:gpib.c        **** /**
 480:gpib.c        ****  * Test routine ... assume EOI for now
 481:gpib.c        ****  */ 
 482:gpib.c        **** int gpib_read_bytes(uint8_t *dest, int maxlen, int *end) {
 1663              		.loc 1 482 0
 1664              		.cfi_startproc
 1665              		@ args = 0, pretend = 0, frame = 24
 1666              		@ frame_needed = 1, uses_anonymous_args = 0
 1667 0000 80B5     		push	{r7, lr}
 1668              		.cfi_def_cfa_offset 8
 1669              		.cfi_offset 7, -8
 1670              		.cfi_offset 14, -4
 1671 0002 86B0     		sub	sp, sp, #24
 1672              		.cfi_def_cfa_offset 32
 1673 0004 00AF     		add	r7, sp, #0
 1674              		.cfi_def_cfa_register 7
 1675 0006 F860     		str	r0, [r7, #12]
 1676 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 39


 1677 000a 7A60     		str	r2, [r7, #4]
 483:gpib.c        ****     int eoi;
 484:gpib.c        ****     int i = 0;
 1678              		.loc 1 484 0
 1679 000c 0023     		movs	r3, #0
 1680 000e 7B61     		str	r3, [r7, #20]
 485:gpib.c        ****     
 486:gpib.c        ****     while (i < maxlen) {
 1681              		.loc 1 486 0
 1682 0010 1BE0     		b	.L110
 1683              	.L113:
 487:gpib.c        ****         if (!gpib_receive_byte(dest++, &eoi)) {
 1684              		.loc 1 487 0
 1685 0012 FB68     		ldr	r3, [r7, #12]
 1686 0014 5A1C     		adds	r2, r3, #1
 1687 0016 FA60     		str	r2, [r7, #12]
 1688 0018 1022     		movs	r2, #16
 1689 001a BA18     		adds	r2, r7, r2
 1690 001c 1100     		movs	r1, r2
 1691 001e 1800     		movs	r0, r3
 1692 0020 FFF7FEFF 		bl	gpib_receive_byte
 1693 0024 031E     		subs	r3, r0, #0
 1694 0026 05D1     		bne	.L111
 488:gpib.c        ****             *end = GPIB_TIMEOUT;
 1695              		.loc 1 488 0
 1696 0028 7B68     		ldr	r3, [r7, #4]
 1697 002a 0222     		movs	r2, #2
 1698 002c FF32     		adds	r2, r2, #255
 1699 002e 1A60     		str	r2, [r3]
 489:gpib.c        ****             return i;
 1700              		.loc 1 489 0
 1701 0030 7B69     		ldr	r3, [r7, #20]
 1702 0032 12E0     		b	.L114
 1703              	.L111:
 490:gpib.c        ****         }
 491:gpib.c        ****         i++;
 1704              		.loc 1 491 0
 1705 0034 7B69     		ldr	r3, [r7, #20]
 1706 0036 0133     		adds	r3, r3, #1
 1707 0038 7B61     		str	r3, [r7, #20]
 492:gpib.c        ****         if (eoi) {
 1708              		.loc 1 492 0
 1709 003a 3B69     		ldr	r3, [r7, #16]
 1710 003c 002B     		cmp	r3, #0
 1711 003e 04D0     		beq	.L110
 493:gpib.c        ****             *end = GPIB_ENDED;
 1712              		.loc 1 493 0
 1713 0040 7B68     		ldr	r3, [r7, #4]
 1714 0042 0122     		movs	r2, #1
 1715 0044 1A60     		str	r2, [r3]
 494:gpib.c        ****             return i;
 1716              		.loc 1 494 0
 1717 0046 7B69     		ldr	r3, [r7, #20]
 1718 0048 07E0     		b	.L114
 1719              	.L110:
 486:gpib.c        ****         if (!gpib_receive_byte(dest++, &eoi)) {
 1720              		.loc 1 486 0
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 40


 1721 004a 7A69     		ldr	r2, [r7, #20]
 1722 004c BB68     		ldr	r3, [r7, #8]
 1723 004e 9A42     		cmp	r2, r3
 1724 0050 DFDB     		blt	.L113
 495:gpib.c        ****         }
 496:gpib.c        ****     }
 497:gpib.c        ****     *end = GPIB_NOT_ENDED;
 1725              		.loc 1 497 0
 1726 0052 7B68     		ldr	r3, [r7, #4]
 1727 0054 0022     		movs	r2, #0
 1728 0056 1A60     		str	r2, [r3]
 498:gpib.c        ****     return i;
 1729              		.loc 1 498 0
 1730 0058 7B69     		ldr	r3, [r7, #20]
 1731              	.L114:
 499:gpib.c        **** }
 1732              		.loc 1 499 0 discriminator 1
 1733 005a 1800     		movs	r0, r3
 1734 005c BD46     		mov	sp, r7
 1735 005e 06B0     		add	sp, sp, #24
 1736              		@ sp needed
 1737 0060 80BD     		pop	{r7, pc}
 1738              		.cfi_endproc
 1739              	.LFE61:
 1740              		.size	gpib_read_bytes, .-gpib_read_bytes
 1741 0062 C046     		.text
 1742              	.Letext0:
 1743              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1744              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1745              		.file 4 "Generated_Source\\PSoC4/cytypes.h"
 1746              		.file 5 "settings.h"
 1747              		.section	.debug_info,"",%progbits
 1748              	.Ldebug_info0:
 1749 0000 21070000 		.4byte	0x721
 1750 0004 0400     		.2byte	0x4
 1751 0006 00000000 		.4byte	.Ldebug_abbrev0
 1752 000a 04       		.byte	0x4
 1753 000b 01       		.uleb128 0x1
 1754 000c 7F010000 		.4byte	.LASF75
 1755 0010 0C       		.byte	0xc
 1756 0011 4C010000 		.4byte	.LASF76
 1757 0015 6D000000 		.4byte	.LASF77
 1758 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1759 001d 00000000 		.4byte	0
 1760 0021 00000000 		.4byte	.Ldebug_line0
 1761 0025 02       		.uleb128 0x2
 1762 0026 01       		.byte	0x1
 1763 0027 06       		.byte	0x6
 1764 0028 57020000 		.4byte	.LASF0
 1765 002c 03       		.uleb128 0x3
 1766 002d 5C010000 		.4byte	.LASF3
 1767 0031 02       		.byte	0x2
 1768 0032 1D       		.byte	0x1d
 1769 0033 37000000 		.4byte	0x37
 1770 0037 02       		.uleb128 0x2
 1771 0038 01       		.byte	0x1
 1772 0039 08       		.byte	0x8
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 41


 1773 003a 0D020000 		.4byte	.LASF1
 1774 003e 02       		.uleb128 0x2
 1775 003f 02       		.byte	0x2
 1776 0040 05       		.byte	0x5
 1777 0041 54000000 		.4byte	.LASF2
 1778 0045 03       		.uleb128 0x3
 1779 0046 CF000000 		.4byte	.LASF4
 1780 004a 02       		.byte	0x2
 1781 004b 2B       		.byte	0x2b
 1782 004c 50000000 		.4byte	0x50
 1783 0050 02       		.uleb128 0x2
 1784 0051 02       		.byte	0x2
 1785 0052 07       		.byte	0x7
 1786 0053 E8020000 		.4byte	.LASF5
 1787 0057 02       		.uleb128 0x2
 1788 0058 04       		.byte	0x4
 1789 0059 05       		.byte	0x5
 1790 005a 43010000 		.4byte	.LASF6
 1791 005e 03       		.uleb128 0x3
 1792 005f BB030000 		.4byte	.LASF7
 1793 0063 02       		.byte	0x2
 1794 0064 41       		.byte	0x41
 1795 0065 69000000 		.4byte	0x69
 1796 0069 02       		.uleb128 0x2
 1797 006a 04       		.byte	0x4
 1798 006b 07       		.byte	0x7
 1799 006c 8F030000 		.4byte	.LASF8
 1800 0070 02       		.uleb128 0x2
 1801 0071 08       		.byte	0x8
 1802 0072 05       		.byte	0x5
 1803 0073 1B010000 		.4byte	.LASF9
 1804 0077 02       		.uleb128 0x2
 1805 0078 08       		.byte	0x8
 1806 0079 07       		.byte	0x7
 1807 007a 63020000 		.4byte	.LASF10
 1808 007e 04       		.uleb128 0x4
 1809 007f 04       		.byte	0x4
 1810 0080 05       		.byte	0x5
 1811 0081 696E7400 		.ascii	"int\000"
 1812 0085 02       		.uleb128 0x2
 1813 0086 04       		.byte	0x4
 1814 0087 07       		.byte	0x7
 1815 0088 83020000 		.4byte	.LASF11
 1816 008c 03       		.uleb128 0x3
 1817 008d E4000000 		.4byte	.LASF12
 1818 0091 03       		.byte	0x3
 1819 0092 18       		.byte	0x18
 1820 0093 2C000000 		.4byte	0x2c
 1821 0097 03       		.uleb128 0x3
 1822 0098 90020000 		.4byte	.LASF13
 1823 009c 03       		.byte	0x3
 1824 009d 24       		.byte	0x24
 1825 009e 45000000 		.4byte	0x45
 1826 00a2 03       		.uleb128 0x3
 1827 00a3 7A020000 		.4byte	.LASF14
 1828 00a7 03       		.byte	0x3
 1829 00a8 30       		.byte	0x30
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 42


 1830 00a9 5E000000 		.4byte	0x5e
 1831 00ad 05       		.uleb128 0x5
 1832 00ae 88030000 		.4byte	.LASF15
 1833 00b2 04       		.byte	0x4
 1834 00b3 E601     		.2byte	0x1e6
 1835 00b5 69000000 		.4byte	0x69
 1836 00b9 02       		.uleb128 0x2
 1837 00ba 04       		.byte	0x4
 1838 00bb 04       		.byte	0x4
 1839 00bc 78030000 		.4byte	.LASF16
 1840 00c0 02       		.uleb128 0x2
 1841 00c1 08       		.byte	0x8
 1842 00c2 04       		.byte	0x4
 1843 00c3 A1030000 		.4byte	.LASF17
 1844 00c7 02       		.uleb128 0x2
 1845 00c8 01       		.byte	0x1
 1846 00c9 08       		.byte	0x8
 1847 00ca 21030000 		.4byte	.LASF18
 1848 00ce 05       		.uleb128 0x5
 1849 00cf D9020000 		.4byte	.LASF19
 1850 00d3 04       		.byte	0x4
 1851 00d4 9002     		.2byte	0x290
 1852 00d6 DA000000 		.4byte	0xda
 1853 00da 06       		.uleb128 0x6
 1854 00db AD000000 		.4byte	0xad
 1855 00df 02       		.uleb128 0x2
 1856 00e0 08       		.byte	0x8
 1857 00e1 04       		.byte	0x4
 1858 00e2 1B020000 		.4byte	.LASF20
 1859 00e6 02       		.uleb128 0x2
 1860 00e7 04       		.byte	0x4
 1861 00e8 07       		.byte	0x7
 1862 00e9 5E000000 		.4byte	.LASF21
 1863 00ed 07       		.uleb128 0x7
 1864 00ee 04       		.byte	0x4
 1865 00ef C7000000 		.4byte	0xc7
 1866 00f3 08       		.uleb128 0x8
 1867 00f4 12010000 		.4byte	.LASF69
 1868 00f8 14       		.byte	0x14
 1869 00f9 05       		.byte	0x5
 1870 00fa 0D       		.byte	0xd
 1871 00fb 6C010000 		.4byte	0x16c
 1872 00ff 09       		.uleb128 0x9
 1873 0100 F5030000 		.4byte	.LASF22
 1874 0104 05       		.byte	0x5
 1875 0105 0E       		.byte	0xe
 1876 0106 A2000000 		.4byte	0xa2
 1877 010a 00       		.byte	0
 1878 010b 09       		.uleb128 0x9
 1879 010c 12000000 		.4byte	.LASF23
 1880 0110 05       		.byte	0x5
 1881 0111 0F       		.byte	0xf
 1882 0112 97000000 		.4byte	0x97
 1883 0116 04       		.byte	0x4
 1884 0117 09       		.uleb128 0x9
 1885 0118 40000000 		.4byte	.LASF24
 1886 011c 05       		.byte	0x5
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 43


 1887 011d 10       		.byte	0x10
 1888 011e 97000000 		.4byte	0x97
 1889 0122 06       		.byte	0x6
 1890 0123 09       		.uleb128 0x9
 1891 0124 EC000000 		.4byte	.LASF25
 1892 0128 05       		.byte	0x5
 1893 0129 11       		.byte	0x11
 1894 012a 97000000 		.4byte	0x97
 1895 012e 08       		.byte	0x8
 1896 012f 0A       		.uleb128 0xa
 1897 0130 656F6900 		.ascii	"eoi\000"
 1898 0134 05       		.byte	0x5
 1899 0135 12       		.byte	0x12
 1900 0136 97000000 		.4byte	0x97
 1901 013a 0A       		.byte	0xa
 1902 013b 0A       		.uleb128 0xa
 1903 013c 656F7300 		.ascii	"eos\000"
 1904 0140 05       		.byte	0x5
 1905 0141 13       		.byte	0x13
 1906 0142 97000000 		.4byte	0x97
 1907 0146 0C       		.byte	0xc
 1908 0147 09       		.uleb128 0x9
 1909 0148 DF020000 		.4byte	.LASF26
 1910 014c 05       		.byte	0x5
 1911 014d 14       		.byte	0x14
 1912 014e 97000000 		.4byte	0x97
 1913 0152 0E       		.byte	0xe
 1914 0153 09       		.uleb128 0x9
 1915 0154 FB020000 		.4byte	.LASF27
 1916 0158 05       		.byte	0x5
 1917 0159 15       		.byte	0x15
 1918 015a 97000000 		.4byte	0x97
 1919 015e 10       		.byte	0x10
 1920 015f 09       		.uleb128 0x9
 1921 0160 37010000 		.4byte	.LASF28
 1922 0164 05       		.byte	0x5
 1923 0165 16       		.byte	0x16
 1924 0166 97000000 		.4byte	0x97
 1925 016a 12       		.byte	0x12
 1926 016b 00       		.byte	0
 1927 016c 0B       		.uleb128 0xb
 1928 016d 01       		.byte	0x1
 1929 016e 37000000 		.4byte	0x37
 1930 0172 01       		.byte	0x1
 1931 0173 22       		.byte	0x22
 1932 0174 A9010000 		.4byte	0x1a9
 1933 0178 0C       		.uleb128 0xc
 1934 0179 41544E00 		.ascii	"ATN\000"
 1935 017d 00       		.byte	0
 1936 017e 0C       		.uleb128 0xc
 1937 017f 53525100 		.ascii	"SRQ\000"
 1938 0183 01       		.byte	0x1
 1939 0184 0C       		.uleb128 0xc
 1940 0185 49464300 		.ascii	"IFC\000"
 1941 0189 02       		.byte	0x2
 1942 018a 0D       		.uleb128 0xd
 1943 018b 45040000 		.4byte	.LASF29
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 44


 1944 018f 03       		.byte	0x3
 1945 0190 0D       		.uleb128 0xd
 1946 0191 34030000 		.4byte	.LASF30
 1947 0195 04       		.byte	0x4
 1948 0196 0C       		.uleb128 0xc
 1949 0197 44415600 		.ascii	"DAV\000"
 1950 019b 05       		.byte	0x5
 1951 019c 0C       		.uleb128 0xc
 1952 019d 454F4900 		.ascii	"EOI\000"
 1953 01a1 06       		.byte	0x6
 1954 01a2 0C       		.uleb128 0xc
 1955 01a3 52454E00 		.ascii	"REN\000"
 1956 01a7 07       		.byte	0x7
 1957 01a8 00       		.byte	0
 1958 01a9 03       		.uleb128 0x3
 1959 01aa 08000000 		.4byte	.LASF31
 1960 01ae 01       		.byte	0x1
 1961 01af 23       		.byte	0x23
 1962 01b0 6C010000 		.4byte	0x16c
 1963 01b4 0E       		.uleb128 0xe
 1964 01b5 30000000 		.4byte	.LASF41
 1965 01b9 01       		.byte	0x1
 1966 01ba 1A       		.byte	0x1a
 1967 01bb C9010000 		.4byte	0x1c9
 1968 01bf 00000000 		.4byte	.LFB34
 1969 01c3 10000000 		.4byte	.LFE34-.LFB34
 1970 01c7 01       		.uleb128 0x1
 1971 01c8 9C       		.byte	0x9c
 1972 01c9 07       		.uleb128 0x7
 1973 01ca 04       		.byte	0x4
 1974 01cb 8C000000 		.4byte	0x8c
 1975 01cf 0F       		.uleb128 0xf
 1976 01d0 48020000 		.4byte	.LASF32
 1977 01d4 01       		.byte	0x1
 1978 01d5 36       		.byte	0x36
 1979 01d6 00000000 		.4byte	.LFB35
 1980 01da 0A000000 		.4byte	.LFE35-.LFB35
 1981 01de 01       		.uleb128 0x1
 1982 01df 9C       		.byte	0x9c
 1983 01e0 10       		.uleb128 0x10
 1984 01e1 C3000000 		.4byte	.LASF33
 1985 01e5 01       		.byte	0x1
 1986 01e6 3A       		.byte	0x3a
 1987 01e7 00000000 		.4byte	.LFB36
 1988 01eb 10000000 		.4byte	.LFE36-.LFB36
 1989 01ef 01       		.uleb128 0x1
 1990 01f0 9C       		.byte	0x9c
 1991 01f1 11       		.uleb128 0x11
 1992 01f2 56030000 		.4byte	.LASF34
 1993 01f6 01       		.byte	0x1
 1994 01f7 50       		.byte	0x50
 1995 01f8 00000000 		.4byte	.LFB37
 1996 01fc 28000000 		.4byte	.LFE37-.LFB37
 1997 0200 01       		.uleb128 0x1
 1998 0201 9C       		.byte	0x9c
 1999 0202 15020000 		.4byte	0x215
 2000 0206 12       		.uleb128 0x12
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 45


 2001 0207 F5000000 		.4byte	.LASF36
 2002 020b 01       		.byte	0x1
 2003 020c 50       		.byte	0x50
 2004 020d A9010000 		.4byte	0x1a9
 2005 0211 02       		.uleb128 0x2
 2006 0212 91       		.byte	0x91
 2007 0213 77       		.sleb128 -9
 2008 0214 00       		.byte	0
 2009 0215 11       		.uleb128 0x11
 2010 0216 A8030000 		.4byte	.LASF35
 2011 021a 01       		.byte	0x1
 2012 021b 57       		.byte	0x57
 2013 021c 00000000 		.4byte	.LFB38
 2014 0220 28000000 		.4byte	.LFE38-.LFB38
 2015 0224 01       		.uleb128 0x1
 2016 0225 9C       		.byte	0x9c
 2017 0226 39020000 		.4byte	0x239
 2018 022a 12       		.uleb128 0x12
 2019 022b F5000000 		.4byte	.LASF36
 2020 022f 01       		.byte	0x1
 2021 0230 57       		.byte	0x57
 2022 0231 A9010000 		.4byte	0x1a9
 2023 0235 02       		.uleb128 0x2
 2024 0236 91       		.byte	0x91
 2025 0237 77       		.sleb128 -9
 2026 0238 00       		.byte	0
 2027 0239 13       		.uleb128 0x13
 2028 023a 38040000 		.4byte	.LASF37
 2029 023e 01       		.byte	0x1
 2030 023f 5B       		.byte	0x5b
 2031 0240 97000000 		.4byte	0x97
 2032 0244 00000000 		.4byte	.LFB39
 2033 0248 40000000 		.4byte	.LFE39-.LFB39
 2034 024c 01       		.uleb128 0x1
 2035 024d 9C       		.byte	0x9c
 2036 024e 60020000 		.4byte	0x260
 2037 0252 14       		.uleb128 0x14
 2038 0253 726300   		.ascii	"rc\000"
 2039 0256 01       		.byte	0x1
 2040 0257 5C       		.byte	0x5c
 2041 0258 97000000 		.4byte	0x97
 2042 025c 02       		.uleb128 0x2
 2043 025d 91       		.byte	0x91
 2044 025e 76       		.sleb128 -10
 2045 025f 00       		.byte	0
 2046 0260 15       		.uleb128 0x15
 2047 0261 20040000 		.4byte	.LASF43
 2048 0265 01       		.byte	0x1
 2049 0266 65       		.byte	0x65
 2050 0267 94020000 		.4byte	0x294
 2051 026b 00000000 		.4byte	.LFB40
 2052 026f 34000000 		.4byte	.LFE40-.LFB40
 2053 0273 01       		.uleb128 0x1
 2054 0274 9C       		.byte	0x9c
 2055 0275 94020000 		.4byte	0x294
 2056 0279 12       		.uleb128 0x12
 2057 027a F5000000 		.4byte	.LASF36
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 46


 2058 027e 01       		.byte	0x1
 2059 027f 65       		.byte	0x65
 2060 0280 A9010000 		.4byte	0x1a9
 2061 0284 02       		.uleb128 0x2
 2062 0285 91       		.byte	0x91
 2063 0286 6F       		.sleb128 -17
 2064 0287 14       		.uleb128 0x14
 2065 0288 7600     		.ascii	"v\000"
 2066 028a 01       		.byte	0x1
 2067 028b 66       		.byte	0x66
 2068 028c 7E000000 		.4byte	0x7e
 2069 0290 02       		.uleb128 0x2
 2070 0291 91       		.byte	0x91
 2071 0292 74       		.sleb128 -12
 2072 0293 00       		.byte	0
 2073 0294 02       		.uleb128 0x2
 2074 0295 01       		.byte	0x1
 2075 0296 02       		.byte	0x2
 2076 0297 67030000 		.4byte	.LASF38
 2077 029b 16       		.uleb128 0x16
 2078 029c FF030000 		.4byte	.LASF39
 2079 02a0 01       		.byte	0x1
 2080 02a1 74       		.byte	0x74
 2081 02a2 7E000000 		.4byte	0x7e
 2082 02a6 00000000 		.4byte	.LFB41
 2083 02aa 8C000000 		.4byte	.LFE41-.LFB41
 2084 02ae 01       		.uleb128 0x1
 2085 02af 9C       		.byte	0x9c
 2086 02b0 DF020000 		.4byte	0x2df
 2087 02b4 17       		.uleb128 0x17
 2088 02b5 DA000000 		.4byte	.LASF40
 2089 02b9 01       		.byte	0x1
 2090 02ba 76       		.byte	0x76
 2091 02bb 7E000000 		.4byte	0x7e
 2092 02bf 02       		.uleb128 0x2
 2093 02c0 91       		.byte	0x91
 2094 02c1 6C       		.sleb128 -20
 2095 02c2 14       		.uleb128 0x14
 2096 02c3 61746E00 		.ascii	"atn\000"
 2097 02c7 01       		.byte	0x1
 2098 02c8 78       		.byte	0x78
 2099 02c9 94020000 		.4byte	0x294
 2100 02cd 02       		.uleb128 0x2
 2101 02ce 91       		.byte	0x91
 2102 02cf 6B       		.sleb128 -21
 2103 02d0 14       		.uleb128 0x14
 2104 02d1 69666300 		.ascii	"ifc\000"
 2105 02d5 01       		.byte	0x1
 2106 02d6 79       		.byte	0x79
 2107 02d7 94020000 		.4byte	0x294
 2108 02db 02       		.uleb128 0x2
 2109 02dc 91       		.byte	0x91
 2110 02dd 6A       		.sleb128 -22
 2111 02de 00       		.byte	0
 2112 02df 0E       		.uleb128 0xe
 2113 02e0 04010000 		.4byte	.LASF42
 2114 02e4 01       		.byte	0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 47


 2115 02e5 8E       		.byte	0x8e
 2116 02e6 7E000000 		.4byte	0x7e
 2117 02ea 00000000 		.4byte	.LFB42
 2118 02ee 14000000 		.4byte	.LFE42-.LFB42
 2119 02f2 01       		.uleb128 0x1
 2120 02f3 9C       		.byte	0x9c
 2121 02f4 18       		.uleb128 0x18
 2122 02f5 CB030000 		.4byte	.LASF44
 2123 02f9 01       		.byte	0x1
 2124 02fa 95       		.byte	0x95
 2125 02fb 94020000 		.4byte	0x294
 2126 02ff 00000000 		.4byte	.LFB43
 2127 0303 40000000 		.4byte	.LFE43-.LFB43
 2128 0307 01       		.uleb128 0x1
 2129 0308 9C       		.byte	0x9c
 2130 0309 1C030000 		.4byte	0x31c
 2131 030d 12       		.uleb128 0x12
 2132 030e F5000000 		.4byte	.LASF36
 2133 0312 01       		.byte	0x1
 2134 0313 95       		.byte	0x95
 2135 0314 A9010000 		.4byte	0x1a9
 2136 0318 02       		.uleb128 0x2
 2137 0319 91       		.byte	0x91
 2138 031a 77       		.sleb128 -9
 2139 031b 00       		.byte	0
 2140 031c 18       		.uleb128 0x18
 2141 031d AE020000 		.4byte	.LASF45
 2142 0321 01       		.byte	0x1
 2143 0322 A6       		.byte	0xa6
 2144 0323 94020000 		.4byte	0x294
 2145 0327 00000000 		.4byte	.LFB44
 2146 032b 4C000000 		.4byte	.LFE44-.LFB44
 2147 032f 01       		.uleb128 0x1
 2148 0330 9C       		.byte	0x9c
 2149 0331 44030000 		.4byte	0x344
 2150 0335 12       		.uleb128 0x12
 2151 0336 F5000000 		.4byte	.LASF36
 2152 033a 01       		.byte	0x1
 2153 033b A6       		.byte	0xa6
 2154 033c A9010000 		.4byte	0x1a9
 2155 0340 02       		.uleb128 0x2
 2156 0341 91       		.byte	0x91
 2157 0342 77       		.sleb128 -9
 2158 0343 00       		.byte	0
 2159 0344 18       		.uleb128 0x18
 2160 0345 39030000 		.4byte	.LASF46
 2161 0349 01       		.byte	0x1
 2162 034a B8       		.byte	0xb8
 2163 034b 94020000 		.4byte	0x294
 2164 034f 00000000 		.4byte	.LFB45
 2165 0353 88000000 		.4byte	.LFE45-.LFB45
 2166 0357 01       		.uleb128 0x1
 2167 0358 9C       		.byte	0x9c
 2168 0359 92030000 		.4byte	0x392
 2169 035d 12       		.uleb128 0x12
 2170 035e C6030000 		.4byte	.LASF47
 2171 0362 01       		.byte	0x1
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 48


 2172 0363 B8       		.byte	0xb8
 2173 0364 8C000000 		.4byte	0x8c
 2174 0368 02       		.uleb128 0x2
 2175 0369 91       		.byte	0x91
 2176 036a 67       		.sleb128 -25
 2177 036b 12       		.uleb128 0x12
 2178 036c D4020000 		.4byte	.LASF48
 2179 0370 01       		.byte	0x1
 2180 0371 B8       		.byte	0xb8
 2181 0372 94020000 		.4byte	0x294
 2182 0376 02       		.uleb128 0x2
 2183 0377 91       		.byte	0x91
 2184 0378 66       		.sleb128 -26
 2185 0379 14       		.uleb128 0x14
 2186 037a 6F6B00   		.ascii	"ok\000"
 2187 037d 01       		.byte	0x1
 2188 037e B9       		.byte	0xb9
 2189 037f 94020000 		.4byte	0x294
 2190 0383 02       		.uleb128 0x2
 2191 0384 91       		.byte	0x91
 2192 0385 6F       		.sleb128 -17
 2193 0386 19       		.uleb128 0x19
 2194 0387 27020000 		.4byte	.LASF78
 2195 038b 01       		.byte	0x1
 2196 038c CF       		.byte	0xcf
 2197 038d 64000000 		.4byte	.L50
 2198 0391 00       		.byte	0
 2199 0392 18       		.uleb128 0x18
 2200 0393 06030000 		.4byte	.LASF49
 2201 0397 01       		.byte	0x1
 2202 0398 DE       		.byte	0xde
 2203 0399 7E000000 		.4byte	0x7e
 2204 039d 00000000 		.4byte	.LFB46
 2205 03a1 90000000 		.4byte	.LFE46-.LFB46
 2206 03a5 01       		.uleb128 0x1
 2207 03a6 9C       		.byte	0x9c
 2208 03a7 D5030000 		.4byte	0x3d5
 2209 03ab 12       		.uleb128 0x12
 2210 03ac C6030000 		.4byte	.LASF47
 2211 03b0 01       		.byte	0x1
 2212 03b1 DE       		.byte	0xde
 2213 03b2 C9010000 		.4byte	0x1c9
 2214 03b6 02       		.uleb128 0x2
 2215 03b7 91       		.byte	0x91
 2216 03b8 6C       		.sleb128 -20
 2217 03b9 1A       		.uleb128 0x1a
 2218 03ba 656F6900 		.ascii	"eoi\000"
 2219 03be 01       		.byte	0x1
 2220 03bf DE       		.byte	0xde
 2221 03c0 D5030000 		.4byte	0x3d5
 2222 03c4 02       		.uleb128 0x2
 2223 03c5 91       		.byte	0x91
 2224 03c6 68       		.sleb128 -24
 2225 03c7 14       		.uleb128 0x14
 2226 03c8 6F6B00   		.ascii	"ok\000"
 2227 03cb 01       		.byte	0x1
 2228 03cc DF       		.byte	0xdf
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 49


 2229 03cd 7E000000 		.4byte	0x7e
 2230 03d1 02       		.uleb128 0x2
 2231 03d2 91       		.byte	0x91
 2232 03d3 74       		.sleb128 -12
 2233 03d4 00       		.byte	0
 2234 03d5 07       		.uleb128 0x7
 2235 03d6 04       		.byte	0x4
 2236 03d7 7E000000 		.4byte	0x7e
 2237 03db 1B       		.uleb128 0x1b
 2238 03dc AE000000 		.4byte	.LASF50
 2239 03e0 01       		.byte	0x1
 2240 03e1 1201     		.2byte	0x112
 2241 03e3 00000000 		.4byte	.LFB47
 2242 03e7 22000000 		.4byte	.LFE47-.LFB47
 2243 03eb 01       		.uleb128 0x1
 2244 03ec 9C       		.byte	0x9c
 2245 03ed 1C       		.uleb128 0x1c
 2246 03ee 53010000 		.4byte	.LASF51
 2247 03f2 01       		.byte	0x1
 2248 03f3 1901     		.2byte	0x119
 2249 03f5 00000000 		.4byte	.LFB48
 2250 03f9 24000000 		.4byte	.LFE48-.LFB48
 2251 03fd 01       		.uleb128 0x1
 2252 03fe 9C       		.byte	0x9c
 2253 03ff 13040000 		.4byte	0x413
 2254 0403 1D       		.uleb128 0x1d
 2255 0404 40000000 		.4byte	.LASF24
 2256 0408 01       		.byte	0x1
 2257 0409 1901     		.2byte	0x119
 2258 040b 8C000000 		.4byte	0x8c
 2259 040f 02       		.uleb128 0x2
 2260 0410 91       		.byte	0x91
 2261 0411 77       		.sleb128 -9
 2262 0412 00       		.byte	0
 2263 0413 1C       		.uleb128 0x1c
 2264 0414 3F020000 		.4byte	.LASF52
 2265 0418 01       		.byte	0x1
 2266 0419 1D01     		.2byte	0x11d
 2267 041b 00000000 		.4byte	.LFB49
 2268 041f 24000000 		.4byte	.LFE49-.LFB49
 2269 0423 01       		.uleb128 0x1
 2270 0424 9C       		.byte	0x9c
 2271 0425 39040000 		.4byte	0x439
 2272 0429 1D       		.uleb128 0x1d
 2273 042a 40000000 		.4byte	.LASF24
 2274 042e 01       		.byte	0x1
 2275 042f 1D01     		.2byte	0x11d
 2276 0431 8C000000 		.4byte	0x8c
 2277 0435 02       		.uleb128 0x2
 2278 0436 91       		.byte	0x91
 2279 0437 77       		.sleb128 -9
 2280 0438 00       		.byte	0
 2281 0439 1B       		.uleb128 0x1b
 2282 043a 18030000 		.4byte	.LASF53
 2283 043e 01       		.byte	0x1
 2284 043f 2101     		.2byte	0x121
 2285 0441 00000000 		.4byte	.LFB50
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 50


 2286 0445 10000000 		.4byte	.LFE50-.LFB50
 2287 0449 01       		.uleb128 0x1
 2288 044a 9C       		.byte	0x9c
 2289 044b 1B       		.uleb128 0x1b
 2290 044c 2F040000 		.4byte	.LASF54
 2291 0450 01       		.byte	0x1
 2292 0451 2501     		.2byte	0x125
 2293 0453 00000000 		.4byte	.LFB51
 2294 0457 10000000 		.4byte	.LFE51-.LFB51
 2295 045b 01       		.uleb128 0x1
 2296 045c 9C       		.byte	0x9c
 2297 045d 1B       		.uleb128 0x1b
 2298 045e 26030000 		.4byte	.LASF55
 2299 0462 01       		.byte	0x1
 2300 0463 2A01     		.2byte	0x12a
 2301 0465 00000000 		.4byte	.LFB52
 2302 0469 26000000 		.4byte	.LFE52-.LFB52
 2303 046d 01       		.uleb128 0x1
 2304 046e 9C       		.byte	0x9c
 2305 046f 1B       		.uleb128 0x1b
 2306 0470 48030000 		.4byte	.LASF56
 2307 0474 01       		.byte	0x1
 2308 0475 3101     		.2byte	0x131
 2309 0477 00000000 		.4byte	.LFB53
 2310 047b 26000000 		.4byte	.LFE53-.LFB53
 2311 047f 01       		.uleb128 0x1
 2312 0480 9C       		.byte	0x9c
 2313 0481 1B       		.uleb128 0x1b
 2314 0482 29010000 		.4byte	.LASF57
 2315 0486 01       		.byte	0x1
 2316 0487 3901     		.2byte	0x139
 2317 0489 00000000 		.4byte	.LFB54
 2318 048d 2C000000 		.4byte	.LFE54-.LFB54
 2319 0491 01       		.uleb128 0x1
 2320 0492 9C       		.byte	0x9c
 2321 0493 1C       		.uleb128 0x1c
 2322 0494 1A000000 		.4byte	.LASF58
 2323 0498 01       		.byte	0x1
 2324 0499 4201     		.2byte	0x142
 2325 049b 00000000 		.4byte	.LFB55
 2326 049f 88000000 		.4byte	.LFE55-.LFB55
 2327 04a3 01       		.uleb128 0x1
 2328 04a4 9C       		.byte	0x9c
 2329 04a5 B9040000 		.4byte	0x4b9
 2330 04a9 1D       		.uleb128 0x1d
 2331 04aa 40000000 		.4byte	.LASF24
 2332 04ae 01       		.byte	0x1
 2333 04af 4201     		.2byte	0x142
 2334 04b1 8C000000 		.4byte	0x8c
 2335 04b5 02       		.uleb128 0x2
 2336 04b6 91       		.byte	0x91
 2337 04b7 77       		.sleb128 -9
 2338 04b8 00       		.byte	0
 2339 04b9 1C       		.uleb128 0x1c
 2340 04ba 6B010000 		.4byte	.LASF59
 2341 04be 01       		.byte	0x1
 2342 04bf 6101     		.2byte	0x161
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 51


 2343 04c1 00000000 		.4byte	.LFB56
 2344 04c5 90000000 		.4byte	.LFE56-.LFB56
 2345 04c9 01       		.uleb128 0x1
 2346 04ca 9C       		.byte	0x9c
 2347 04cb DF040000 		.4byte	0x4df
 2348 04cf 1D       		.uleb128 0x1d
 2349 04d0 40000000 		.4byte	.LASF24
 2350 04d4 01       		.byte	0x1
 2351 04d5 6101     		.2byte	0x161
 2352 04d7 8C000000 		.4byte	0x8c
 2353 04db 02       		.uleb128 0x2
 2354 04dc 91       		.byte	0x91
 2355 04dd 77       		.sleb128 -9
 2356 04de 00       		.byte	0
 2357 04df 1E       		.uleb128 0x1e
 2358 04e0 E8030000 		.4byte	.LASF60
 2359 04e4 01       		.byte	0x1
 2360 04e5 8601     		.2byte	0x186
 2361 04e7 94020000 		.4byte	0x294
 2362 04eb 00000000 		.4byte	.LFB57
 2363 04ef 12000000 		.4byte	.LFE57-.LFB57
 2364 04f3 01       		.uleb128 0x1
 2365 04f4 9C       		.byte	0x9c
 2366 04f5 1C       		.uleb128 0x1c
 2367 04f6 FA000000 		.4byte	.LASF61
 2368 04fa 01       		.byte	0x1
 2369 04fb 9101     		.2byte	0x191
 2370 04fd 00000000 		.4byte	.LFB58
 2371 0501 70000000 		.4byte	.LFE58-.LFB58
 2372 0505 01       		.uleb128 0x1
 2373 0506 9C       		.byte	0x9c
 2374 0507 6C050000 		.4byte	0x56c
 2375 050b 1D       		.uleb128 0x1d
 2376 050c 40000000 		.4byte	.LASF24
 2377 0510 01       		.byte	0x1
 2378 0511 9101     		.2byte	0x191
 2379 0513 8C000000 		.4byte	0x8c
 2380 0517 02       		.uleb128 0x2
 2381 0518 91       		.byte	0x91
 2382 0519 67       		.sleb128 -25
 2383 051a 1F       		.uleb128 0x1f
 2384 051b 62756600 		.ascii	"buf\000"
 2385 051f 01       		.byte	0x1
 2386 0520 9101     		.2byte	0x191
 2387 0522 6C050000 		.4byte	0x56c
 2388 0526 02       		.uleb128 0x2
 2389 0527 91       		.byte	0x91
 2390 0528 60       		.sleb128 -32
 2391 0529 1F       		.uleb128 0x1f
 2392 052a 6C656E00 		.ascii	"len\000"
 2393 052e 01       		.byte	0x1
 2394 052f 9101     		.2byte	0x191
 2395 0531 7E000000 		.4byte	0x7e
 2396 0535 02       		.uleb128 0x2
 2397 0536 91       		.byte	0x91
 2398 0537 5C       		.sleb128 -36
 2399 0538 20       		.uleb128 0x20
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 52


 2400 0539 7000     		.ascii	"p\000"
 2401 053b 01       		.byte	0x1
 2402 053c 9201     		.2byte	0x192
 2403 053e ED000000 		.4byte	0xed
 2404 0542 02       		.uleb128 0x2
 2405 0543 91       		.byte	0x91
 2406 0544 70       		.sleb128 -16
 2407 0545 21       		.uleb128 0x21
 2408 0546 19040000 		.4byte	.LASF62
 2409 054a 01       		.byte	0x1
 2410 054b 9401     		.2byte	0x194
 2411 054d 7E000000 		.4byte	0x7e
 2412 0551 02       		.uleb128 0x2
 2413 0552 91       		.byte	0x91
 2414 0553 6C       		.sleb128 -20
 2415 0554 22       		.uleb128 0x22
 2416 0555 36000000 		.4byte	.LBB2
 2417 0559 2E000000 		.4byte	.LBE2-.LBB2
 2418 055d 20       		.uleb128 0x20
 2419 055e 6900     		.ascii	"i\000"
 2420 0560 01       		.byte	0x1
 2421 0561 9801     		.2byte	0x198
 2422 0563 7E000000 		.4byte	0x7e
 2423 0567 02       		.uleb128 0x2
 2424 0568 91       		.byte	0x91
 2425 0569 74       		.sleb128 -12
 2426 056a 00       		.byte	0
 2427 056b 00       		.byte	0
 2428 056c 07       		.uleb128 0x7
 2429 056d 04       		.byte	0x4
 2430 056e 72050000 		.4byte	0x572
 2431 0572 23       		.uleb128 0x23
 2432 0573 8C000000 		.4byte	0x8c
 2433 0577 1C       		.uleb128 0x1c
 2434 0578 09040000 		.4byte	.LASF63
 2435 057c 01       		.byte	0x1
 2436 057d 9C01     		.2byte	0x19c
 2437 057f 00000000 		.4byte	.LFB59
 2438 0583 60000000 		.4byte	.LFE59-.LFB59
 2439 0587 01       		.uleb128 0x1
 2440 0588 9C       		.byte	0x9c
 2441 0589 E1050000 		.4byte	0x5e1
 2442 058d 1F       		.uleb128 0x1f
 2443 058e 62756600 		.ascii	"buf\000"
 2444 0592 01       		.byte	0x1
 2445 0593 9C01     		.2byte	0x19c
 2446 0595 6C050000 		.4byte	0x56c
 2447 0599 02       		.uleb128 0x2
 2448 059a 91       		.byte	0x91
 2449 059b 6C       		.sleb128 -20
 2450 059c 1F       		.uleb128 0x1f
 2451 059d 6C656E00 		.ascii	"len\000"
 2452 05a1 01       		.byte	0x1
 2453 05a2 9C01     		.2byte	0x19c
 2454 05a4 7E000000 		.4byte	0x7e
 2455 05a8 02       		.uleb128 0x2
 2456 05a9 91       		.byte	0x91
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 53


 2457 05aa 68       		.sleb128 -24
 2458 05ab 1D       		.uleb128 0x1d
 2459 05ac D4020000 		.4byte	.LASF48
 2460 05b0 01       		.byte	0x1
 2461 05b1 9C01     		.2byte	0x19c
 2462 05b3 7E000000 		.4byte	0x7e
 2463 05b7 02       		.uleb128 0x2
 2464 05b8 91       		.byte	0x91
 2465 05b9 64       		.sleb128 -28
 2466 05ba 21       		.uleb128 0x21
 2467 05bb 19040000 		.4byte	.LASF62
 2468 05bf 01       		.byte	0x1
 2469 05c0 9D01     		.2byte	0x19d
 2470 05c2 7E000000 		.4byte	0x7e
 2471 05c6 02       		.uleb128 0x2
 2472 05c7 91       		.byte	0x91
 2473 05c8 70       		.sleb128 -16
 2474 05c9 22       		.uleb128 0x22
 2475 05ca 26000000 		.4byte	.LBB3
 2476 05ce 2E000000 		.4byte	.LBE3-.LBB3
 2477 05d2 20       		.uleb128 0x20
 2478 05d3 6900     		.ascii	"i\000"
 2479 05d5 01       		.byte	0x1
 2480 05d6 9F01     		.2byte	0x19f
 2481 05d8 7E000000 		.4byte	0x7e
 2482 05dc 02       		.uleb128 0x2
 2483 05dd 91       		.byte	0x91
 2484 05de 74       		.sleb128 -12
 2485 05df 00       		.byte	0
 2486 05e0 00       		.byte	0
 2487 05e1 24       		.uleb128 0x24
 2488 05e2 A4020000 		.4byte	.LASF64
 2489 05e6 01       		.byte	0x1
 2490 05e7 AF01     		.2byte	0x1af
 2491 05e9 7E000000 		.4byte	0x7e
 2492 05ed 00000000 		.4byte	.LFB60
 2493 05f1 BC000000 		.4byte	.LFE60-.LFB60
 2494 05f5 01       		.uleb128 0x1
 2495 05f6 9C       		.byte	0x9c
 2496 05f7 50060000 		.4byte	0x650
 2497 05fb 1D       		.uleb128 0x1d
 2498 05fc 67000000 		.4byte	.LASF65
 2499 0600 01       		.byte	0x1
 2500 0601 AF01     		.2byte	0x1af
 2501 0603 7E000000 		.4byte	0x7e
 2502 0607 02       		.uleb128 0x2
 2503 0608 91       		.byte	0x91
 2504 0609 64       		.sleb128 -28
 2505 060a 1F       		.uleb128 0x1f
 2506 060b 656E6400 		.ascii	"end\000"
 2507 060f 01       		.byte	0x1
 2508 0610 AF01     		.2byte	0x1af
 2509 0612 D5030000 		.4byte	0x3d5
 2510 0616 02       		.uleb128 0x2
 2511 0617 91       		.byte	0x91
 2512 0618 60       		.sleb128 -32
 2513 0619 20       		.uleb128 0x20
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 54


 2514 061a 6900     		.ascii	"i\000"
 2515 061c 01       		.byte	0x1
 2516 061d B001     		.2byte	0x1b0
 2517 061f 7E000000 		.4byte	0x7e
 2518 0623 02       		.uleb128 0x2
 2519 0624 91       		.byte	0x91
 2520 0625 74       		.sleb128 -12
 2521 0626 25       		.uleb128 0x25
 2522 0627 6F6B00   		.ascii	"ok\000"
 2523 062a 01       		.byte	0x1
 2524 062b B101     		.2byte	0x1b1
 2525 062d 7E000000 		.4byte	0x7e
 2526 0631 20       		.uleb128 0x20
 2527 0632 656F6900 		.ascii	"eoi\000"
 2528 0636 01       		.byte	0x1
 2529 0637 B201     		.2byte	0x1b2
 2530 0639 7E000000 		.4byte	0x7e
 2531 063d 02       		.uleb128 0x2
 2532 063e 91       		.byte	0x91
 2533 063f 6C       		.sleb128 -20
 2534 0640 20       		.uleb128 0x20
 2535 0641 62756600 		.ascii	"buf\000"
 2536 0645 01       		.byte	0x1
 2537 0646 B301     		.2byte	0x1b3
 2538 0648 C9010000 		.4byte	0x1c9
 2539 064c 02       		.uleb128 0x2
 2540 064d 91       		.byte	0x91
 2541 064e 70       		.sleb128 -16
 2542 064f 00       		.byte	0
 2543 0650 24       		.uleb128 0x24
 2544 0651 2F020000 		.4byte	.LASF66
 2545 0655 01       		.byte	0x1
 2546 0656 E201     		.2byte	0x1e2
 2547 0658 7E000000 		.4byte	0x7e
 2548 065c 00000000 		.4byte	.LFB61
 2549 0660 62000000 		.4byte	.LFE61-.LFB61
 2550 0664 01       		.uleb128 0x1
 2551 0665 9C       		.byte	0x9c
 2552 0666 B4060000 		.4byte	0x6b4
 2553 066a 1D       		.uleb128 0x1d
 2554 066b 66010000 		.4byte	.LASF67
 2555 066f 01       		.byte	0x1
 2556 0670 E201     		.2byte	0x1e2
 2557 0672 C9010000 		.4byte	0x1c9
 2558 0676 02       		.uleb128 0x2
 2559 0677 91       		.byte	0x91
 2560 0678 6C       		.sleb128 -20
 2561 0679 1D       		.uleb128 0x1d
 2562 067a CD020000 		.4byte	.LASF68
 2563 067e 01       		.byte	0x1
 2564 067f E201     		.2byte	0x1e2
 2565 0681 7E000000 		.4byte	0x7e
 2566 0685 02       		.uleb128 0x2
 2567 0686 91       		.byte	0x91
 2568 0687 68       		.sleb128 -24
 2569 0688 1F       		.uleb128 0x1f
 2570 0689 656E6400 		.ascii	"end\000"
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 55


 2571 068d 01       		.byte	0x1
 2572 068e E201     		.2byte	0x1e2
 2573 0690 D5030000 		.4byte	0x3d5
 2574 0694 02       		.uleb128 0x2
 2575 0695 91       		.byte	0x91
 2576 0696 64       		.sleb128 -28
 2577 0697 20       		.uleb128 0x20
 2578 0698 656F6900 		.ascii	"eoi\000"
 2579 069c 01       		.byte	0x1
 2580 069d E301     		.2byte	0x1e3
 2581 069f 7E000000 		.4byte	0x7e
 2582 06a3 02       		.uleb128 0x2
 2583 06a4 91       		.byte	0x91
 2584 06a5 70       		.sleb128 -16
 2585 06a6 20       		.uleb128 0x20
 2586 06a7 6900     		.ascii	"i\000"
 2587 06a9 01       		.byte	0x1
 2588 06aa E401     		.2byte	0x1e4
 2589 06ac 7E000000 		.4byte	0x7e
 2590 06b0 02       		.uleb128 0x2
 2591 06b1 91       		.byte	0x91
 2592 06b2 74       		.sleb128 -12
 2593 06b3 00       		.byte	0
 2594 06b4 26       		.uleb128 0x26
 2595 06b5 12010000 		.4byte	.LASF69
 2596 06b9 05       		.byte	0x5
 2597 06ba 1A       		.byte	0x1a
 2598 06bb F3000000 		.4byte	0xf3
 2599 06bf 27       		.uleb128 0x27
 2600 06c0 8C000000 		.4byte	0x8c
 2601 06c4 CF060000 		.4byte	0x6cf
 2602 06c8 28       		.uleb128 0x28
 2603 06c9 E6000000 		.4byte	0xe6
 2604 06cd FF       		.byte	0xff
 2605 06ce 00       		.byte	0
 2606 06cf 29       		.uleb128 0x29
 2607 06d0 48000000 		.4byte	.LASF70
 2608 06d4 01       		.byte	0x1
 2609 06d5 18       		.byte	0x18
 2610 06d6 BF060000 		.4byte	0x6bf
 2611 06da 05       		.uleb128 0x5
 2612 06db 03       		.byte	0x3
 2613 06dc 00000000 		.4byte	gpib_buffer
 2614 06e0 29       		.uleb128 0x29
 2615 06e1 99020000 		.4byte	.LASF71
 2616 06e5 01       		.byte	0x1
 2617 06e6 28       		.byte	0x28
 2618 06e7 8C000000 		.4byte	0x8c
 2619 06eb 05       		.uleb128 0x5
 2620 06ec 03       		.byte	0x3
 2621 06ed 00000000 		.4byte	my_address
 2622 06f1 29       		.uleb128 0x29
 2623 06f2 7E030000 		.4byte	.LASF72
 2624 06f6 01       		.byte	0x1
 2625 06f7 2E       		.byte	0x2e
 2626 06f8 7E000000 		.4byte	0x7e
 2627 06fc 05       		.uleb128 0x5
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 56


 2628 06fd 03       		.byte	0x3
 2629 06fe 00000000 		.4byte	listening
 2630 0702 29       		.uleb128 0x29
 2631 0703 00000000 		.4byte	.LASF73
 2632 0707 01       		.byte	0x1
 2633 0708 2F       		.byte	0x2f
 2634 0709 7E000000 		.4byte	0x7e
 2635 070d 05       		.uleb128 0x5
 2636 070e 03       		.byte	0x3
 2637 070f 00000000 		.4byte	talking
 2638 0713 29       		.uleb128 0x29
 2639 0714 6D030000 		.4byte	.LASF74
 2640 0718 01       		.byte	0x1
 2641 0719 47       		.byte	0x47
 2642 071a 7E000000 		.4byte	0x7e
 2643 071e 05       		.uleb128 0x5
 2644 071f 03       		.byte	0x3
 2645 0720 00000000 		.4byte	_gpib_mode
 2646 0724 00       		.byte	0
 2647              		.section	.debug_abbrev,"",%progbits
 2648              	.Ldebug_abbrev0:
 2649 0000 01       		.uleb128 0x1
 2650 0001 11       		.uleb128 0x11
 2651 0002 01       		.byte	0x1
 2652 0003 25       		.uleb128 0x25
 2653 0004 0E       		.uleb128 0xe
 2654 0005 13       		.uleb128 0x13
 2655 0006 0B       		.uleb128 0xb
 2656 0007 03       		.uleb128 0x3
 2657 0008 0E       		.uleb128 0xe
 2658 0009 1B       		.uleb128 0x1b
 2659 000a 0E       		.uleb128 0xe
 2660 000b 55       		.uleb128 0x55
 2661 000c 17       		.uleb128 0x17
 2662 000d 11       		.uleb128 0x11
 2663 000e 01       		.uleb128 0x1
 2664 000f 10       		.uleb128 0x10
 2665 0010 17       		.uleb128 0x17
 2666 0011 00       		.byte	0
 2667 0012 00       		.byte	0
 2668 0013 02       		.uleb128 0x2
 2669 0014 24       		.uleb128 0x24
 2670 0015 00       		.byte	0
 2671 0016 0B       		.uleb128 0xb
 2672 0017 0B       		.uleb128 0xb
 2673 0018 3E       		.uleb128 0x3e
 2674 0019 0B       		.uleb128 0xb
 2675 001a 03       		.uleb128 0x3
 2676 001b 0E       		.uleb128 0xe
 2677 001c 00       		.byte	0
 2678 001d 00       		.byte	0
 2679 001e 03       		.uleb128 0x3
 2680 001f 16       		.uleb128 0x16
 2681 0020 00       		.byte	0
 2682 0021 03       		.uleb128 0x3
 2683 0022 0E       		.uleb128 0xe
 2684 0023 3A       		.uleb128 0x3a
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 57


 2685 0024 0B       		.uleb128 0xb
 2686 0025 3B       		.uleb128 0x3b
 2687 0026 0B       		.uleb128 0xb
 2688 0027 49       		.uleb128 0x49
 2689 0028 13       		.uleb128 0x13
 2690 0029 00       		.byte	0
 2691 002a 00       		.byte	0
 2692 002b 04       		.uleb128 0x4
 2693 002c 24       		.uleb128 0x24
 2694 002d 00       		.byte	0
 2695 002e 0B       		.uleb128 0xb
 2696 002f 0B       		.uleb128 0xb
 2697 0030 3E       		.uleb128 0x3e
 2698 0031 0B       		.uleb128 0xb
 2699 0032 03       		.uleb128 0x3
 2700 0033 08       		.uleb128 0x8
 2701 0034 00       		.byte	0
 2702 0035 00       		.byte	0
 2703 0036 05       		.uleb128 0x5
 2704 0037 16       		.uleb128 0x16
 2705 0038 00       		.byte	0
 2706 0039 03       		.uleb128 0x3
 2707 003a 0E       		.uleb128 0xe
 2708 003b 3A       		.uleb128 0x3a
 2709 003c 0B       		.uleb128 0xb
 2710 003d 3B       		.uleb128 0x3b
 2711 003e 05       		.uleb128 0x5
 2712 003f 49       		.uleb128 0x49
 2713 0040 13       		.uleb128 0x13
 2714 0041 00       		.byte	0
 2715 0042 00       		.byte	0
 2716 0043 06       		.uleb128 0x6
 2717 0044 35       		.uleb128 0x35
 2718 0045 00       		.byte	0
 2719 0046 49       		.uleb128 0x49
 2720 0047 13       		.uleb128 0x13
 2721 0048 00       		.byte	0
 2722 0049 00       		.byte	0
 2723 004a 07       		.uleb128 0x7
 2724 004b 0F       		.uleb128 0xf
 2725 004c 00       		.byte	0
 2726 004d 0B       		.uleb128 0xb
 2727 004e 0B       		.uleb128 0xb
 2728 004f 49       		.uleb128 0x49
 2729 0050 13       		.uleb128 0x13
 2730 0051 00       		.byte	0
 2731 0052 00       		.byte	0
 2732 0053 08       		.uleb128 0x8
 2733 0054 13       		.uleb128 0x13
 2734 0055 01       		.byte	0x1
 2735 0056 03       		.uleb128 0x3
 2736 0057 0E       		.uleb128 0xe
 2737 0058 0B       		.uleb128 0xb
 2738 0059 0B       		.uleb128 0xb
 2739 005a 3A       		.uleb128 0x3a
 2740 005b 0B       		.uleb128 0xb
 2741 005c 3B       		.uleb128 0x3b
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 58


 2742 005d 0B       		.uleb128 0xb
 2743 005e 01       		.uleb128 0x1
 2744 005f 13       		.uleb128 0x13
 2745 0060 00       		.byte	0
 2746 0061 00       		.byte	0
 2747 0062 09       		.uleb128 0x9
 2748 0063 0D       		.uleb128 0xd
 2749 0064 00       		.byte	0
 2750 0065 03       		.uleb128 0x3
 2751 0066 0E       		.uleb128 0xe
 2752 0067 3A       		.uleb128 0x3a
 2753 0068 0B       		.uleb128 0xb
 2754 0069 3B       		.uleb128 0x3b
 2755 006a 0B       		.uleb128 0xb
 2756 006b 49       		.uleb128 0x49
 2757 006c 13       		.uleb128 0x13
 2758 006d 38       		.uleb128 0x38
 2759 006e 0B       		.uleb128 0xb
 2760 006f 00       		.byte	0
 2761 0070 00       		.byte	0
 2762 0071 0A       		.uleb128 0xa
 2763 0072 0D       		.uleb128 0xd
 2764 0073 00       		.byte	0
 2765 0074 03       		.uleb128 0x3
 2766 0075 08       		.uleb128 0x8
 2767 0076 3A       		.uleb128 0x3a
 2768 0077 0B       		.uleb128 0xb
 2769 0078 3B       		.uleb128 0x3b
 2770 0079 0B       		.uleb128 0xb
 2771 007a 49       		.uleb128 0x49
 2772 007b 13       		.uleb128 0x13
 2773 007c 38       		.uleb128 0x38
 2774 007d 0B       		.uleb128 0xb
 2775 007e 00       		.byte	0
 2776 007f 00       		.byte	0
 2777 0080 0B       		.uleb128 0xb
 2778 0081 04       		.uleb128 0x4
 2779 0082 01       		.byte	0x1
 2780 0083 0B       		.uleb128 0xb
 2781 0084 0B       		.uleb128 0xb
 2782 0085 49       		.uleb128 0x49
 2783 0086 13       		.uleb128 0x13
 2784 0087 3A       		.uleb128 0x3a
 2785 0088 0B       		.uleb128 0xb
 2786 0089 3B       		.uleb128 0x3b
 2787 008a 0B       		.uleb128 0xb
 2788 008b 01       		.uleb128 0x1
 2789 008c 13       		.uleb128 0x13
 2790 008d 00       		.byte	0
 2791 008e 00       		.byte	0
 2792 008f 0C       		.uleb128 0xc
 2793 0090 28       		.uleb128 0x28
 2794 0091 00       		.byte	0
 2795 0092 03       		.uleb128 0x3
 2796 0093 08       		.uleb128 0x8
 2797 0094 1C       		.uleb128 0x1c
 2798 0095 0B       		.uleb128 0xb
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 59


 2799 0096 00       		.byte	0
 2800 0097 00       		.byte	0
 2801 0098 0D       		.uleb128 0xd
 2802 0099 28       		.uleb128 0x28
 2803 009a 00       		.byte	0
 2804 009b 03       		.uleb128 0x3
 2805 009c 0E       		.uleb128 0xe
 2806 009d 1C       		.uleb128 0x1c
 2807 009e 0B       		.uleb128 0xb
 2808 009f 00       		.byte	0
 2809 00a0 00       		.byte	0
 2810 00a1 0E       		.uleb128 0xe
 2811 00a2 2E       		.uleb128 0x2e
 2812 00a3 00       		.byte	0
 2813 00a4 3F       		.uleb128 0x3f
 2814 00a5 19       		.uleb128 0x19
 2815 00a6 03       		.uleb128 0x3
 2816 00a7 0E       		.uleb128 0xe
 2817 00a8 3A       		.uleb128 0x3a
 2818 00a9 0B       		.uleb128 0xb
 2819 00aa 3B       		.uleb128 0x3b
 2820 00ab 0B       		.uleb128 0xb
 2821 00ac 49       		.uleb128 0x49
 2822 00ad 13       		.uleb128 0x13
 2823 00ae 11       		.uleb128 0x11
 2824 00af 01       		.uleb128 0x1
 2825 00b0 12       		.uleb128 0x12
 2826 00b1 06       		.uleb128 0x6
 2827 00b2 40       		.uleb128 0x40
 2828 00b3 18       		.uleb128 0x18
 2829 00b4 9742     		.uleb128 0x2117
 2830 00b6 19       		.uleb128 0x19
 2831 00b7 00       		.byte	0
 2832 00b8 00       		.byte	0
 2833 00b9 0F       		.uleb128 0xf
 2834 00ba 2E       		.uleb128 0x2e
 2835 00bb 00       		.byte	0
 2836 00bc 3F       		.uleb128 0x3f
 2837 00bd 19       		.uleb128 0x19
 2838 00be 03       		.uleb128 0x3
 2839 00bf 0E       		.uleb128 0xe
 2840 00c0 3A       		.uleb128 0x3a
 2841 00c1 0B       		.uleb128 0xb
 2842 00c2 3B       		.uleb128 0x3b
 2843 00c3 0B       		.uleb128 0xb
 2844 00c4 11       		.uleb128 0x11
 2845 00c5 01       		.uleb128 0x1
 2846 00c6 12       		.uleb128 0x12
 2847 00c7 06       		.uleb128 0x6
 2848 00c8 40       		.uleb128 0x40
 2849 00c9 18       		.uleb128 0x18
 2850 00ca 9742     		.uleb128 0x2117
 2851 00cc 19       		.uleb128 0x19
 2852 00cd 00       		.byte	0
 2853 00ce 00       		.byte	0
 2854 00cf 10       		.uleb128 0x10
 2855 00d0 2E       		.uleb128 0x2e
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 60


 2856 00d1 00       		.byte	0
 2857 00d2 3F       		.uleb128 0x3f
 2858 00d3 19       		.uleb128 0x19
 2859 00d4 03       		.uleb128 0x3
 2860 00d5 0E       		.uleb128 0xe
 2861 00d6 3A       		.uleb128 0x3a
 2862 00d7 0B       		.uleb128 0xb
 2863 00d8 3B       		.uleb128 0x3b
 2864 00d9 0B       		.uleb128 0xb
 2865 00da 11       		.uleb128 0x11
 2866 00db 01       		.uleb128 0x1
 2867 00dc 12       		.uleb128 0x12
 2868 00dd 06       		.uleb128 0x6
 2869 00de 40       		.uleb128 0x40
 2870 00df 18       		.uleb128 0x18
 2871 00e0 9642     		.uleb128 0x2116
 2872 00e2 19       		.uleb128 0x19
 2873 00e3 00       		.byte	0
 2874 00e4 00       		.byte	0
 2875 00e5 11       		.uleb128 0x11
 2876 00e6 2E       		.uleb128 0x2e
 2877 00e7 01       		.byte	0x1
 2878 00e8 3F       		.uleb128 0x3f
 2879 00e9 19       		.uleb128 0x19
 2880 00ea 03       		.uleb128 0x3
 2881 00eb 0E       		.uleb128 0xe
 2882 00ec 3A       		.uleb128 0x3a
 2883 00ed 0B       		.uleb128 0xb
 2884 00ee 3B       		.uleb128 0x3b
 2885 00ef 0B       		.uleb128 0xb
 2886 00f0 27       		.uleb128 0x27
 2887 00f1 19       		.uleb128 0x19
 2888 00f2 11       		.uleb128 0x11
 2889 00f3 01       		.uleb128 0x1
 2890 00f4 12       		.uleb128 0x12
 2891 00f5 06       		.uleb128 0x6
 2892 00f6 40       		.uleb128 0x40
 2893 00f7 18       		.uleb128 0x18
 2894 00f8 9742     		.uleb128 0x2117
 2895 00fa 19       		.uleb128 0x19
 2896 00fb 01       		.uleb128 0x1
 2897 00fc 13       		.uleb128 0x13
 2898 00fd 00       		.byte	0
 2899 00fe 00       		.byte	0
 2900 00ff 12       		.uleb128 0x12
 2901 0100 05       		.uleb128 0x5
 2902 0101 00       		.byte	0
 2903 0102 03       		.uleb128 0x3
 2904 0103 0E       		.uleb128 0xe
 2905 0104 3A       		.uleb128 0x3a
 2906 0105 0B       		.uleb128 0xb
 2907 0106 3B       		.uleb128 0x3b
 2908 0107 0B       		.uleb128 0xb
 2909 0108 49       		.uleb128 0x49
 2910 0109 13       		.uleb128 0x13
 2911 010a 02       		.uleb128 0x2
 2912 010b 18       		.uleb128 0x18
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 61


 2913 010c 00       		.byte	0
 2914 010d 00       		.byte	0
 2915 010e 13       		.uleb128 0x13
 2916 010f 2E       		.uleb128 0x2e
 2917 0110 01       		.byte	0x1
 2918 0111 3F       		.uleb128 0x3f
 2919 0112 19       		.uleb128 0x19
 2920 0113 03       		.uleb128 0x3
 2921 0114 0E       		.uleb128 0xe
 2922 0115 3A       		.uleb128 0x3a
 2923 0116 0B       		.uleb128 0xb
 2924 0117 3B       		.uleb128 0x3b
 2925 0118 0B       		.uleb128 0xb
 2926 0119 49       		.uleb128 0x49
 2927 011a 13       		.uleb128 0x13
 2928 011b 11       		.uleb128 0x11
 2929 011c 01       		.uleb128 0x1
 2930 011d 12       		.uleb128 0x12
 2931 011e 06       		.uleb128 0x6
 2932 011f 40       		.uleb128 0x40
 2933 0120 18       		.uleb128 0x18
 2934 0121 9742     		.uleb128 0x2117
 2935 0123 19       		.uleb128 0x19
 2936 0124 01       		.uleb128 0x1
 2937 0125 13       		.uleb128 0x13
 2938 0126 00       		.byte	0
 2939 0127 00       		.byte	0
 2940 0128 14       		.uleb128 0x14
 2941 0129 34       		.uleb128 0x34
 2942 012a 00       		.byte	0
 2943 012b 03       		.uleb128 0x3
 2944 012c 08       		.uleb128 0x8
 2945 012d 3A       		.uleb128 0x3a
 2946 012e 0B       		.uleb128 0xb
 2947 012f 3B       		.uleb128 0x3b
 2948 0130 0B       		.uleb128 0xb
 2949 0131 49       		.uleb128 0x49
 2950 0132 13       		.uleb128 0x13
 2951 0133 02       		.uleb128 0x2
 2952 0134 18       		.uleb128 0x18
 2953 0135 00       		.byte	0
 2954 0136 00       		.byte	0
 2955 0137 15       		.uleb128 0x15
 2956 0138 2E       		.uleb128 0x2e
 2957 0139 01       		.byte	0x1
 2958 013a 3F       		.uleb128 0x3f
 2959 013b 19       		.uleb128 0x19
 2960 013c 03       		.uleb128 0x3
 2961 013d 0E       		.uleb128 0xe
 2962 013e 3A       		.uleb128 0x3a
 2963 013f 0B       		.uleb128 0xb
 2964 0140 3B       		.uleb128 0x3b
 2965 0141 0B       		.uleb128 0xb
 2966 0142 27       		.uleb128 0x27
 2967 0143 19       		.uleb128 0x19
 2968 0144 49       		.uleb128 0x49
 2969 0145 13       		.uleb128 0x13
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 62


 2970 0146 11       		.uleb128 0x11
 2971 0147 01       		.uleb128 0x1
 2972 0148 12       		.uleb128 0x12
 2973 0149 06       		.uleb128 0x6
 2974 014a 40       		.uleb128 0x40
 2975 014b 18       		.uleb128 0x18
 2976 014c 9742     		.uleb128 0x2117
 2977 014e 19       		.uleb128 0x19
 2978 014f 01       		.uleb128 0x1
 2979 0150 13       		.uleb128 0x13
 2980 0151 00       		.byte	0
 2981 0152 00       		.byte	0
 2982 0153 16       		.uleb128 0x16
 2983 0154 2E       		.uleb128 0x2e
 2984 0155 01       		.byte	0x1
 2985 0156 3F       		.uleb128 0x3f
 2986 0157 19       		.uleb128 0x19
 2987 0158 03       		.uleb128 0x3
 2988 0159 0E       		.uleb128 0xe
 2989 015a 3A       		.uleb128 0x3a
 2990 015b 0B       		.uleb128 0xb
 2991 015c 3B       		.uleb128 0x3b
 2992 015d 0B       		.uleb128 0xb
 2993 015e 49       		.uleb128 0x49
 2994 015f 13       		.uleb128 0x13
 2995 0160 11       		.uleb128 0x11
 2996 0161 01       		.uleb128 0x1
 2997 0162 12       		.uleb128 0x12
 2998 0163 06       		.uleb128 0x6
 2999 0164 40       		.uleb128 0x40
 3000 0165 18       		.uleb128 0x18
 3001 0166 9642     		.uleb128 0x2116
 3002 0168 19       		.uleb128 0x19
 3003 0169 01       		.uleb128 0x1
 3004 016a 13       		.uleb128 0x13
 3005 016b 00       		.byte	0
 3006 016c 00       		.byte	0
 3007 016d 17       		.uleb128 0x17
 3008 016e 34       		.uleb128 0x34
 3009 016f 00       		.byte	0
 3010 0170 03       		.uleb128 0x3
 3011 0171 0E       		.uleb128 0xe
 3012 0172 3A       		.uleb128 0x3a
 3013 0173 0B       		.uleb128 0xb
 3014 0174 3B       		.uleb128 0x3b
 3015 0175 0B       		.uleb128 0xb
 3016 0176 49       		.uleb128 0x49
 3017 0177 13       		.uleb128 0x13
 3018 0178 02       		.uleb128 0x2
 3019 0179 18       		.uleb128 0x18
 3020 017a 00       		.byte	0
 3021 017b 00       		.byte	0
 3022 017c 18       		.uleb128 0x18
 3023 017d 2E       		.uleb128 0x2e
 3024 017e 01       		.byte	0x1
 3025 017f 3F       		.uleb128 0x3f
 3026 0180 19       		.uleb128 0x19
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 63


 3027 0181 03       		.uleb128 0x3
 3028 0182 0E       		.uleb128 0xe
 3029 0183 3A       		.uleb128 0x3a
 3030 0184 0B       		.uleb128 0xb
 3031 0185 3B       		.uleb128 0x3b
 3032 0186 0B       		.uleb128 0xb
 3033 0187 27       		.uleb128 0x27
 3034 0188 19       		.uleb128 0x19
 3035 0189 49       		.uleb128 0x49
 3036 018a 13       		.uleb128 0x13
 3037 018b 11       		.uleb128 0x11
 3038 018c 01       		.uleb128 0x1
 3039 018d 12       		.uleb128 0x12
 3040 018e 06       		.uleb128 0x6
 3041 018f 40       		.uleb128 0x40
 3042 0190 18       		.uleb128 0x18
 3043 0191 9642     		.uleb128 0x2116
 3044 0193 19       		.uleb128 0x19
 3045 0194 01       		.uleb128 0x1
 3046 0195 13       		.uleb128 0x13
 3047 0196 00       		.byte	0
 3048 0197 00       		.byte	0
 3049 0198 19       		.uleb128 0x19
 3050 0199 0A       		.uleb128 0xa
 3051 019a 00       		.byte	0
 3052 019b 03       		.uleb128 0x3
 3053 019c 0E       		.uleb128 0xe
 3054 019d 3A       		.uleb128 0x3a
 3055 019e 0B       		.uleb128 0xb
 3056 019f 3B       		.uleb128 0x3b
 3057 01a0 0B       		.uleb128 0xb
 3058 01a1 11       		.uleb128 0x11
 3059 01a2 01       		.uleb128 0x1
 3060 01a3 00       		.byte	0
 3061 01a4 00       		.byte	0
 3062 01a5 1A       		.uleb128 0x1a
 3063 01a6 05       		.uleb128 0x5
 3064 01a7 00       		.byte	0
 3065 01a8 03       		.uleb128 0x3
 3066 01a9 08       		.uleb128 0x8
 3067 01aa 3A       		.uleb128 0x3a
 3068 01ab 0B       		.uleb128 0xb
 3069 01ac 3B       		.uleb128 0x3b
 3070 01ad 0B       		.uleb128 0xb
 3071 01ae 49       		.uleb128 0x49
 3072 01af 13       		.uleb128 0x13
 3073 01b0 02       		.uleb128 0x2
 3074 01b1 18       		.uleb128 0x18
 3075 01b2 00       		.byte	0
 3076 01b3 00       		.byte	0
 3077 01b4 1B       		.uleb128 0x1b
 3078 01b5 2E       		.uleb128 0x2e
 3079 01b6 00       		.byte	0
 3080 01b7 3F       		.uleb128 0x3f
 3081 01b8 19       		.uleb128 0x19
 3082 01b9 03       		.uleb128 0x3
 3083 01ba 0E       		.uleb128 0xe
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 64


 3084 01bb 3A       		.uleb128 0x3a
 3085 01bc 0B       		.uleb128 0xb
 3086 01bd 3B       		.uleb128 0x3b
 3087 01be 05       		.uleb128 0x5
 3088 01bf 11       		.uleb128 0x11
 3089 01c0 01       		.uleb128 0x1
 3090 01c1 12       		.uleb128 0x12
 3091 01c2 06       		.uleb128 0x6
 3092 01c3 40       		.uleb128 0x40
 3093 01c4 18       		.uleb128 0x18
 3094 01c5 9642     		.uleb128 0x2116
 3095 01c7 19       		.uleb128 0x19
 3096 01c8 00       		.byte	0
 3097 01c9 00       		.byte	0
 3098 01ca 1C       		.uleb128 0x1c
 3099 01cb 2E       		.uleb128 0x2e
 3100 01cc 01       		.byte	0x1
 3101 01cd 3F       		.uleb128 0x3f
 3102 01ce 19       		.uleb128 0x19
 3103 01cf 03       		.uleb128 0x3
 3104 01d0 0E       		.uleb128 0xe
 3105 01d1 3A       		.uleb128 0x3a
 3106 01d2 0B       		.uleb128 0xb
 3107 01d3 3B       		.uleb128 0x3b
 3108 01d4 05       		.uleb128 0x5
 3109 01d5 27       		.uleb128 0x27
 3110 01d6 19       		.uleb128 0x19
 3111 01d7 11       		.uleb128 0x11
 3112 01d8 01       		.uleb128 0x1
 3113 01d9 12       		.uleb128 0x12
 3114 01da 06       		.uleb128 0x6
 3115 01db 40       		.uleb128 0x40
 3116 01dc 18       		.uleb128 0x18
 3117 01dd 9642     		.uleb128 0x2116
 3118 01df 19       		.uleb128 0x19
 3119 01e0 01       		.uleb128 0x1
 3120 01e1 13       		.uleb128 0x13
 3121 01e2 00       		.byte	0
 3122 01e3 00       		.byte	0
 3123 01e4 1D       		.uleb128 0x1d
 3124 01e5 05       		.uleb128 0x5
 3125 01e6 00       		.byte	0
 3126 01e7 03       		.uleb128 0x3
 3127 01e8 0E       		.uleb128 0xe
 3128 01e9 3A       		.uleb128 0x3a
 3129 01ea 0B       		.uleb128 0xb
 3130 01eb 3B       		.uleb128 0x3b
 3131 01ec 05       		.uleb128 0x5
 3132 01ed 49       		.uleb128 0x49
 3133 01ee 13       		.uleb128 0x13
 3134 01ef 02       		.uleb128 0x2
 3135 01f0 18       		.uleb128 0x18
 3136 01f1 00       		.byte	0
 3137 01f2 00       		.byte	0
 3138 01f3 1E       		.uleb128 0x1e
 3139 01f4 2E       		.uleb128 0x2e
 3140 01f5 00       		.byte	0
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 65


 3141 01f6 3F       		.uleb128 0x3f
 3142 01f7 19       		.uleb128 0x19
 3143 01f8 03       		.uleb128 0x3
 3144 01f9 0E       		.uleb128 0xe
 3145 01fa 3A       		.uleb128 0x3a
 3146 01fb 0B       		.uleb128 0xb
 3147 01fc 3B       		.uleb128 0x3b
 3148 01fd 05       		.uleb128 0x5
 3149 01fe 49       		.uleb128 0x49
 3150 01ff 13       		.uleb128 0x13
 3151 0200 11       		.uleb128 0x11
 3152 0201 01       		.uleb128 0x1
 3153 0202 12       		.uleb128 0x12
 3154 0203 06       		.uleb128 0x6
 3155 0204 40       		.uleb128 0x40
 3156 0205 18       		.uleb128 0x18
 3157 0206 9642     		.uleb128 0x2116
 3158 0208 19       		.uleb128 0x19
 3159 0209 00       		.byte	0
 3160 020a 00       		.byte	0
 3161 020b 1F       		.uleb128 0x1f
 3162 020c 05       		.uleb128 0x5
 3163 020d 00       		.byte	0
 3164 020e 03       		.uleb128 0x3
 3165 020f 08       		.uleb128 0x8
 3166 0210 3A       		.uleb128 0x3a
 3167 0211 0B       		.uleb128 0xb
 3168 0212 3B       		.uleb128 0x3b
 3169 0213 05       		.uleb128 0x5
 3170 0214 49       		.uleb128 0x49
 3171 0215 13       		.uleb128 0x13
 3172 0216 02       		.uleb128 0x2
 3173 0217 18       		.uleb128 0x18
 3174 0218 00       		.byte	0
 3175 0219 00       		.byte	0
 3176 021a 20       		.uleb128 0x20
 3177 021b 34       		.uleb128 0x34
 3178 021c 00       		.byte	0
 3179 021d 03       		.uleb128 0x3
 3180 021e 08       		.uleb128 0x8
 3181 021f 3A       		.uleb128 0x3a
 3182 0220 0B       		.uleb128 0xb
 3183 0221 3B       		.uleb128 0x3b
 3184 0222 05       		.uleb128 0x5
 3185 0223 49       		.uleb128 0x49
 3186 0224 13       		.uleb128 0x13
 3187 0225 02       		.uleb128 0x2
 3188 0226 18       		.uleb128 0x18
 3189 0227 00       		.byte	0
 3190 0228 00       		.byte	0
 3191 0229 21       		.uleb128 0x21
 3192 022a 34       		.uleb128 0x34
 3193 022b 00       		.byte	0
 3194 022c 03       		.uleb128 0x3
 3195 022d 0E       		.uleb128 0xe
 3196 022e 3A       		.uleb128 0x3a
 3197 022f 0B       		.uleb128 0xb
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 66


 3198 0230 3B       		.uleb128 0x3b
 3199 0231 05       		.uleb128 0x5
 3200 0232 49       		.uleb128 0x49
 3201 0233 13       		.uleb128 0x13
 3202 0234 02       		.uleb128 0x2
 3203 0235 18       		.uleb128 0x18
 3204 0236 00       		.byte	0
 3205 0237 00       		.byte	0
 3206 0238 22       		.uleb128 0x22
 3207 0239 0B       		.uleb128 0xb
 3208 023a 01       		.byte	0x1
 3209 023b 11       		.uleb128 0x11
 3210 023c 01       		.uleb128 0x1
 3211 023d 12       		.uleb128 0x12
 3212 023e 06       		.uleb128 0x6
 3213 023f 00       		.byte	0
 3214 0240 00       		.byte	0
 3215 0241 23       		.uleb128 0x23
 3216 0242 26       		.uleb128 0x26
 3217 0243 00       		.byte	0
 3218 0244 49       		.uleb128 0x49
 3219 0245 13       		.uleb128 0x13
 3220 0246 00       		.byte	0
 3221 0247 00       		.byte	0
 3222 0248 24       		.uleb128 0x24
 3223 0249 2E       		.uleb128 0x2e
 3224 024a 01       		.byte	0x1
 3225 024b 3F       		.uleb128 0x3f
 3226 024c 19       		.uleb128 0x19
 3227 024d 03       		.uleb128 0x3
 3228 024e 0E       		.uleb128 0xe
 3229 024f 3A       		.uleb128 0x3a
 3230 0250 0B       		.uleb128 0xb
 3231 0251 3B       		.uleb128 0x3b
 3232 0252 05       		.uleb128 0x5
 3233 0253 27       		.uleb128 0x27
 3234 0254 19       		.uleb128 0x19
 3235 0255 49       		.uleb128 0x49
 3236 0256 13       		.uleb128 0x13
 3237 0257 11       		.uleb128 0x11
 3238 0258 01       		.uleb128 0x1
 3239 0259 12       		.uleb128 0x12
 3240 025a 06       		.uleb128 0x6
 3241 025b 40       		.uleb128 0x40
 3242 025c 18       		.uleb128 0x18
 3243 025d 9642     		.uleb128 0x2116
 3244 025f 19       		.uleb128 0x19
 3245 0260 01       		.uleb128 0x1
 3246 0261 13       		.uleb128 0x13
 3247 0262 00       		.byte	0
 3248 0263 00       		.byte	0
 3249 0264 25       		.uleb128 0x25
 3250 0265 34       		.uleb128 0x34
 3251 0266 00       		.byte	0
 3252 0267 03       		.uleb128 0x3
 3253 0268 08       		.uleb128 0x8
 3254 0269 3A       		.uleb128 0x3a
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 67


 3255 026a 0B       		.uleb128 0xb
 3256 026b 3B       		.uleb128 0x3b
 3257 026c 05       		.uleb128 0x5
 3258 026d 49       		.uleb128 0x49
 3259 026e 13       		.uleb128 0x13
 3260 026f 00       		.byte	0
 3261 0270 00       		.byte	0
 3262 0271 26       		.uleb128 0x26
 3263 0272 34       		.uleb128 0x34
 3264 0273 00       		.byte	0
 3265 0274 03       		.uleb128 0x3
 3266 0275 0E       		.uleb128 0xe
 3267 0276 3A       		.uleb128 0x3a
 3268 0277 0B       		.uleb128 0xb
 3269 0278 3B       		.uleb128 0x3b
 3270 0279 0B       		.uleb128 0xb
 3271 027a 49       		.uleb128 0x49
 3272 027b 13       		.uleb128 0x13
 3273 027c 3F       		.uleb128 0x3f
 3274 027d 19       		.uleb128 0x19
 3275 027e 3C       		.uleb128 0x3c
 3276 027f 19       		.uleb128 0x19
 3277 0280 00       		.byte	0
 3278 0281 00       		.byte	0
 3279 0282 27       		.uleb128 0x27
 3280 0283 01       		.uleb128 0x1
 3281 0284 01       		.byte	0x1
 3282 0285 49       		.uleb128 0x49
 3283 0286 13       		.uleb128 0x13
 3284 0287 01       		.uleb128 0x1
 3285 0288 13       		.uleb128 0x13
 3286 0289 00       		.byte	0
 3287 028a 00       		.byte	0
 3288 028b 28       		.uleb128 0x28
 3289 028c 21       		.uleb128 0x21
 3290 028d 00       		.byte	0
 3291 028e 49       		.uleb128 0x49
 3292 028f 13       		.uleb128 0x13
 3293 0290 2F       		.uleb128 0x2f
 3294 0291 0B       		.uleb128 0xb
 3295 0292 00       		.byte	0
 3296 0293 00       		.byte	0
 3297 0294 29       		.uleb128 0x29
 3298 0295 34       		.uleb128 0x34
 3299 0296 00       		.byte	0
 3300 0297 03       		.uleb128 0x3
 3301 0298 0E       		.uleb128 0xe
 3302 0299 3A       		.uleb128 0x3a
 3303 029a 0B       		.uleb128 0xb
 3304 029b 3B       		.uleb128 0x3b
 3305 029c 0B       		.uleb128 0xb
 3306 029d 49       		.uleb128 0x49
 3307 029e 13       		.uleb128 0x13
 3308 029f 3F       		.uleb128 0x3f
 3309 02a0 19       		.uleb128 0x19
 3310 02a1 02       		.uleb128 0x2
 3311 02a2 18       		.uleb128 0x18
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 68


 3312 02a3 00       		.byte	0
 3313 02a4 00       		.byte	0
 3314 02a5 00       		.byte	0
 3315              		.section	.debug_aranges,"",%progbits
 3316 0000 F4000000 		.4byte	0xf4
 3317 0004 0200     		.2byte	0x2
 3318 0006 00000000 		.4byte	.Ldebug_info0
 3319 000a 04       		.byte	0x4
 3320 000b 00       		.byte	0
 3321 000c 0000     		.2byte	0
 3322 000e 0000     		.2byte	0
 3323 0010 00000000 		.4byte	.LFB34
 3324 0014 10000000 		.4byte	.LFE34-.LFB34
 3325 0018 00000000 		.4byte	.LFB35
 3326 001c 0A000000 		.4byte	.LFE35-.LFB35
 3327 0020 00000000 		.4byte	.LFB36
 3328 0024 10000000 		.4byte	.LFE36-.LFB36
 3329 0028 00000000 		.4byte	.LFB37
 3330 002c 28000000 		.4byte	.LFE37-.LFB37
 3331 0030 00000000 		.4byte	.LFB38
 3332 0034 28000000 		.4byte	.LFE38-.LFB38
 3333 0038 00000000 		.4byte	.LFB39
 3334 003c 40000000 		.4byte	.LFE39-.LFB39
 3335 0040 00000000 		.4byte	.LFB40
 3336 0044 34000000 		.4byte	.LFE40-.LFB40
 3337 0048 00000000 		.4byte	.LFB41
 3338 004c 8C000000 		.4byte	.LFE41-.LFB41
 3339 0050 00000000 		.4byte	.LFB42
 3340 0054 14000000 		.4byte	.LFE42-.LFB42
 3341 0058 00000000 		.4byte	.LFB43
 3342 005c 40000000 		.4byte	.LFE43-.LFB43
 3343 0060 00000000 		.4byte	.LFB44
 3344 0064 4C000000 		.4byte	.LFE44-.LFB44
 3345 0068 00000000 		.4byte	.LFB45
 3346 006c 88000000 		.4byte	.LFE45-.LFB45
 3347 0070 00000000 		.4byte	.LFB46
 3348 0074 90000000 		.4byte	.LFE46-.LFB46
 3349 0078 00000000 		.4byte	.LFB47
 3350 007c 22000000 		.4byte	.LFE47-.LFB47
 3351 0080 00000000 		.4byte	.LFB48
 3352 0084 24000000 		.4byte	.LFE48-.LFB48
 3353 0088 00000000 		.4byte	.LFB49
 3354 008c 24000000 		.4byte	.LFE49-.LFB49
 3355 0090 00000000 		.4byte	.LFB50
 3356 0094 10000000 		.4byte	.LFE50-.LFB50
 3357 0098 00000000 		.4byte	.LFB51
 3358 009c 10000000 		.4byte	.LFE51-.LFB51
 3359 00a0 00000000 		.4byte	.LFB52
 3360 00a4 26000000 		.4byte	.LFE52-.LFB52
 3361 00a8 00000000 		.4byte	.LFB53
 3362 00ac 26000000 		.4byte	.LFE53-.LFB53
 3363 00b0 00000000 		.4byte	.LFB54
 3364 00b4 2C000000 		.4byte	.LFE54-.LFB54
 3365 00b8 00000000 		.4byte	.LFB55
 3366 00bc 88000000 		.4byte	.LFE55-.LFB55
 3367 00c0 00000000 		.4byte	.LFB56
 3368 00c4 90000000 		.4byte	.LFE56-.LFB56
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 69


 3369 00c8 00000000 		.4byte	.LFB57
 3370 00cc 12000000 		.4byte	.LFE57-.LFB57
 3371 00d0 00000000 		.4byte	.LFB58
 3372 00d4 70000000 		.4byte	.LFE58-.LFB58
 3373 00d8 00000000 		.4byte	.LFB59
 3374 00dc 60000000 		.4byte	.LFE59-.LFB59
 3375 00e0 00000000 		.4byte	.LFB60
 3376 00e4 BC000000 		.4byte	.LFE60-.LFB60
 3377 00e8 00000000 		.4byte	.LFB61
 3378 00ec 62000000 		.4byte	.LFE61-.LFB61
 3379 00f0 00000000 		.4byte	0
 3380 00f4 00000000 		.4byte	0
 3381              		.section	.debug_ranges,"",%progbits
 3382              	.Ldebug_ranges0:
 3383 0000 00000000 		.4byte	.LFB34
 3384 0004 10000000 		.4byte	.LFE34
 3385 0008 00000000 		.4byte	.LFB35
 3386 000c 0A000000 		.4byte	.LFE35
 3387 0010 00000000 		.4byte	.LFB36
 3388 0014 10000000 		.4byte	.LFE36
 3389 0018 00000000 		.4byte	.LFB37
 3390 001c 28000000 		.4byte	.LFE37
 3391 0020 00000000 		.4byte	.LFB38
 3392 0024 28000000 		.4byte	.LFE38
 3393 0028 00000000 		.4byte	.LFB39
 3394 002c 40000000 		.4byte	.LFE39
 3395 0030 00000000 		.4byte	.LFB40
 3396 0034 34000000 		.4byte	.LFE40
 3397 0038 00000000 		.4byte	.LFB41
 3398 003c 8C000000 		.4byte	.LFE41
 3399 0040 00000000 		.4byte	.LFB42
 3400 0044 14000000 		.4byte	.LFE42
 3401 0048 00000000 		.4byte	.LFB43
 3402 004c 40000000 		.4byte	.LFE43
 3403 0050 00000000 		.4byte	.LFB44
 3404 0054 4C000000 		.4byte	.LFE44
 3405 0058 00000000 		.4byte	.LFB45
 3406 005c 88000000 		.4byte	.LFE45
 3407 0060 00000000 		.4byte	.LFB46
 3408 0064 90000000 		.4byte	.LFE46
 3409 0068 00000000 		.4byte	.LFB47
 3410 006c 22000000 		.4byte	.LFE47
 3411 0070 00000000 		.4byte	.LFB48
 3412 0074 24000000 		.4byte	.LFE48
 3413 0078 00000000 		.4byte	.LFB49
 3414 007c 24000000 		.4byte	.LFE49
 3415 0080 00000000 		.4byte	.LFB50
 3416 0084 10000000 		.4byte	.LFE50
 3417 0088 00000000 		.4byte	.LFB51
 3418 008c 10000000 		.4byte	.LFE51
 3419 0090 00000000 		.4byte	.LFB52
 3420 0094 26000000 		.4byte	.LFE52
 3421 0098 00000000 		.4byte	.LFB53
 3422 009c 26000000 		.4byte	.LFE53
 3423 00a0 00000000 		.4byte	.LFB54
 3424 00a4 2C000000 		.4byte	.LFE54
 3425 00a8 00000000 		.4byte	.LFB55
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 70


 3426 00ac 88000000 		.4byte	.LFE55
 3427 00b0 00000000 		.4byte	.LFB56
 3428 00b4 90000000 		.4byte	.LFE56
 3429 00b8 00000000 		.4byte	.LFB57
 3430 00bc 12000000 		.4byte	.LFE57
 3431 00c0 00000000 		.4byte	.LFB58
 3432 00c4 70000000 		.4byte	.LFE58
 3433 00c8 00000000 		.4byte	.LFB59
 3434 00cc 60000000 		.4byte	.LFE59
 3435 00d0 00000000 		.4byte	.LFB60
 3436 00d4 BC000000 		.4byte	.LFE60
 3437 00d8 00000000 		.4byte	.LFB61
 3438 00dc 62000000 		.4byte	.LFE61
 3439 00e0 00000000 		.4byte	0
 3440 00e4 00000000 		.4byte	0
 3441              		.section	.debug_line,"",%progbits
 3442              	.Ldebug_line0:
 3443 0000 47040000 		.section	.debug_str,"MS",%progbits,1
 3443      02004C01 
 3443      00000201 
 3443      FB0E0D00 
 3443      01010101 
 3444              	.LASF73:
 3445 0000 74616C6B 		.ascii	"talking\000"
 3445      696E6700 
 3446              	.LASF31:
 3447 0008 67706962 		.ascii	"gpib_line\000"
 3447      5F6C696E 
 3447      6500
 3448              	.LASF23:
 3449 0012 76657273 		.ascii	"version\000"
 3449      696F6E00 
 3450              	.LASF58:
 3451 001a 67706962 		.ascii	"gpib_address_listener\000"
 3451      5F616464 
 3451      72657373 
 3451      5F6C6973 
 3451      74656E65 
 3452              	.LASF41:
 3453 0030 67706962 		.ascii	"gpib_get_buffer\000"
 3453      5F676574 
 3453      5F627566 
 3453      66657200 
 3454              	.LASF24:
 3455 0040 61646472 		.ascii	"address\000"
 3455      65737300 
 3456              	.LASF70:
 3457 0048 67706962 		.ascii	"gpib_buffer\000"
 3457      5F627566 
 3457      66657200 
 3458              	.LASF2:
 3459 0054 73686F72 		.ascii	"short int\000"
 3459      7420696E 
 3459      7400
 3460              	.LASF21:
 3461 005e 73697A65 		.ascii	"sizetype\000"
 3461      74797065 
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 71


 3461      00
 3462              	.LASF65:
 3463 0067 756E7469 		.ascii	"until\000"
 3463      6C00
 3464              	.LASF77:
 3465 006d 5C5C4D61 		.ascii	"\\\\Mac\\Home\\Documents\\dev\\yaugi\\GPIB USB Adap"
 3465      635C486F 
 3465      6D655C44 
 3465      6F63756D 
 3465      656E7473 
 3466 0099 7465725C 		.ascii	"ter\\GPIB USB 1.cydsn\000"
 3466      47504942 
 3466      20555342 
 3466      20312E63 
 3466      7964736E 
 3467              	.LASF50:
 3468 00ae 67706962 		.ascii	"gpib_interface_clear\000"
 3468      5F696E74 
 3468      65726661 
 3468      63655F63 
 3468      6C656172 
 3469              	.LASF33:
 3470 00c3 67706962 		.ascii	"gpib_settle\000"
 3470      5F736574 
 3470      746C6500 
 3471              	.LASF4:
 3472 00cf 5F5F7569 		.ascii	"__uint16_t\000"
 3472      6E743136 
 3472      5F7400
 3473              	.LASF40:
 3474 00da 6F6C645F 		.ascii	"old_state\000"
 3474      73746174 
 3474      6500
 3475              	.LASF12:
 3476 00e4 75696E74 		.ascii	"uint8_t\000"
 3476      385F7400 
 3477              	.LASF25:
 3478 00ec 6175746F 		.ascii	"autoread\000"
 3478      72656164 
 3478      00
 3479              	.LASF36:
 3480 00f5 6C696E65 		.ascii	"line\000"
 3480      00
 3481              	.LASF61:
 3482 00fa 67706962 		.ascii	"gpib_send\000"
 3482      5F73656E 
 3482      6400
 3483              	.LASF42:
 3484 0104 67706962 		.ascii	"gpib_get_mode\000"
 3484      5F676574 
 3484      5F6D6F64 
 3484      6500
 3485              	.LASF69:
 3486 0112 73657474 		.ascii	"settings\000"
 3486      696E6773 
 3486      00
 3487              	.LASF9:
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 72


 3488 011b 6C6F6E67 		.ascii	"long long int\000"
 3488      206C6F6E 
 3488      6720696E 
 3488      7400
 3489              	.LASF57:
 3490 0129 67706962 		.ascii	"gpib_send_GTL\000"
 3490      5F73656E 
 3490      645F4754 
 3490      4C00
 3491              	.LASF28:
 3492 0137 72656164 		.ascii	"read_tmo_ms\000"
 3492      5F746D6F 
 3492      5F6D7300 
 3493              	.LASF6:
 3494 0143 6C6F6E67 		.ascii	"long int\000"
 3494      20696E74 
 3494      00
 3495              	.LASF76:
 3496 014c 67706962 		.ascii	"gpib.c\000"
 3496      2E6300
 3497              	.LASF51:
 3498 0153 67706962 		.ascii	"gpib_LAD\000"
 3498      5F4C4144 
 3498      00
 3499              	.LASF3:
 3500 015c 5F5F7569 		.ascii	"__uint8_t\000"
 3500      6E74385F 
 3500      7400
 3501              	.LASF67:
 3502 0166 64657374 		.ascii	"dest\000"
 3502      00
 3503              	.LASF59:
 3504 016b 67706962 		.ascii	"gpib_address_talker\000"
 3504      5F616464 
 3504      72657373 
 3504      5F74616C 
 3504      6B657200 
 3505              	.LASF75:
 3506 017f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3506      43313120 
 3506      352E342E 
 3506      31203230 
 3506      31363036 
 3507 01b2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 3507      20726576 
 3507      6973696F 
 3507      6E203233 
 3507      37373135 
 3508 01e5 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3508      66756E63 
 3508      74696F6E 
 3508      2D736563 
 3508      74696F6E 
 3509              	.LASF1:
 3510 020d 756E7369 		.ascii	"unsigned char\000"
 3510      676E6564 
 3510      20636861 
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 73


 3510      7200
 3511              	.LASF20:
 3512 021b 6C6F6E67 		.ascii	"long double\000"
 3512      20646F75 
 3512      626C6500 
 3513              	.LASF78:
 3514 0227 636C6561 		.ascii	"cleanup\000"
 3514      6E757000 
 3515              	.LASF66:
 3516 022f 67706962 		.ascii	"gpib_read_bytes\000"
 3516      5F726561 
 3516      645F6279 
 3516      74657300 
 3517              	.LASF52:
 3518 023f 67706962 		.ascii	"gpib_TAD\000"
 3518      5F544144 
 3518      00
 3519              	.LASF32:
 3520 0248 67706962 		.ascii	"gpib_init_pins\000"
 3520      5F696E69 
 3520      745F7069 
 3520      6E7300
 3521              	.LASF0:
 3522 0257 7369676E 		.ascii	"signed char\000"
 3522      65642063 
 3522      68617200 
 3523              	.LASF10:
 3524 0263 6C6F6E67 		.ascii	"long long unsigned int\000"
 3524      206C6F6E 
 3524      6720756E 
 3524      7369676E 
 3524      65642069 
 3525              	.LASF14:
 3526 027a 75696E74 		.ascii	"uint32_t\000"
 3526      33325F74 
 3526      00
 3527              	.LASF11:
 3528 0283 756E7369 		.ascii	"unsigned int\000"
 3528      676E6564 
 3528      20696E74 
 3528      00
 3529              	.LASF13:
 3530 0290 75696E74 		.ascii	"uint16_t\000"
 3530      31365F74 
 3530      00
 3531              	.LASF71:
 3532 0299 6D795F61 		.ascii	"my_address\000"
 3532      64647265 
 3532      737300
 3533              	.LASF64:
 3534 02a4 67706962 		.ascii	"gpib_read\000"
 3534      5F726561 
 3534      6400
 3535              	.LASF45:
 3536 02ae 67706962 		.ascii	"gpib_wait_for_line_to_unassert\000"
 3536      5F776169 
 3536      745F666F 
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 74


 3536      725F6C69 
 3536      6E655F74 
 3537              	.LASF68:
 3538 02cd 6D61786C 		.ascii	"maxlen\000"
 3538      656E00
 3539              	.LASF48:
 3540 02d4 6C617374 		.ascii	"last\000"
 3540      00
 3541              	.LASF19:
 3542 02d9 72656733 		.ascii	"reg32\000"
 3542      3200
 3543              	.LASF26:
 3544 02df 656F745F 		.ascii	"eot_char\000"
 3544      63686172 
 3544      00
 3545              	.LASF5:
 3546 02e8 73686F72 		.ascii	"short unsigned int\000"
 3546      7420756E 
 3546      7369676E 
 3546      65642069 
 3546      6E7400
 3547              	.LASF27:
 3548 02fb 656F745F 		.ascii	"eot_enable\000"
 3548      656E6162 
 3548      6C6500
 3549              	.LASF49:
 3550 0306 67706962 		.ascii	"gpib_receive_byte\000"
 3550      5F726563 
 3550      65697665 
 3550      5F627974 
 3550      6500
 3551              	.LASF53:
 3552 0318 67706962 		.ascii	"gpib_UNL\000"
 3552      5F554E4C 
 3552      00
 3553              	.LASF18:
 3554 0321 63686172 		.ascii	"char\000"
 3554      00
 3555              	.LASF55:
 3556 0326 67706962 		.ascii	"gpib_send_SDC\000"
 3556      5F73656E 
 3556      645F5344 
 3556      4300
 3557              	.LASF30:
 3558 0334 4E524644 		.ascii	"NRFD\000"
 3558      00
 3559              	.LASF46:
 3560 0339 67706962 		.ascii	"gpib_send_byte\000"
 3560      5F73656E 
 3560      645F6279 
 3560      746500
 3561              	.LASF56:
 3562 0348 67706962 		.ascii	"gpib_send_LLO\000"
 3562      5F73656E 
 3562      645F4C4C 
 3562      4F00
 3563              	.LASF34:
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 75


 3564 0356 67706962 		.ascii	"gpib_assert_line\000"
 3564      5F617373 
 3564      6572745F 
 3564      6C696E65 
 3564      00
 3565              	.LASF38:
 3566 0367 5F426F6F 		.ascii	"_Bool\000"
 3566      6C00
 3567              	.LASF74:
 3568 036d 5F677069 		.ascii	"_gpib_mode\000"
 3568      625F6D6F 
 3568      646500
 3569              	.LASF16:
 3570 0378 666C6F61 		.ascii	"float\000"
 3570      7400
 3571              	.LASF72:
 3572 037e 6C697374 		.ascii	"listening\000"
 3572      656E696E 
 3572      6700
 3573              	.LASF15:
 3574 0388 75696E74 		.ascii	"uint32\000"
 3574      333200
 3575              	.LASF8:
 3576 038f 6C6F6E67 		.ascii	"long unsigned int\000"
 3576      20756E73 
 3576      69676E65 
 3576      6420696E 
 3576      7400
 3577              	.LASF17:
 3578 03a1 646F7562 		.ascii	"double\000"
 3578      6C6500
 3579              	.LASF35:
 3580 03a8 67706962 		.ascii	"gpib_unassert_line\000"
 3580      5F756E61 
 3580      73736572 
 3580      745F6C69 
 3580      6E6500
 3581              	.LASF7:
 3582 03bb 5F5F7569 		.ascii	"__uint32_t\000"
 3582      6E743332 
 3582      5F7400
 3583              	.LASF47:
 3584 03c6 62797465 		.ascii	"byte\000"
 3584      00
 3585              	.LASF44:
 3586 03cb 67706962 		.ascii	"gpib_wait_for_line_to_assert\000"
 3586      5F776169 
 3586      745F666F 
 3586      725F6C69 
 3586      6E655F74 
 3587              	.LASF60:
 3588 03e8 67706962 		.ascii	"gpib_talking\000"
 3588      5F74616C 
 3588      6B696E67 
 3588      00
 3589              	.LASF22:
 3590 03f5 7369676E 		.ascii	"signature\000"
ARM GAS  C:\Users\essele\AppData\Local\Temp\cca3ux8d.s 			page 76


 3590      61747572 
 3590      6500
 3591              	.LASF39:
 3592 03ff 67706962 		.ascii	"gpib_poll\000"
 3592      5F706F6C 
 3592      6C00
 3593              	.LASF63:
 3594 0409 67706962 		.ascii	"gpib_send_bytes\000"
 3594      5F73656E 
 3594      645F6279 
 3594      74657300 
 3595              	.LASF62:
 3596 0419 656F6970 		.ascii	"eoipos\000"
 3596      6F7300
 3597              	.LASF43:
 3598 0420 67706962 		.ascii	"gpib_read_line\000"
 3598      5F726561 
 3598      645F6C69 
 3598      6E6500
 3599              	.LASF54:
 3600 042f 67706962 		.ascii	"gpib_UNT\000"
 3600      5F554E54 
 3600      00
 3601              	.LASF37:
 3602 0438 67706962 		.ascii	"gpib_readall\000"
 3602      5F726561 
 3602      64616C6C 
 3602      00
 3603              	.LASF29:
 3604 0445 4E444143 		.ascii	"NDAC\000"
 3604      00
 3605              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
